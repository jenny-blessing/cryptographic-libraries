264,12,1104,44,408,"new@118-525@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","new","new server_name : & 'a Option<webpki::DnsName>,
        signature_schemes: &' a [ SignatureScheme ] , alpn : Option < & 'a Vec<PayloadU8>>,
    ) -> Self {
        trace!('sni {:?}', server_name);
        trace!('sig schemes {:?}', signature_schemes);
        trace!('alpn protocols {:?}', alpn);

        ClientHello {
            server_name,
            signature_schemes,
            alpn,
        }
    }

    /// Get the server name indicator.
    ///
    /// Returns `None` if the client did not supply a SNI.
    pub fn server_name(&self) -> Option<&str> {
        self.server_name
            .as_ref()
            .map(<webpki::DnsName as AsRef<str>>::as_ref)
    }

    /// Get the compatible signature schemes.
    ///
    /// Returns standard-specified default if the client omitted this extension.
    pub fn signature_schemes(&self) -> &[SignatureScheme] {
        self.signature_schemes
    }

    /// Get the alpn.
    ///
    /// Returns `None` if the client did not include an ALPN extension
    pub fn alpn(&self) -> Option<impl Iterator<Item = &' a [ u8 ] > > { self . alpn . map | protocols | { protocols . iter . map | proto | proto . 0 . as_slice } } } #[derive(Clone)] pub struct ServerConfig { pub super cipher_suites : Vec < SupportedCipherSuite > , pub super kx_groups : Vec < & 'static SupportedKxGroup>,

    /// Ignore the client' s ciphersuite order . Instead , pub ignore_client_order : bool , pub max_fragment_size : Option < usize > , pub session_storage : Arc < dyn StoresServerSessions + Send + Sync > , pub ticketer : Arc < dyn ProducesTickets > , pub cert_resolver : Arc < dyn ResolvesServerCert > , pub alpn_protocols : Vec < Vec < u8 > > , pub super versions : crate :: versions :: EnabledVersions , pub super verifier : Arc < dyn verify :: ClientCertVerifier > , pub key_log : Arc < dyn KeyLog > , #[cfg(feature = 'quic')] // TLS support unimplemented #[doc(hidden)] pub max_early_data_size : u32 , } impl ServerConfig { pub fn builder -> ConfigBuilder < Self , WantsCipherSuites > { ConfigBuilder { state : WantsCipherSuites , side : PhantomData :: default , } } #[doc(hidden)] pub fn supports_version & self , v : ProtocolVersion -> bool { self . versions . contains v && self . cipher_suites . iter . any | cs | cs . version . version == v } } pub struct ServerConnection { inner : ConnectionCommon < ServerConnectionData > , } impl ServerConnection { pub fn new config : Arc < ServerConfig > -> Result < Self , Error > { Self :: from_config config , vec ! [ ] } fn from_config config : Arc < ServerConfig > , extra_exts : Vec < ServerExtension > , -> Result < Self , Error > { let common = CommonState :: new config . max_fragment_size , false ? ; Ok Self { inner : ConnectionCommon :: new Box :: new hs :: ExpectClientHello :: new config , extra_exts , ServerConnectionData :: default , common , , } } pub fn sni_hostname & self -> Option < & str > { self . inner . data . get_sni_str } pub fn received_resumption_data & self -> Option < & [ u8 ] > { self . inner . data . received_resumption_data . as_ref . map | x | & x [ . . ] } pub fn set_resumption_data & mut self , data : & [ u8 ] { assert ! data . len < 2usize . pow 15 ; self . inner . data . resumption_data = data . into ; } pub fn reject_early_data & mut self { assert ! self . is_handshaking , 'cannot retroactively reject early data' ; self . inner . data . reject_early_data = true ; } } impl fmt :: Debug for ServerConnection { fn fmt & self , f : & mut fmt :: Formatter -> fmt :: Result { f . debug_struct 'ServerConnection' . finish } } impl Deref for ServerConnection { type Target = ConnectionCommon < ServerConnectionData > ; fn deref & self -> & Self :: Target { & self . inner } } impl DerefMut for ServerConnection { fn deref_mut & mut self -> & mut Self :: Target { & mut self . inner } } impl From < ServerConnection > for crate :: Connection { fn from conn : ServerConnection -> Self { Self :: Server conn } } pub struct Acceptor { inner : Option < ConnectionCommon < ServerConnectionData > > , } impl Acceptor { pub fn new -> Result < Self , Error > { let common = CommonState :: new None , false ? ; let state = Box :: new Accepting ; Ok Self { inner : Some ConnectionCommon :: new state , Default :: default , common , } } pub fn wants_read & self -> bool { self . inner . as_ref . map | conn | conn . common_state . wants_read . unwrap_or false } pub fn read_tls & mut self , rd : & mut dyn io :: Read -> Result < usize , io :: Error > { match & mut self . inner { Some conn => conn . read_tls rd , None => Err io :: Error :: new io :: ErrorKind :: Other , 'acceptor cannot read after successful acceptance' , , } } pub fn accept & mut self -> Result < Option < Accepted > , Error > { let mut connection = match self . inner . take { Some conn => conn , None => { return Err Error :: General 'cannot accept after successful acceptance' . into , ; } } ; let message = match connection . first_handshake_message { Ok Some msg => msg , Ok None => { self . inner = Some connection ; return Ok None ; } Err e => { self . inner = Some connection ; return Err e ; } } ; let _ , sig_schemes = hs :: process_client_hello & message , false , & mut connection . common_state , & mut connection . data , ? ; Ok Some Accepted { connection , message , sig_schemes , } } } pub struct Accepted { connection : ConnectionCommon < ServerConnectionData > , message : Message , sig_schemes : Vec < SignatureScheme > , } impl Accepted { pub fn client_hello & self -> ClientHello < '_> {
        ClientHello::new(
            &self.connection.data.sni,
            &self.sig_schemes,
            Self::client_hello_payload(&self.message).get_alpn_extension(),
        )
    }

    /// Convert the [`Accepted`] into a [`ServerConnection`].
    ///
    /// Takes the state returned from [`Acceptor::accept()`] as well as the [`ServerConfig`] and
    /// [`sign::CertifiedKey`] that should be used for the session. Returns an error if
    /// configuration-dependent validation of the received `ClientHello` message fails.
    pub fn into_connection(mut self, config: Arc<ServerConfig>) -> Result<ServerConnection, Error> {
        self.connection
            .common_state
            .set_max_fragment_size(config.max_fragment_size)?;
        let state = hs::ExpectClientHello::new(config, Vec::new());
        let mut cx = hs::ServerContext {
            common: &mut self.connection.common_state,
            data: &mut self.connection.data,
        };

        let new = state.with_certified_key(
            self.sig_schemes,
            Self::client_hello_payload(&self.message),
            &self.message,
            &mut cx,
        )?;

        self.connection.replace_state(new);
        Ok(ServerConnection {
            inner: self.connection,
        })
    }

    fn client_hello_payload(message: &Message) -> &ClientHelloPayload {
        match &message.payload {
            crate::msgs::message::MessagePayload::Handshake(inner) => match &inner.payload {
                crate::msgs::handshake::HandshakePayload::ClientHello(ch) => ch,
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
}

struct Accepting;

impl State<ServerConnectionData> for Accepting {
    fn handle(
        self: Box<Self>,
        _cx: &mut hs::ServerContext<' _ > , _m : Message ,",118,525
10,1,59,2,421,"resolve@106-526@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","resolve","resolve & self , client_hello : ClientHello",106,526
3,1,28,1,3,"get_sni_str@541-543@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","get_sni_str","get_sni_str & self",541,543
8,1,41,1,8,"quic_transport_parameters@550-557@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","quic_transport_parameters","quic_transport_parameters & self",550,557
13,3,61,1,13,"zero_rtt_keys@559-571@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","zero_rtt_keys","zero_rtt_keys & self",559,571
3,1,32,1,3,"read_hs@573-575@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","read_hs","read_hs & mut self , plaintext : & [ u8 ]",573,575
3,1,39,1,3,"write_hs@577-579@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","write_hs","write_hs & mut self , buf : & mut Vec < u8 >",577,579
3,1,22,1,3,"alert@581-583@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","alert","alert & self",581,583
23,6,159,1,25,"new_quic@592-616@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/server_conn.rs","new_quic","new_quic config : Arc < ServerConfig > , quic_version : quic :: Version , params : Vec < u8 > ,",592,616
3,1,25,1,3,"put@15-17@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","put","put & self , _id : Vec < u8 > , _sec : Vec < u8 >",15,17
3,1,24,1,3,"get@18-20@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","get","get & self , _id : & [ u8 ]",18,20
3,1,24,1,3,"take@21-23@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","take","take & self , _id : & [ u8 ]",21,23
3,1,11,1,3,"can_cache@24-26@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","can_cache","can_cache & self",24,26
5,1,38,1,5,"new@40-44@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","new","new size : usize",40,44
7,1,44,1,7,"put@48-54@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","put","put & self , key : Vec < u8 > , value : Vec < u8 >",48,54
7,1,43,1,7,"get@56-62@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","get","get & self , key : & [ u8 ]",56,62
3,1,39,1,3,"take@64-66@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","take","take & self , key : & [ u8 ]",64,66
3,1,11,1,3,"can_cache@68-70@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","can_cache","can_cache & self",68,70
3,1,11,1,3,"enabled@77-79@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","enabled","enabled & self",77,79
3,1,11,1,3,"lifetime@80-82@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","lifetime","lifetime & self",80,82
3,1,24,1,3,"encrypt@83-85@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","encrypt","encrypt & self , _bytes : & [ u8 ]",83,85
3,1,24,1,3,"decrypt@86-88@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","decrypt","decrypt & self , _bytes : & [ u8 ]",86,88
8,2,78,1,8,"new@97-104@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","new","new chain : Vec < key :: Certificate > , priv_key : & key :: PrivateKey ,",97,104
18,4,113,1,20,"new_with_extras@110-129@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","new_with_extras","new_with_extras chain : Vec < key :: Certificate > , priv_key : & key :: PrivateKey , ocsp : Vec < u8 > , scts : Vec < u8 > ,",110,129
3,1,34,2,3,"resolve@133-135@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","resolve","resolve & self , _client_hello : ClientHello",133,135
5,1,21,0,5,"new@146-150@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","new","new",146,150
8,3,94,3,9,"add@157-165@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","add","add & mut self , name : & str , ck : sign :: CertifiedKey",157,165
7,2,55,2,8,"resolve@169-176@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","resolve","resolve & self , client_hello : ClientHello",169,176
4,1,35,0,4,"test_noserversessionstorage_drops_put@187-190@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","test_noserversessionstorage_drops_put","test_noserversessionstorage_drops_put",187,190
7,1,77,0,7,"test_noserversessionstorage_denies_gets@193-199@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","test_noserversessionstorage_denies_gets","test_noserversessionstorage_denies_gets",193,199
6,1,60,0,6,"test_noserversessionstorage_denies_takes@202-207@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","test_noserversessionstorage_denies_takes","test_noserversessionstorage_denies_takes",202,207
4,1,37,0,4,"test_serversessionmemorycache_accepts_put@210-213@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","test_serversessionmemorycache_accepts_put","test_serversessionmemorycache_accepts_put",210,213
6,1,83,0,6,"test_serversessionmemorycache_persists_put@216-221@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","test_serversessionmemorycache_persists_put","test_serversessionmemorycache_persists_put",216,221
6,1,81,0,6,"test_serversessionmemorycache_overwrites_put@224-229@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","test_serversessionmemorycache_overwrites_put","test_serversessionmemorycache_overwrites_put",224,229
14,1,222,0,16,"test_serversessionmemorycache_drops_to_maintain_size_invariant@232-247@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","test_serversessionmemorycache_drops_to_maintain_size_invariant","test_serversessionmemorycache_drops_to_maintain_size_invariant",232,247
7,1,66,0,7,"test_neverproducestickets_does_nothing@250-256@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","test_neverproducestickets_does_nothing","test_neverproducestickets_does_nothing",250,256
6,1,42,0,6,"test_resolvesservercertusingsni_requires_sni@259-264@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","test_resolvesservercertusingsni_requires_sni","test_resolvesservercertusingsni_requires_sni",259,264
9,1,65,0,9,"test_resolvesservercertusingsni_handles_unknown_name@267-275@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/handy.rs","test_resolvesservercertusingsni_handles_unknown_name","test_resolvesservercertusingsni_handles_unknown_name",267,275
4,1,37,2,4,"incompatible@32-35@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","incompatible","incompatible common : & mut CommonState , why : & str",32,35
4,1,37,2,4,"bad_version@37-40@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","bad_version","bad_version common : & mut CommonState , why : & str",37,40
4,1,37,2,4,"decode_error@42-45@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","decode_error","decode_error common : & mut CommonState , why : & str",42,45
10,5,66,3,17,"can_resume@47-63@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","can_resume","can_resume suite : SupportedCipherSuite , sni : & Option < webpki :: DnsName > , using_ems : bool , resumedata : & persist :: ServerSessionValue ,",47,63
3,1,13,0,3,"new@74-76@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","new","new",74,76
366,33,909,34,415,"process_common@78-492@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/hs.rs","process_common","process_common & mut self , config : & ServerConfig , cx : & mut ServerContext < '_>,
        #[allow(unused_variables)] // #[cfg(feature = 'quic')] only
        suite: SupportedCipherSuite,
        ocsp_response: &mut Option<&[u8]>,
        sct_list: &mut Option<&[u8]>,
        hello: &ClientHelloPayload,
        resumedata: Option<&persist::ServerSessionValue>,
        extra_exts: Vec<ServerExtension>,
    ) -> Result<(), Error> {
        // ALPN
        let our_protocols = &config.alpn_protocols;
        let maybe_their_protocols = hello.get_alpn_extension();
        if let Some(their_protocols) = maybe_their_protocols {
            let their_protocols = their_protocols.to_slices();

            if their_protocols
                .iter()
                .any(|protocol| protocol.is_empty())
            {
                return Err(Error::PeerMisbehavedError(
                    'client offered empty ALPN protocol'.to_string(),
                ));
            }

            cx.common.alpn_protocol = our_protocols
                .iter()
                .find(|protocol| their_protocols.contains(&protocol.as_slice()))
                .cloned();
            if let Some(ref selected_protocol) = cx.common.alpn_protocol {
                debug!('Chosen ALPN protocol {:?}', selected_protocol);
                self.exts
                    .push(ServerExtension::make_alpn(&[selected_protocol]));
            } else if !our_protocols.is_empty() {
                cx.common
                    .send_fatal_alert(AlertDescription::NoApplicationProtocol);
                return Err(Error::NoApplicationProtocol);
            }
        }

        #[cfg(feature = 'quic')]
        {
            if cx.common.is_quic() {
                // QUIC has strict ALPN, unlike TLS' s more backwards - compatible behavior . RFC 9001 if cx . common . alpn_protocol . is_none && ! our_protocols . is_empty || maybe_their_protocols . is_some { cx . common . send_fatal_alert AlertDescription :: NoApplicationProtocol ; return Err Error :: NoApplicationProtocol ; } match hello . get_quic_params_extension { Some params => cx . common . quic . params = Some params , None => { return Err cx . common . missing_extension 'QUIC transport parameters not found' ; } } if let Some resume = resumedata { if config . max_early_data_size > 0 && hello . early_data_extension_offered && resume . version == cx . common . negotiated_version . unwrap && resume . cipher_suite == suite . suite && resume . alpn . as_ref . map | x | & x . 0 == cx . common . alpn_protocol . as_ref && ! cx . data . reject_early_data { self . exts . push ServerExtension :: EarlyData ; } else { cx . common . quic . early_secret = None ; } } } } let for_resume = resumedata . is_some ; if ! for_resume && hello . get_sni_extension . is_some { self . exts . push ServerExtension :: ServerNameAck ; } if ! for_resume && hello . find_extension ExtensionType :: StatusRequest . is_some { if ocsp_response . is_some && ! cx . common . is_tls13 { self . exts . push ServerExtension :: CertificateStatusAck ; } } else { ocsp_response . take ; } if ! for_resume && hello . find_extension ExtensionType :: SCT . is_some { if ! cx . common . is_tls13 { if let Some sct_list = sct_list . take { self . exts . push ServerExtension :: make_sct sct_list . to_vec ; } } } else { sct_list . take ; } self . exts . extend extra_exts ; Ok } #[cfg(feature = 'tls12')] pub super fn process_tls12 & mut self , config : & ServerConfig , hello : & ClientHelloPayload , using_ems : bool , { let secure_reneg_offered = hello . find_extension ExtensionType :: RenegotiationInfo . is_some || hello . cipher_suites . contains & CipherSuite :: TLS_EMPTY_RENEGOTIATION_INFO_SCSV ; if secure_reneg_offered { self . exts . push ServerExtension :: make_empty_renegotiation_info ; } if hello . find_extension ExtensionType :: SessionTicket . is_some && config . ticketer . enabled { self . send_ticket = true ; self . exts . push ServerExtension :: SessionTicketAck ; } if using_ems { self . exts . push ServerExtension :: ExtendedMasterSecretAck ; } } } pub super struct ExpectClientHello { pub super config : Arc < ServerConfig > , pub super extra_exts : Vec < ServerExtension > , pub super transcript : HandshakeHashOrBuffer , #[cfg(feature = 'tls12')] pub super session_id : SessionID , #[cfg(feature = 'tls12')] pub super using_ems : bool , pub super done_retry : bool , pub super send_ticket : bool , } impl ExpectClientHello { pub super fn new config : Arc < ServerConfig > , extra_exts : Vec < ServerExtension > -> Self { let mut transcript_buffer = HandshakeHashBuffer :: new ; if config . verifier . offer_client_auth { transcript_buffer . set_client_auth_enabled ; } Self { config , extra_exts , transcript : HandshakeHashOrBuffer :: Buffer transcript_buffer , #[cfg(feature = 'tls12')] session_id : SessionID :: empty , #[cfg(feature = 'tls12')] using_ems : false , done_retry : false , send_ticket : false , } } pub super fn with_certified_key self , sig_schemes : Vec < SignatureScheme > , client_hello : & ClientHelloPayload , m : & Message , cx : & mut ServerContext < '_>,
    ) -> NextStateOrError {
        let tls13_enabled = self
            .config
            .supports_version(ProtocolVersion::TLSv1_3);
        let tls12_enabled = self
            .config
            .supports_version(ProtocolVersion::TLSv1_2);

        // Are we doing TLS1.3?
        let maybe_versions_ext = client_hello.get_versions_extension();
        let version = if let Some(versions) = maybe_versions_ext {
            if versions.contains(&ProtocolVersion::TLSv1_3) && tls13_enabled {
                ProtocolVersion::TLSv1_3
            } else if !versions.contains(&ProtocolVersion::TLSv1_2) || !tls12_enabled {
                return Err(bad_version(cx.common, 'TLS1.2 not offered/enabled'));
            } else if cx.common.is_quic() {
                return Err(bad_version(
                    cx.common,
                    'Expecting QUIC connection, but client does not support TLSv1_3',
                ));
            } else {
                ProtocolVersion::TLSv1_2
            }
        } else if client_hello.client_version.get_u16() < ProtocolVersion::TLSv1_2.get_u16() {
            return Err(bad_version(cx.common, 'Client does not support TLSv1_2'));
        } else if !tls12_enabled && tls13_enabled {
            return Err(bad_version(
                cx.common,
                'Server requires TLS1.3, but client omitted versions ext',
            ));
        } else if cx.common.is_quic() {
            return Err(bad_version(
                cx.common,
                'Expecting QUIC connection, but client does not support TLSv1_3',
            ));
        } else {
            ProtocolVersion::TLSv1_2
        };

        cx.common.negotiated_version = Some(version);

        // Choose a certificate.
        let certkey = {
            let client_hello = ClientHello::new(
                &cx.data.sni,
                &sig_schemes,
                client_hello.get_alpn_extension(),
            );

            let certkey = self
                .config
                .cert_resolver
                .resolve(client_hello);

            certkey.ok_or_else(|| {
                cx.common
                    .send_fatal_alert(AlertDescription::AccessDenied);
                Error::General('no server certificate chain resolved'.to_string())
            })?
        };
        let certkey = ActiveCertifiedKey::from_certified_key(&certkey);

        // Reduce our supported ciphersuites by the certificate.
        // (no-op for TLS1.3)
        let suitable_suites =
            suites::reduce_given_sigalg(&self.config.cipher_suites, certkey.get_key().algorithm());

        // And version
        let suitable_suites = suites::reduce_given_version(&suitable_suites, version);

        let suite = if self.config.ignore_client_order {
            suites::choose_ciphersuite_preferring_server(
                &client_hello.cipher_suites,
                &suitable_suites,
            )
        } else {
            suites::choose_ciphersuite_preferring_client(
                &client_hello.cipher_suites,
                &suitable_suites,
            )
        }
        .ok_or_else(|| incompatible(cx.common, 'no ciphersuites in common'))?;

        debug!('decided upon suite {:?}', suite);
        cx.common.suite = Some(suite);

        // Start handshake hash.
        let starting_hash = suite.hash_algorithm();
        let transcript = match self.transcript {
            HandshakeHashOrBuffer::Buffer(inner) => inner.start_hash(starting_hash),
            HandshakeHashOrBuffer::Hash(inner) if inner.algorithm() == starting_hash => inner,
            _ => {
                return Err(cx
                    .common
                    .illegal_param('hash differed on retry'));
            }
        };

        // Save their Random.
        let randoms = ConnectionRandoms::new(client_hello.random, Random::new()?, false);
        match suite {
            SupportedCipherSuite::Tls13(suite) => tls13::CompleteClientHelloHandling {
                config: self.config,
                transcript,
                suite,
                randoms,
                done_retry: self.done_retry,
                send_ticket: self.send_ticket,
                extra_exts: self.extra_exts,
            }
            .handle_client_hello(cx, certkey, m, client_hello, sig_schemes),
            #[cfg(feature = 'tls12')]
            SupportedCipherSuite::Tls12(suite) => tls12::CompleteClientHelloHandling {
                config: self.config,
                transcript,
                session_id: self.session_id,
                suite,
                using_ems: self.using_ems,
                randoms,
                send_ticket: self.send_ticket,
                extra_exts: self.extra_exts,
            }
            .handle_client_hello(
                cx,
                certkey,
                m,
                client_hello,
                sig_schemes,
                tls13_enabled,
            ),
        }
    }
}

impl State<ServerConnectionData> for ExpectClientHello {
    fn handle(self: Box<Self>, cx: &mut ServerContext<' _ > , m : Message -> NextStateOrError { let client_hello , sig_schemes = process_client_hello & m , self . done_retry , cx . common , cx . data ? ; self . with_certified_key sig_schemes , client_hello , & m , cx } } pub super fn process_client_hello < 'a>(
    m: &' a Message , done_retry : bool , common : & mut CommonState , data : & mut ServerConnectionData ,",78,492
186,5,268,5,191,"start_resumption@236-426@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/tls12.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/tls12.rs","start_resumption","start_resumption mut self , cx : & mut ServerContext < '_>,
            client_hello: &ClientHelloPayload,
            id: &SessionID,
            resumedata: persist::ServerSessionValue,
        ) -> hs::NextStateOrError {
            debug!('Resuming connection');

            if resumedata.extended_ms && !self.using_ems {
                return Err(cx
                    .common
                    .illegal_param('refusing to resume without ems'));
            }

            self.session_id = *id;
            self.send_ticket = emit_server_hello(
                &self.config,
                &mut self.transcript,
                cx,
                self.session_id,
                self.suite,
                self.using_ems,
                &mut None,
                &mut None,
                client_hello,
                Some(&resumedata),
                &self.randoms,
                self.extra_exts,
            )?;

            let secrets = ConnectionSecrets::new_resume(
                self.randoms,
                self.suite,
                &resumedata.master_secret.0,
            );
            self.config.key_log.log(
                'CLIENT_RANDOM',
                &secrets.randoms.client,
                &secrets.master_secret,
            );
            cx.common
                .start_encryption_tls12(&secrets);
            cx.common.peer_certificates = resumedata.client_cert_chain;

            if self.send_ticket {
                emit_ticket(
                    &secrets,
                    &mut self.transcript,
                    self.using_ems,
                    cx,
                    &*self.config.ticketer,
                );
            }
            emit_ccs(cx.common);
            cx.common
                .record_layer
                .start_encrypting();
            emit_finished(&secrets, &mut self.transcript, cx.common);

            Ok(Box::new(ExpectCcs {
                config: self.config,
                secrets,
                transcript: self.transcript,
                session_id: self.session_id,
                using_ems: self.using_ems,
                resuming: true,
                send_ticket: self.send_ticket,
            }))
        }
    }

    fn emit_server_hello(
        config: &ServerConfig,
        transcript: &mut HandshakeHash,
        cx: &mut ServerContext<' _ > , session_id : SessionID , suite : & 'static Tls12CipherSuite,
        using_ems: bool,
        ocsp_response: &mut Option<&[u8]>,
        sct_list: &mut Option<&[u8]>,
        hello: &ClientHelloPayload,
        resumedata: Option<&persist::ServerSessionValue>,
        randoms: &ConnectionRandoms,
        extra_exts: Vec<ServerExtension>,
    ) -> Result<bool, Error> {
        let mut ep = hs::ExtensionProcessing::new();
        ep.process_common(
            config,
            cx,
            suite.into(),
            ocsp_response,
            sct_list,
            hello,
            resumedata,
            extra_exts,
        )?;
        ep.process_tls12(config, hello, using_ems);

        let sh = Message {
            version: ProtocolVersion::TLSv1_2,
            payload: MessagePayload::Handshake(HandshakeMessagePayload {
                typ: HandshakeType::ServerHello,
                payload: HandshakePayload::ServerHello(ServerHelloPayload {
                    legacy_version: ProtocolVersion::TLSv1_2,
                    random: Random::from(randoms.server),
                    session_id,
                    cipher_suite: suite.common.suite,
                    compression_method: Compression::Null,
                    extensions: ep.exts,
                }),
            }),
        };

        trace!('sending server hello {:?}', sh);
        transcript.add_message(&sh);
        cx.common.send_msg(sh, false);
        Ok(ep.send_ticket)
    }

    fn emit_certificate(
        transcript: &mut HandshakeHash,
        common: &mut CommonState,
        cert_chain: &[Certificate],
    ) {
        let c = Message {
            version: ProtocolVersion::TLSv1_2,
            payload: MessagePayload::Handshake(HandshakeMessagePayload {
                typ: HandshakeType::Certificate,
                payload: HandshakePayload::Certificate(cert_chain.to_owned()),
            }),
        };

        transcript.add_message(&c);
        common.send_msg(c, false);
    }

    fn emit_cert_status(transcript: &mut HandshakeHash, common: &mut CommonState, ocsp: &[u8]) {
        let st = CertificateStatus::new(ocsp.to_owned());

        let c = Message {
            version: ProtocolVersion::TLSv1_2,
            payload: MessagePayload::Handshake(HandshakeMessagePayload {
                typ: HandshakeType::CertificateStatus,
                payload: HandshakePayload::CertificateStatus(st),
            }),
        };

        transcript.add_message(&c);
        common.send_msg(c, false);
    }

    fn emit_server_kx(
        transcript: &mut HandshakeHash,
        common: &mut CommonState,
        sigschemes: Vec<SignatureScheme>,
        skxg: &' static kx :: SupportedKxGroup , signing_key : & dyn sign :: SigningKey , randoms : & ConnectionRandoms ,",236,426
125,8,333,6,131,"emit_certificate_req@428-558@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/tls12.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/tls12.rs","emit_certificate_req","emit_certificate_req config : & ServerConfig , transcript : & mut HandshakeHash , cx : & mut ServerContext < '_>,
    ) -> Result<bool, Error> {
        let client_auth = &config.verifier;

        if !client_auth.offer_client_auth() {
            return Ok(false);
        }

        let verify_schemes = client_auth.supported_verify_schemes();

        let names = client_auth
            .client_auth_root_subjects()
            .ok_or_else(|| {
                debug!('could not determine root subjects based on SNI');
                cx.common
                    .send_fatal_alert(AlertDescription::AccessDenied);
                Error::General('client rejected by client_auth_root_subjects'.into())
            })?;

        let cr = CertificateRequestPayload {
            certtypes: vec![
                ClientCertificateType::RSASign,
                ClientCertificateType::ECDSASign,
            ],
            sigschemes: verify_schemes,
            canames: names,
        };

        let m = Message {
            version: ProtocolVersion::TLSv1_2,
            payload: MessagePayload::Handshake(HandshakeMessagePayload {
                typ: HandshakeType::CertificateRequest,
                payload: HandshakePayload::CertificateRequest(cr),
            }),
        };

        trace!('Sending CertificateRequest {:?}', m);
        transcript.add_message(&m);
        cx.common.send_msg(m, false);
        Ok(true)
    }

    fn emit_server_hello_done(transcript: &mut HandshakeHash, common: &mut CommonState) {
        let m = Message {
            version: ProtocolVersion::TLSv1_2,
            payload: MessagePayload::Handshake(HandshakeMessagePayload {
                typ: HandshakeType::ServerHelloDone,
                payload: HandshakePayload::ServerHelloDone,
            }),
        };

        transcript.add_message(&m);
        common.send_msg(m, false);
    }
}

// --- Process client' s Certificate for client auth -- - struct ExpectCertificate { config : Arc < ServerConfig > , transcript : HandshakeHash , randoms : ConnectionRandoms , session_id : SessionID , suite : & 'static Tls12CipherSuite,
    using_ems: bool,
    server_kx: kx::KeyExchange,
    send_ticket: bool,
}

impl State<ServerConnectionData> for ExpectCertificate {
    fn handle(mut self: Box<Self>, cx: &mut ServerContext<' _ > , m : Message",428,558
16,2,91,1,16,"attempt_tls13_ticket_decryption@100-115@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/tls13.rs","attempt_tls13_ticket_decryption","attempt_tls13_ticket_decryption & mut self , ticket : & [ u8 ] ,",100,115
593,45,2749,148,673,"handle_client_hello@117-789@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/tls13.rs","handle_client_hello","handle_client_hello mut self , cx : & mut ServerContext < '_>,
            server_key: ActiveCertifiedKey,
            chm: &Message,
            client_hello: &ClientHelloPayload,
            mut sigschemes_ext: Vec<SignatureScheme>,
        ) -> hs::NextStateOrError {
            if client_hello.compression_methods.len() != 1 {
                return Err(cx
                    .common
                    .illegal_param('client offered wrong compressions'));
            }

            let groups_ext = client_hello
                .get_namedgroups_extension()
                .ok_or_else(|| hs::incompatible(cx.common, 'client didn' t describe groups '))?;

            let tls13_schemes = sign::supported_sign_tls13();
            sigschemes_ext.retain(|scheme| tls13_schemes.contains(scheme));

            let shares_ext = client_hello
                .get_keyshare_extension()
                .ok_or_else(|| hs::incompatible(cx.common, ' client didn 't send keyshares'))?;

            if client_hello.has_keyshare_extension_with_duplicates() {
                return Err(cx
                    .common
                    .illegal_param('client sent duplicate keyshares'));
            }

            // choose a share that we support
            let chosen_share = self
                .config
                .kx_groups
                .iter()
                .find_map(|group| {
                    shares_ext
                        .iter()
                        .find(|share| share.group == group.name)
                });

            let chosen_share = match chosen_share {
                Some(s) => s,
                None => {
                    // We don' t have a suitable key share . Choose a suitable group and let retry_group_maybe = self . config . kx_groups . iter . find | group | groups_ext . contains & group . name . cloned ; self . transcript . add_message chm ; if let Some group = retry_group_maybe { if self . done_retry { return Err cx . common . illegal_param 'did not follow retry request' ; } emit_hello_retry_request & mut self . transcript , self . suite , cx . common , group . name , ; emit_fake_ccs cx . common ; return Ok Box :: new hs :: ExpectClientHello { config : self . config , transcript : HandshakeHashOrBuffer :: Hash self . transcript , #[cfg(feature = 'tls12')] session_id : SessionID :: empty , #[cfg(feature = 'tls12')] using_ems : false , done_retry : true , send_ticket : self . send_ticket , extra_exts : self . extra_exts , } ; } return Err hs :: incompatible cx . common , 'no kx group overlap with client' , ; } } ; let mut chosen_psk_index = None ; let mut resumedata = None ; if let Some psk_offer = client_hello . get_psk { if ! client_hello . check_psk_ext_is_last { return Err cx . common . illegal_param 'psk extension in wrong position' ; } if psk_offer . binders . is_empty { return Err hs :: decode_error cx . common , 'psk extension missing binder' ; } if psk_offer . binders . len != psk_offer . identities . len { return Err cx . common . illegal_param 'psk extension mismatched ids/binders' ; } for i , psk_id in psk_offer . identities . iter . enumerate { let resume = match self . attempt_tls13_ticket_decryption & psk_id . identity . 0 . filter | resumedata | { hs :: can_resume self . suite . into , & cx . data . sni , false , resumedata } { Some resume => resume , None => continue , } ; if ! self . check_binder self . suite , chm , & resume . master_secret . 0 , & psk_offer . binders [ i ] . 0 , { cx . common . send_fatal_alert AlertDescription :: DecryptError ; return Err Error :: PeerMisbehavedError 'client sent wrong binder' . to_string , ; } chosen_psk_index = Some i ; resumedata = Some resume ; break ; } } if ! client_hello . psk_mode_offered PSKKeyExchangeMode :: PSK_DHE_KE { debug ! 'Client unwilling to resume, DHE_KE not offered' ; self . send_ticket = false ; chosen_psk_index = None ; resumedata = None ; } else { self . send_ticket = true ; } if let Some ref resume = resumedata { cx . data . received_resumption_data = Some resume . application_data . 0 . clone ; cx . common . peer_certificates = resume . client_cert_chain . clone ; } let full_handshake = resumedata . is_none ; self . transcript . add_message chm ; let key_schedule = emit_server_hello & mut self . transcript , & self . randoms , self . suite , cx , & client_hello . session_id , chosen_share , chosen_psk_index , resumedata . as_ref . map | x | & x . master_secret . 0 [ . . ] , & self . config , ? ; if ! self . done_retry { emit_fake_ccs cx . common ; } let mut ocsp_response , mut sct_list = server_key . get_ocsp , server_key . get_sct_list ; emit_encrypted_extensions & mut self . transcript , self . suite , cx , & mut ocsp_response , & mut sct_list , client_hello , resumedata . as_ref , self . extra_exts , & self . config , ? ; let doing_client_auth = if full_handshake { let client_auth = emit_certificate_req_tls13 & mut self . transcript , cx , & self . config ? ; emit_certificate_tls13 & mut self . transcript , cx . common , server_key . get_cert , ocsp_response , sct_list , ; emit_certificate_verify_tls13 & mut self . transcript , cx . common , server_key . get_key , & sigschemes_ext , ? ; client_auth } else { false } ; cx . common . check_aligned_handshake ? ; let key_schedule_traffic = emit_finished_tls13 & mut self . transcript , self . suite , & self . randoms , cx , key_schedule , & self . config , ; if doing_client_auth { Ok Box :: new ExpectCertificate { config : self . config , transcript : self . transcript , suite : self . suite , key_schedule : key_schedule_traffic , send_ticket : self . send_ticket , } } else { Ok Box :: new ExpectFinished { config : self . config , transcript : self . transcript , suite : self . suite , key_schedule : key_schedule_traffic , send_ticket : self . send_ticket , } } } } fn emit_server_hello transcript : & mut HandshakeHash , randoms : & ConnectionRandoms , suite : & 'static Tls13CipherSuite,
        cx: &mut ServerContext<' _ > , session_id : & SessionID , share : & KeyShareEntry , chosen_psk_idx : Option < usize > , resuming_psk : Option < & [ u8 ] > , config : & ServerConfig , -> Result < KeyScheduleHandshake , Error > { let mut extensions = Vec :: new ; let kx = kx :: KeyExchange :: choose share . group , & config . kx_groups . and_then kx :: KeyExchange :: start . ok_or Error :: FailedToGetRandomBytes ? ; let kse = KeyShareEntry :: new share . group , kx . pubkey . as_ref ; extensions . push ServerExtension :: KeyShare kse ; extensions . push ServerExtension :: SupportedVersions ProtocolVersion :: TLSv1_3 ; if let Some psk_idx = chosen_psk_idx { extensions . push ServerExtension :: PresharedKey psk_idx as u16 ; } let sh = Message { version : ProtocolVersion :: TLSv1_2 , payload : MessagePayload :: Handshake HandshakeMessagePayload { typ : HandshakeType :: ServerHello , payload : HandshakePayload :: ServerHello ServerHelloPayload { legacy_version : ProtocolVersion :: TLSv1_2 , random : Random :: from randoms . server , session_id : * session_id , cipher_suite : suite . common . suite , compression_method : Compression :: Null , extensions , } , } , } ; cx . common . check_aligned_handshake ? ; #[cfg(feature = 'quic')] let client_hello_hash = transcript . get_hash_given & [ ] ; trace ! 'sending server hello {:?}' , sh ; transcript . add_message & sh ; cx . common . send_msg sh , false ; let key_schedule_pre_handshake = if let Some psk = resuming_psk { let early_key_schedule = KeyScheduleEarly :: new suite . hkdf_algorithm , psk ; #[cfg(feature = 'quic')] { if cx . common . protocol == Protocol :: Quic { let client_early_traffic_secret = early_key_schedule . client_early_traffic_secret & client_hello_hash , & * config . key_log , & randoms . client , ; cx . common . quic . early_secret = Some client_early_traffic_secret ; } } KeySchedulePreHandshake :: from early_key_schedule } else { KeySchedulePreHandshake :: new suite . hkdf_algorithm } ; let key_schedule = kx . complete & share . payload . 0 , | secret | { Ok key_schedule_pre_handshake . into_handshake secret } ? ; let handshake_hash = transcript . get_current_hash ; let key_schedule , client_key , server_key = key_schedule . derive_handshake_secrets handshake_hash , & * config . key_log , & randoms . client , ; cx . common . record_layer . set_message_encrypter suite . derive_encrypter & server_key ; cx . common . record_layer . set_message_decrypter suite . derive_decrypter & client_key ; #[cfg(feature = 'quic')] { cx . common . quic . hs_secrets = Some quic :: Secrets :: new client_key , server_key , suite , false ; } Ok key_schedule } fn emit_fake_ccs common : & mut CommonState { if common . is_quic { return ; } let m = Message { version : ProtocolVersion :: TLSv1_2 , payload : MessagePayload :: ChangeCipherSpec ChangeCipherSpecPayload { } , } ; common . send_msg m , false ; } fn emit_hello_retry_request transcript : & mut HandshakeHash , suite : & 'static Tls13CipherSuite,
        common: &mut CommonState,
        group: NamedGroup,
    ) {
        let mut req = HelloRetryRequest {
            legacy_version: ProtocolVersion::TLSv1_2,
            session_id: SessionID::empty(),
            cipher_suite: suite.common.suite,
            extensions: Vec::new(),
        };

        req.extensions
            .push(HelloRetryExtension::KeyShare(group));
        req.extensions
            .push(HelloRetryExtension::SupportedVersions(
                ProtocolVersion::TLSv1_3,
            ));

        let m = Message {
            version: ProtocolVersion::TLSv1_2,
            payload: MessagePayload::Handshake(HandshakeMessagePayload {
                typ: HandshakeType::HelloRetryRequest,
                payload: HandshakePayload::HelloRetryRequest(req),
            }),
        };

        trace!('Requesting retry {:?}', m);
        transcript.rollup_for_hrr();
        transcript.add_message(&m);
        common.send_msg(m, false);
    }

    fn emit_encrypted_extensions(
        transcript: &mut HandshakeHash,
        suite: &' static Tls13CipherSuite , cx : & mut ServerContext < '_>,
        ocsp_response: &mut Option<&[u8]>,
        sct_list: &mut Option<&[u8]>,
        hello: &ClientHelloPayload,
        resumedata: Option<&persist::ServerSessionValue>,
        extra_exts: Vec<ServerExtension>,
        config: &ServerConfig,
    ) -> Result<(), Error> {
        let mut ep = hs::ExtensionProcessing::new();
        ep.process_common(
            config,
            cx,
            suite.into(),
            ocsp_response,
            sct_list,
            hello,
            resumedata,
            extra_exts,
        )?;

        let ee = Message {
            version: ProtocolVersion::TLSv1_3,
            payload: MessagePayload::Handshake(HandshakeMessagePayload {
                typ: HandshakeType::EncryptedExtensions,
                payload: HandshakePayload::EncryptedExtensions(ep.exts),
            }),
        };

        trace!('sending encrypted extensions {:?}', ee);
        transcript.add_message(&ee);
        cx.common.send_msg(ee, true);
        Ok(())
    }

    fn emit_certificate_req_tls13(
        transcript: &mut HandshakeHash,
        cx: &mut ServerContext<' _ > , config : & ServerConfig , -> Result < bool , Error > { if ! config . verifier . offer_client_auth { return Ok false ; } let mut cr = CertificateRequestPayloadTLS13 { context : PayloadU8 :: empty , extensions : Vec :: new , } ; let schemes = config . verifier . supported_verify_schemes ; cr . extensions . push CertReqExtension :: SignatureAlgorithms schemes . to_vec ; let names = config . verifier . client_auth_root_subjects . ok_or_else || { debug ! 'could not determine root subjects based on SNI' ; cx . common . send_fatal_alert AlertDescription :: AccessDenied ; Error :: General 'client rejected by client_auth_root_subjects' . into } ? ; if ! names . is_empty { cr . extensions . push CertReqExtension :: AuthorityNames names ; } let m = Message { version : ProtocolVersion :: TLSv1_3 , payload : MessagePayload :: Handshake HandshakeMessagePayload { typ : HandshakeType :: CertificateRequest , payload : HandshakePayload :: CertificateRequestTLS13 cr , } , } ; trace ! 'Sending CertificateRequest {:?}' , m ; transcript . add_message & m ; cx . common . send_msg m , true ; Ok true } fn emit_certificate_tls13 transcript : & mut HandshakeHash , common : & mut CommonState , cert_chain : & [ Certificate ] , ocsp_response : Option < & [ u8 ] > , sct_list : Option < & [ u8 ] > , { let mut cert_entries = vec ! [ ] ; for cert in cert_chain { let entry = CertificateEntry { cert : cert . to_owned , exts : Vec :: new , } ; cert_entries . push entry ; } if let Some end_entity_cert = cert_entries . first_mut { if let Some ocsp = ocsp_response { let cst = CertificateStatus :: new ocsp . to_owned ; end_entity_cert . exts . push CertificateExtension :: CertificateStatus cst ; } if let Some sct_list = sct_list { end_entity_cert . exts . push CertificateExtension :: make_sct sct_list . to_owned ; } } let cert_body = CertificatePayloadTLS13 :: new cert_entries ; let c = Message { version : ProtocolVersion :: TLSv1_3 , payload : MessagePayload :: Handshake HandshakeMessagePayload { typ : HandshakeType :: Certificate , payload : HandshakePayload :: CertificateTLS13 cert_body , } , } ; trace ! 'sending certificate {:?}' , c ; transcript . add_message & c ; common . send_msg c , true ; } fn emit_certificate_verify_tls13 transcript : & mut HandshakeHash , common : & mut CommonState , signing_key : & dyn sign :: SigningKey , schemes : & [ SignatureScheme ] , -> Result < , Error > { let message = verify :: construct_tls13_server_verify_message & transcript . get_current_hash ; let signer = signing_key . choose_scheme schemes . ok_or_else || hs :: incompatible common , 'no overlapping sigschemes' ? ; let scheme = signer . scheme ; let sig = signer . sign & message ? ; let cv = DigitallySignedStruct :: new scheme , sig ; let m = Message { version : ProtocolVersion :: TLSv1_3 , payload : MessagePayload :: Handshake HandshakeMessagePayload { typ : HandshakeType :: CertificateVerify , payload : HandshakePayload :: CertificateVerify cv , } , } ; trace ! 'sending certificate-verify {:?}' , m ; transcript . add_message & m ; common . send_msg m , true ; Ok } fn emit_finished_tls13 transcript : & mut HandshakeHash , suite : & 'static Tls13CipherSuite,
        randoms: &ConnectionRandoms,
        cx: &mut ServerContext<' _ > , key_schedule : KeyScheduleHandshake , config : & ServerConfig , -> KeyScheduleTrafficWithClientFinishedPending { let handshake_hash = transcript . get_current_hash ; let verify_data = key_schedule . sign_server_finish & handshake_hash ; let verify_data_payload = Payload :: new verify_data . as_ref ; let m = Message { version : ProtocolVersion :: TLSv1_3 , payload : MessagePayload :: Handshake HandshakeMessagePayload { typ : HandshakeType :: Finished , payload : HandshakePayload :: Finished verify_data_payload , } , } ; trace ! 'sending finished {:?}' , m ; transcript . add_message & m ; let hash_at_server_fin = transcript . get_current_hash ; cx . common . send_msg m , true ; let key_schedule_traffic , _client_key , server_key = key_schedule . into_traffic_with_client_finished_pending hash_at_server_fin , & * config . key_log , & randoms . client , ; cx . common . record_layer . set_message_encrypter suite . derive_encrypter & server_key ; #[cfg(feature = 'quic')] { cx . common . quic . traffic_secrets = Some quic :: Secrets :: new _client_key , server_key , suite , false ; } key_schedule_traffic } } struct ExpectCertificate { config : Arc < ServerConfig > , transcript : HandshakeHash , suite : & 'static Tls13CipherSuite,
    key_schedule: KeyScheduleTrafficWithClientFinishedPending,
    send_ticket: bool,
}

impl State<ServerConnectionData> for ExpectCertificate {
    fn handle(mut self: Box<Self>, cx: &mut ServerContext<' _ > , m : Message",117,789
21,1,116,1,23,"get_server_session_value@840-862@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/tls13.rs","get_server_session_value","get_server_session_value transcript : & mut HandshakeHash , suite : & 'static Tls13CipherSuite,
    key_schedule: &KeyScheduleTraffic,
    cx: &ServerContext<' _ > , nonce : & [ u8 ] ,",840,862
14,1,70,1,14,"with_client_cert_verifier@17-30@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/builder.rs","with_client_cert_verifier","with_client_cert_verifier self , client_cert_verifier : Arc < dyn verify :: ClientCertVerifier > ,",17,30
3,1,26,1,3,"with_no_client_auth@33-35@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/builder.rs","with_no_client_auth","with_no_client_auth self",33,35
8,2,60,2,8,"with_single_cert@63-70@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/builder.rs","with_single_cert","with_single_cert self , cert_chain : Vec < key :: Certificate > , key_der : key :: PrivateKey ,",63,70
11,2,78,2,11,"with_single_cert_with_ocsp_and_sct@83-93@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/builder.rs","with_single_cert_with_ocsp_and_sct","with_single_cert_with_ocsp_and_sct self , cert_chain : Vec < key :: Certificate > , key_der : key :: PrivateKey , ocsp : Vec < u8 > , scts : Vec < u8 > ,",83,93
17,1,110,1,17,"with_cert_resolver@96-112@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/builder.rs","with_cert_resolver","with_cert_resolver self , cert_resolver : Arc < dyn ResolvesServerCert >",96,112
7,1,39,1,7,"from_certified_key@12-18@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/common.rs","from_certified_key","from_certified_key key : & sign :: CertifiedKey",12,18
3,1,21,1,3,"get_cert@22-24@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/common.rs","get_cert","get_cert & self",22,24
3,1,21,1,3,"get_key@28-30@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/common.rs","get_key","get_key & self",28,30
3,1,19,1,3,"get_ocsp@33-35@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/common.rs","get_ocsp","get_ocsp & self",33,35
3,1,19,1,3,"get_sct_list@38-40@crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/server/common.rs","get_sct_list","get_sct_list & self",38,40
8,2,82,1,8,"encode@22-29@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","encode","encode & self , bytes : & mut Vec < u8 >",22,29
17,2,153,3,18,"new@31-48@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","new","new typ : ContentType , vers : ProtocolVersion , payload : Payload",31,48
8,2,58,1,8,"content_type@50-57@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","content_type","content_type & self",50,57
29,11,208,1,41,"read@75-115@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","read","read r : & mut Reader",75,115
8,1,77,1,8,"encode@117-124@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","encode","encode self",117,124
7,1,30,1,7,"into_plain_message@130-136@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","into_plain_message","into_plain_message self",130,136
16,2,83,1,17,"from@151-167@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","from","from msg : Message",151,167
7,1,30,1,7,"into_unencrypted_opaque@182-188@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","into_unencrypted_opaque","into_unencrypted_opaque self",182,188
72,1,34,1,72,"borrow@190-261@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message.rs","borrow","borrow & self",190,261
3,1,17,1,3,"read@36-38@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist.rs","read","read _r : & mut Reader",36,38
6,1,28,1,6,"session_for_server_name@42-47@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist.rs","session_for_server_name","session_for_server_name server_name : & ServerName",42,47
6,1,28,1,6,"hint_for_server_name@49-54@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist.rs","hint_for_server_name","hint_for_server_name server_name : & ServerName",49,54
5,1,38,0,5,"clientsessionkey_is_debug@12-16@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","clientsessionkey_is_debug","clientsessionkey_is_debug",12,16
5,1,44,0,5,"clientsessionkey_cannot_be_read@19-23@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","clientsessionkey_cannot_be_read","clientsessionkey_cannot_be_read",19,23
15,1,93,0,15,"clientsessionvalue_is_debug@26-40@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","clientsessionvalue_is_debug","clientsessionvalue_is_debug",26,40
12,1,57,0,12,"serversessionvalue_is_debug@43-54@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","serversessionvalue_is_debug","serversessionvalue_is_debug",43,54
8,1,80,0,8,"serversessionvalue_no_sni@57-64@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","serversessionvalue_no_sni","serversessionvalue_no_sni",57,64
8,1,80,0,8,"serversessionvalue_with_cert@67-74@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/persist_test.rs","serversessionvalue_with_cert","serversessionvalue_with_cert",67,74
5,1,42,1,5,"get8@6-10@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","get8","get8 enum_value : & T",6,10
5,1,58,1,5,"get16@12-16@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","get16","get16 enum_value : & T",12,16
11,2,105,2,13,"test_enum16@18-30@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","test_enum16","test_enum16 first : T , last : T",18,30
11,2,105,2,13,"test_enum8@32-44@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","test_enum8","test_enum8 first : T , last : T",32,44
48,1,344,0,48,"test_enums@47-94@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","test_enums","test_enums",47,94
5,1,33,0,5,"test_string_macro@97-101@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/enums_test.rs","test_string_macro","test_string_macro",97,101
9,2,49,0,10,"corpus_dir@12-21@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","corpus_dir","corpus_dir",12,21
22,3,190,0,35,"test_read_fuzz_corpus@11-45@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","test_read_fuzz_corpus","test_read_fuzz_corpus",11,45
25,1,92,0,26,"can_read_safari_client_hello@48-73@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","can_read_safari_client_hello","can_read_safari_client_hello",48,73
4,1,36,0,4,"alert_is_not_handshake@76-79@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","alert_is_not_handshake","alert_is_not_handshake",76,79
4,1,37,0,4,"alert_is_not_opaque@82-85@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","alert_is_not_opaque","alert_is_not_opaque",82,85
15,2,114,0,15,"construct_all_types@88-102@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/message_test.rs","construct_all_types","construct_all_types",88,102
5,1,42,0,5,"rejects_short_random@9-13@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","rejects_short_random","rejects_short_random",9,13
7,1,62,0,8,"reads_random@16-23@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","reads_random","reads_random",16,23
5,1,42,0,5,"rejects_truncated_sessionid@26-30@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","rejects_truncated_sessionid","rejects_truncated_sessionid",26,30
5,1,42,0,5,"rejects_sessionid_with_bad_length@33-37@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","rejects_sessionid_with_bad_length","rejects_sessionid_with_bad_length",33,37
5,1,68,0,5,"sessionid_with_different_lengths_are_unequal@40-44@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","sessionid_with_different_lengths_are_unequal","sessionid_with_different_lengths_are_unequal",40,44
9,1,85,0,10,"accepts_short_sessionid@47-56@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","accepts_short_sessionid","accepts_short_sessionid",47,56
9,1,84,0,10,"accepts_empty_sessionid@59-68@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","accepts_empty_sessionid","accepts_empty_sessionid",59,68
8,1,94,0,9,"can_roundtrip_unknown_client_ext@71-79@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_unknown_client_ext","can_roundtrip_unknown_client_ext",71,79
5,1,56,0,5,"refuses_client_ext_with_unparsed_bytes@82-86@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","refuses_client_ext_with_unparsed_bytes","refuses_client_ext_with_unparsed_bytes",82,86
5,1,56,0,5,"refuses_server_ext_with_unparsed_bytes@89-93@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","refuses_server_ext_with_unparsed_bytes","refuses_server_ext_with_unparsed_bytes",89,93
5,1,54,0,5,"refuses_certificate_ext_with_unparsed_bytes@96-100@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","refuses_certificate_ext_with_unparsed_bytes","refuses_certificate_ext_with_unparsed_bytes",96,100
5,1,58,0,5,"refuses_certificate_req_ext_with_unparsed_bytes@103-107@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","refuses_certificate_req_ext_with_unparsed_bytes","refuses_certificate_req_ext_with_unparsed_bytes",103,107
5,1,54,0,5,"refuses_helloreq_ext_with_unparsed_bytes@110-114@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","refuses_helloreq_ext_with_unparsed_bytes","refuses_helloreq_ext_with_unparsed_bytes",110,114
5,1,58,0,5,"refuses_newsessionticket_ext_with_unparsed_bytes@117-121@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","refuses_newsessionticket_ext_with_unparsed_bytes","refuses_newsessionticket_ext_with_unparsed_bytes",117,121
8,1,99,0,9,"can_roundtrip_single_sni@124-132@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_single_sni","can_roundtrip_single_sni",124,132
8,1,99,0,9,"can_round_trip_mixed_case_sni@135-143@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_round_trip_mixed_case_sni","can_round_trip_mixed_case_sni",135,143
8,1,99,0,9,"can_roundtrip_other_sni_name_types@146-154@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_other_sni_name_types","can_roundtrip_other_sni_name_types",146,154
13,2,128,0,14,"get_single_hostname_returns_none_for_other_sni_name_types@157-170@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_single_hostname_returns_none_for_other_sni_name_types","get_single_hostname_returns_none_for_other_sni_name_types",157,170
22,2,209,0,26,"can_roundtrip_multiname_sni@173-198@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_multiname_sni","can_roundtrip_multiname_sni",173,198
16,1,310,0,22,"rejects_truncated_sni@201-222@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","rejects_truncated_sni","rejects_truncated_sni",201,222
13,1,186,0,14,"can_roundtrip_psk_identity@225-238@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_psk_identity","can_roundtrip_psk_identity",225,238
13,1,175,0,14,"can_roundtrip_psk_offer@241-254@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_psk_offer","can_roundtrip_psk_offer",241,254
12,1,110,0,14,"can_roundtrip_certstatusreq_for_ocsp@257-270@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_certstatusreq_for_ocsp","can_roundtrip_certstatusreq_for_ocsp",257,270
10,1,76,0,11,"can_roundtrip_certstatusreq_for_other@273-283@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_certstatusreq_for_other","can_roundtrip_certstatusreq_for_other",273,283
16,2,165,0,17,"can_roundtrip_multi_proto@286-302@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_multi_proto","can_roundtrip_multi_proto",286,302
16,2,165,0,17,"can_roundtrip_single_proto@305-321@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_single_proto","can_roundtrip_single_proto",305,321
30,1,153,0,31,"decomposed_signature_scheme_has_correct_mappings@324-354@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","decomposed_signature_scheme_has_correct_mappings","decomposed_signature_scheme_has_correct_mappings",324,354
40,1,388,0,40,"get_sample_clienthellopayload@356-395@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_clienthellopayload","get_sample_clienthellopayload",356,395
3,1,16,0,3,"can_print_all_clientextensions@398-400@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_print_all_clientextensions","can_print_all_clientextensions",398,400
3,1,15,0,3,"can_clone_all_clientextensions@403-405@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_clone_all_clientextensions","can_clone_all_clientextensions",403,405
8,1,66,0,10,"client_has_duplicate_extensions_works@408-417@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_has_duplicate_extensions_works","client_has_duplicate_extensions_works",408,417
16,3,140,0,17,"test_truncated_psk_offer@420-436@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","test_truncated_psk_offer","test_truncated_psk_offer",420,436
12,3,90,0,13,"test_truncated_client_hello_is_detected@439-451@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","test_truncated_client_hello_is_detected","test_truncated_client_hello_is_detected",439,451
21,5,163,0,30,"test_truncated_client_extension_is_detected@454-483@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","test_truncated_client_extension_is_detected","test_truncated_client_extension_is_detected",454,483
13,1,125,2,16,"test_client_extension_getter@485-500@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","test_client_extension_getter","test_client_extension_getter typ : ExtensionType , getter : fn & ClientHelloPayload -> bool",485,500
5,1,28,0,5,"client_get_sni_extension@503-507@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_get_sni_extension","client_get_sni_extension",503,507
5,1,28,0,5,"client_get_sigalgs_extension@510-514@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_get_sigalgs_extension","client_get_sigalgs_extension",510,514
6,1,28,0,6,"client_get_namedgroups_extension@517-522@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_get_namedgroups_extension","client_get_namedgroups_extension",517,522
5,1,28,0,5,"client_get_ecpoints_extension@525-529@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_get_ecpoints_extension","client_get_ecpoints_extension",525,529
5,1,28,0,5,"client_get_alpn_extension@532-536@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_get_alpn_extension","client_get_alpn_extension",532,536
6,1,28,0,6,"client_get_quic_params_extension@539-544@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_get_quic_params_extension","client_get_quic_params_extension",539,544
5,1,28,0,5,"client_get_versions_extension@547-551@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_get_versions_extension","client_get_versions_extension",547,551
5,1,28,0,5,"client_get_keyshare_extension@554-558@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_get_keyshare_extension","client_get_keyshare_extension",554,558
3,1,26,0,3,"client_get_psk@561-563@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_get_psk","client_get_psk",561,563
5,1,28,0,5,"client_get_psk_modes@566-570@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","client_get_psk_modes","client_get_psk_modes",566,570
18,5,153,0,27,"test_truncated_helloretry_extension_is_detected@573-599@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","test_truncated_helloretry_extension_is_detected","test_truncated_helloretry_extension_is_detected",573,599
13,1,127,2,16,"test_helloretry_extension_getter@601-616@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","test_helloretry_extension_getter","test_helloretry_extension_getter typ : ExtensionType , getter : fn & HelloRetryRequest -> bool",601,616
6,1,28,0,6,"helloretry_get_requested_key_share_group@619-624@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","helloretry_get_requested_key_share_group","helloretry_get_requested_key_share_group",619,624
3,1,26,0,3,"helloretry_get_cookie@627-629@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","helloretry_get_cookie","helloretry_get_cookie",627,629
5,1,28,0,5,"helloretry_get_supported_versions@632-636@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","helloretry_get_supported_versions","helloretry_get_supported_versions",632,636
21,5,163,0,30,"test_truncated_server_extension_is_detected@639-668@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","test_truncated_server_extension_is_detected","test_truncated_server_extension_is_detected",639,668
13,1,125,2,16,"test_server_extension_getter@670-685@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","test_server_extension_getter","test_server_extension_getter typ : ExtensionType , getter : fn & ServerHelloPayload -> bool",670,685
3,1,26,0,3,"server_get_key_share@688-690@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","server_get_key_share","server_get_key_share",688,690
5,1,28,0,5,"server_get_psk_index@693-697@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","server_get_psk_index","server_get_psk_index",693,697
5,1,28,0,5,"server_get_ecpoints_extension@700-704@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","server_get_ecpoints_extension","server_get_ecpoints_extension",700,704
3,1,26,0,3,"server_get_sct_list@707-709@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","server_get_sct_list","server_get_sct_list",707,709
5,1,28,0,5,"server_get_supported_versions@712-716@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","server_get_supported_versions","server_get_supported_versions",712,716
15,1,134,2,18,"test_cert_extension_getter@718-735@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","test_cert_extension_getter","test_cert_extension_getter typ : ExtensionType , getter : fn & CertificateEntry -> bool",718,735
5,1,28,0,5,"certentry_get_ocsp_response@738-742@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","certentry_get_ocsp_response","certentry_get_ocsp_response",738,742
3,1,26,0,3,"certentry_get_scts@745-747@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","certentry_get_scts","certentry_get_scts",745,747
27,1,221,0,27,"get_sample_serverhellopayload@749-775@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_serverhellopayload","get_sample_serverhellopayload",749,775
3,1,16,0,3,"can_print_all_serverextensions@778-780@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_print_all_serverextensions","can_print_all_serverextensions",778,780
3,1,15,0,3,"can_clone_all_serverextensions@783-785@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_clone_all_serverextensions","can_clone_all_serverextensions",783,785
16,1,103,0,16,"get_sample_helloretryrequest@787-802@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_helloretryrequest","get_sample_helloretryrequest",787,802
18,1,133,0,18,"get_sample_certificatepayloadtls13@804-821@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_certificatepayloadtls13","get_sample_certificatepayloadtls13",804,821
15,1,82,0,15,"get_sample_serverkeyexchangepayload_ecdhe@823-837@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_serverkeyexchangepayload_ecdhe","get_sample_serverkeyexchangepayload_ecdhe",823,837
3,1,25,0,3,"get_sample_serverkeyexchangepayload_unknown@839-841@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_serverkeyexchangepayload_unknown","get_sample_serverkeyexchangepayload_unknown",839,841
7,1,50,0,7,"get_sample_certificaterequestpayload@843-849@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_certificaterequestpayload","get_sample_certificaterequestpayload",843,849
13,1,101,0,13,"get_sample_certificaterequestpayloadtls13@851-863@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_certificaterequestpayloadtls13","get_sample_certificaterequestpayloadtls13",851,863
6,1,30,0,6,"get_sample_newsessionticketpayload@865-870@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_newsessionticketpayload","get_sample_newsessionticketpayload",865,870
12,1,88,0,12,"get_sample_newsessionticketpayloadtls13@872-883@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_newsessionticketpayloadtls13","get_sample_newsessionticketpayloadtls13",872,883
3,1,13,0,3,"get_sample_encryptedextensions@885-887@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_encryptedextensions","get_sample_encryptedextensions",885,887
5,1,26,0,5,"get_sample_certificatestatus@889-893@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_sample_certificatestatus","get_sample_certificatestatus",889,893
76,1,407,0,76,"get_all_tls12_handshake_payloads@895-970@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_all_tls12_handshake_payloads","get_all_tls12_handshake_payloads",895,970
12,2,109,0,13,"can_roundtrip_all_tls12_handshake_payloads@973-985@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_all_tls12_handshake_payloads","can_roundtrip_all_tls12_handshake_payloads",973,985
28,5,223,0,34,"can_detect_truncation_of_all_tls12_handshake_payloads@988-1021@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_detect_truncation_of_all_tls12_handshake_payloads","can_detect_truncation_of_all_tls12_handshake_payloads",988,1021
87,1,433,0,87,"get_all_tls13_handshake_payloads@1023-1109@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","get_all_tls13_handshake_payloads","get_all_tls13_handshake_payloads",1023,1109
13,2,113,0,15,"can_roundtrip_all_tls13_handshake_payloads@1112-1126@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_all_tls13_handshake_payloads","can_roundtrip_all_tls13_handshake_payloads",1112,1126
5,1,54,1,5,"put_u24@1128-1132@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","put_u24","put_u24 u : u32 , b : & mut [ u8 ]",1128,1132
27,5,207,0,33,"can_detect_truncation_of_all_tls13_handshake_payloads@1135-1167@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","can_detect_truncation_of_all_tls13_handshake_payloads","can_detect_truncation_of_all_tls13_handshake_payloads",1135,1167
9,1,74,0,9,"cannot_read_messagehash_from_network@1170-1178@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","cannot_read_messagehash_from_network","cannot_read_messagehash_from_network",1170,1178
21,1,158,0,24,"cannot_decode_huge_certificate@1181-1204@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake_test.rs","cannot_decode_huge_certificate","cannot_decode_huge_certificate",1181,1204
3,1,26,1,3,"encode@25-27@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",25,27
3,1,27,1,3,"read@29-31@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",29,31
3,1,26,1,3,"encode@41-43@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",41,43
3,1,27,1,3,"read@45-47@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",45,47
3,1,27,1,3,"encode@66-68@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",66,68
6,2,51,1,7,"read@70-76@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",70,76
5,2,42,0,5,"new@80-84@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new",80,84
4,1,33,1,4,"write_slice@86-89@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","write_slice","write_slice & self , bytes : & mut [ u8 ]",86,89
3,1,19,0,3,"from@94-96@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","from","from bytes : [ u8 ; 32 ]",94,96
5,2,45,2,5,"fmt@106-110@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","fmt","fmt & self , f : & mut fmt :: Formatter",106,110
10,3,63,2,12,"eq@114-125@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","eq","eq & self , other : & Self",114,125
5,1,55,1,5,"encode@129-133@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",129,133
10,4,88,1,12,"read@135-146@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",135,146
5,2,46,0,5,"random@150-154@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","random","random",150,154
6,1,23,0,6,"empty@156-161@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","empty","empty",156,161
3,1,13,1,3,"len@163-165@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","len","len & self",163,165
3,1,15,1,3,"is_empty@167-169@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","is_empty","is_empty & self",167,169
3,1,26,1,3,"encode@179-181@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",179,181
4,1,33,2,4,"read@183-186@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read typ : ExtensionType , r : & mut Reader",183,186
3,1,15,0,3,"supported@196-198@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","supported","supported",196,198
5,2,15,0,8,"supported@192-199@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","supported","supported",192,199
15,2,72,1,15,"sign@211-225@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","sign","sign & self",211,225
14,2,138,2,15,"make@227-241@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","make","make alg : SignatureAlgorithm , hash : HashAlgorithm",227,241
7,2,32,1,37,"sign@206-242@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","sign","sign & self",206,242
7,1,59,1,7,"new_hostname@252-258@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new_hostname","new_hostname hostname : webpki :: DnsName",252,258
13,3,91,1,14,"read_hostname@260-273@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read_hostname","read_hostname r : & mut Reader",260,273
6,2,56,1,6,"encode@275-280@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",275,280
4,1,35,1,4,"encode@290-293@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",290,293
8,4,70,1,10,"read@295-304@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",295,304
9,3,48,1,11,"has_duplicate_names_for_type@316-326@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","has_duplicate_names_for_type","has_duplicate_names_for_type & self",316,326
7,2,48,1,7,"only_dns_hostnames@329-335@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","only_dns_hostnames","only_dns_hostnames name : & ServerName",329,335
6,1,30,1,13,"get_single_hostname@328-340@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_single_hostname","get_single_hostname & self",328,340
7,2,32,1,32,"has_duplicate_names_for_type@310-341@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","has_duplicate_names_for_type","has_duplicate_names_for_type & self",310,341
7,2,50,0,9,"from_slices@352-360@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","from_slices","from_slices names : & [ & [ u8 ] ]",352,360
5,1,53,1,5,"to_slices@362-366@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","to_slices","to_slices & self",362,366
7,2,40,1,7,"as_single_slice@368-374@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","as_single_slice","as_single_slice & self",368,374
9,2,56,0,30,"from_slices@346-375@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","from_slices","from_slices names : & [ & [ u8 ] ]",346,375
6,1,36,1,6,"new@385-390@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new group : NamedGroup , payload : & [ u8 ]",385,390
4,1,35,1,4,"encode@394-397@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",394,397
5,3,47,1,6,"read@399-404@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",399,404
6,1,34,1,6,"new@415-420@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new id : Vec < u8 > , age : u32",415,420
4,1,35,1,4,"encode@424-427@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",424,427
6,3,42,1,6,"read@429-434@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",429,434
6,1,42,1,6,"new@449-454@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new id : PresharedKeyIdentity , binder : Vec < u8 >",449,454
4,1,35,1,4,"encode@458-461@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",458,461
6,3,42,1,6,"read@463-468@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",463,468
5,1,44,1,5,"encode@481-485@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",481,485
6,3,42,1,6,"read@487-492@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",487,492
9,2,65,1,9,"encode@502-510@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",502,510
13,4,84,1,14,"read@512-525@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",512,525
7,1,37,0,7,"build_ocsp@529-535@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","build_ocsp","build_ocsp",529,535
22,2,205,1,22,"get_type@572-593@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_type","get_type & self",572,593
28,2,345,1,30,"encode@597-626@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",597,626
55,21,452,1,57,"read@628-684@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",628,684
11,2,78,1,14,"trim_hostname_trailing_dot_for_sni@687-700@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","trim_hostname_trailing_dot_for_sni","trim_hostname_trailing_dot_for_sni dns_name : webpki :: DnsNameRef",687,700
7,1,48,1,8,"make_sni@704-711@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","make_sni","make_sni dns_name : webpki :: DnsNameRef",704,711
19,2,166,1,19,"get_type@740-758@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_type","get_type & self",740,758
24,2,253,1,26,"encode@762-787@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",762,787
38,13,315,1,40,"read@789-828@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",789,828
3,1,28,0,3,"make_alpn@832-834@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","make_alpn","make_alpn proto : & [ & [ u8 ] ]",832,834
4,1,28,0,4,"make_empty_renegotiation_info@836-839@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","make_empty_renegotiation_info","make_empty_renegotiation_info",836,839
4,1,36,0,4,"make_sct@841-844@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","make_sct","make_sct sctl : Vec < u8 >",841,844
10,2,91,1,11,"encode@858-868@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",858,868
18,10,138,1,20,"read@870-889@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",870,889
11,3,65,1,14,"has_duplicate_extension@895-908@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","has_duplicate_extension","has_duplicate_extension & self",895,908
5,1,39,2,5,"find_extension@910-914@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","find_extension","find_extension & self , ext : ExtensionType",910,914
7,3,49,1,7,"get_sni_extension@916-922@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_sni_extension","get_sni_extension & self",916,922
7,3,49,1,7,"get_sigalgs_extension@924-930@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_sigalgs_extension","get_sigalgs_extension & self",924,930
7,3,49,1,7,"get_namedgroups_extension@932-938@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_namedgroups_extension","get_namedgroups_extension & self",932,938
7,3,49,1,7,"get_ecpoints_extension@940-946@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_ecpoints_extension","get_ecpoints_extension & self",940,946
7,3,49,1,7,"get_alpn_extension@948-954@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_alpn_extension","get_alpn_extension & self",948,954
10,4,76,1,10,"get_quic_params_extension@956-965@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_quic_params_extension","get_quic_params_extension & self",956,965
3,1,22,1,3,"get_ticket_extension@967-969@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_ticket_extension","get_ticket_extension & self",967,969
7,3,49,1,7,"get_versions_extension@971-977@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_versions_extension","get_versions_extension & self",971,977
7,3,49,1,7,"get_keyshare_extension@979-985@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_keyshare_extension","get_keyshare_extension & self",979,985
12,4,67,1,15,"has_keyshare_extension_with_duplicates@987-1001@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","has_keyshare_extension_with_duplicates","has_keyshare_extension_with_duplicates & self",987,1001
7,3,49,1,7,"get_psk@1003-1009@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_psk","get_psk & self",1003,1009
5,1,35,1,5,"check_psk_ext_is_last@1011-1015@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","check_psk_ext_is_last","check_psk_ext_is_last & self",1011,1015
7,3,49,1,7,"get_psk_modes@1017-1023@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_psk_modes","get_psk_modes & self",1017,1023
5,1,38,2,5,"psk_mode_offered@1025-1029@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","psk_mode_offered","psk_mode_offered & self , mode : PSKKeyExchangeMode",1025,1029
6,2,66,1,6,"set_psk_binder@1031-1036@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","set_psk_binder","set_psk_binder & mut self , binder : impl Into < Vec < u8 > >",1031,1036
4,1,22,1,4,"ems_support_offered@1038-1041@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","ems_support_offered","ems_support_offered & self",1038,1041
4,1,22,1,4,"early_data_extension_offered@1043-1046@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","early_data_extension_offered","early_data_extension_offered & self",1043,1046
8,2,60,1,8,"get_type@1058-1065@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_type","get_type & self",1058,1065
12,2,140,1,14,"encode@1069-1082@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1069,1082
18,9,152,1,20,"read@1084-1103@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1084,1103
8,1,72,1,8,"encode@1115-1122@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1115,1122
14,6,93,1,16,"read@1124-1139@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1124,1139
11,3,65,1,14,"has_duplicate_extension@1145-1158@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","has_duplicate_extension","has_duplicate_extension & self",1145,1158
7,3,55,1,7,"has_unknown_extension@1160-1166@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","has_unknown_extension","has_unknown_extension & self",1160,1166
5,1,39,2,5,"find_extension@1168-1172@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","find_extension","find_extension & self , ext : ExtensionType",1168,1172
7,3,47,1,7,"get_requested_key_share_group@1174-1180@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_requested_key_share_group","get_requested_key_share_group & self",1174,1180
7,3,49,1,7,"get_cookie@1182-1188@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_cookie","get_cookie & self",1182,1188
7,3,47,1,7,"get_supported_versions@1190-1196@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_supported_versions","get_supported_versions & self",1190,1196
8,1,74,1,9,"encode@1210-1218@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1210,1218
19,6,112,1,21,"read@1221-1241@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1221,1241
3,1,17,1,3,"get_extensions@1245-1247@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_extensions","get_extensions & self",1245,1247
7,3,49,1,7,"get_key_share@1251-1257@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_key_share","get_key_share & self",1251,1257
7,3,49,1,7,"get_psk_index@1259-1265@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_psk_index","get_psk_index & self",1259,1265
7,3,49,1,7,"get_ecpoints_extension@1267-1273@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_ecpoints_extension","get_ecpoints_extension & self",1267,1273
4,1,22,1,4,"ems_support_acked@1275-1278@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","ems_support_acked","ems_support_acked & self",1275,1278
7,3,49,1,7,"get_sct_list@1280-1286@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_sct_list","get_sct_list & self",1280,1286
7,3,47,1,7,"get_supported_versions@1288-1294@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_supported_versions","get_supported_versions & self",1288,1294
3,1,26,1,3,"encode@1300-1302@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1300,1302
3,1,24,1,4,"read@1304-1307@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1304,1307
7,2,49,1,7,"get_type@1322-1328@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_type","get_type & self",1322,1328
4,1,36,0,4,"make_sct@1330-1333@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","make_sct","make_sct sct_list : Vec < u8 >",1330,1333
6,2,44,1,6,"get_cert_status@1335-1340@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_cert_status","get_cert_status & self",1335,1340
6,2,36,1,6,"get_sct_list@1342-1347@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_sct_list","get_sct_list & self",1342,1347
11,2,123,1,13,"encode@1351-1363@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1351,1363
21,8,144,1,23,"read@1365-1387@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1365,1387
4,1,35,1,4,"encode@1399-1402@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1399,1402
6,3,44,1,6,"read@1404-1409@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1404,1409
6,1,26,1,6,"new@1413-1418@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new cert : key :: Certificate",1413,1418
11,3,65,1,14,"has_duplicate_extension@1420-1433@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","has_duplicate_extension","has_duplicate_extension & self",1420,1433
5,2,45,1,5,"has_unknown_extension@1435-1439@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","has_unknown_extension","has_unknown_extension & self",1435,1439
6,1,47,1,6,"get_ocsp_response@1441-1446@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_ocsp_response","get_ocsp_response & self",1441,1446
6,1,44,1,6,"get_scts@1448-1453@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_scts","get_scts & self",1448,1453
4,1,38,1,4,"encode@1463-1466@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1463,1466
6,3,48,1,6,"read@1468-1473@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1468,1473
6,1,27,0,6,"new@1477-1482@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new entries : Vec < CertificateEntry >",1477,1482
8,3,31,1,9,"any_entry_has_duplicate_extension@1484-1492@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","any_entry_has_duplicate_extension","any_entry_has_duplicate_extension & self",1484,1492
8,3,31,1,9,"any_entry_has_unknown_extension@1494-1502@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","any_entry_has_unknown_extension","any_entry_has_unknown_extension & self",1494,1502
8,3,34,1,9,"any_entry_has_extension@1504-1512@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","any_entry_has_extension","any_entry_has_extension & self",1504,1512
7,1,38,1,7,"get_end_entity_ocsp@1514-1520@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_end_entity_ocsp","get_end_entity_ocsp & self",1514,1520
6,1,31,1,6,"get_end_entity_scts@1522-1527@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_end_entity_scts","get_end_entity_scts & self",1522,1527
7,2,43,1,7,"convert@1529-1535@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","convert","convert & self",1529,1535
4,1,35,1,4,"encode@1558-1561@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1558,1561
11,4,63,1,14,"read@1563-1576@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1563,1576
6,1,32,1,6,"new@1586-1591@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new scheme : SignatureScheme , sig : Vec < u8 >",1586,1591
4,1,35,1,4,"encode@1595-1598@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1595,1598
5,3,47,1,6,"read@1600-1605@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1600,1605
3,1,26,1,3,"encode@1614-1616@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1614,1616
4,2,36,1,4,"read@1618-1621@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1618,1621
9,1,48,1,9,"new@1631-1639@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new named_group : NamedGroup , pubkey : & [ u8 ]",1631,1639
4,1,35,1,4,"encode@1643-1646@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1643,1646
8,3,52,1,9,"read@1648-1656@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1648,1656
4,1,35,1,4,"encode@1666-1669@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1666,1669
5,3,47,1,6,"read@1671-1676@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1671,1676
6,2,52,1,6,"encode@1686-1691@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1686,1691
3,1,30,1,5,"read@1693-1697@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1693,1697
13,4,86,2,16,"unwrap_given_kxa@1701-1716@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","unwrap_given_kxa","unwrap_given_kxa & self , kxa : & KeyExchangeAlgorithm",1701,1716
12,3,78,1,18,"get_extensions@1723-1740@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_extensions","get_extensions & self",1723,1740
5,1,41,2,5,"find_extension@1742-1746@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","find_extension","find_extension & self , ext : ExtensionType",1742,1746
7,3,52,1,7,"get_alpn_protocol@1748-1754@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_alpn_protocol","get_alpn_protocol & self",1748,1754
10,4,76,1,10,"get_quic_params_extension@1756-1765@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_quic_params_extension","get_quic_params_extension & self",1756,1765
4,1,22,1,4,"early_data_extension_offered@1767-1770@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","early_data_extension_offered","early_data_extension_offered & self",1767,1770
3,1,14,1,3,"get_extensions@1774-1776@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_extensions","get_extensions & self",1774,1776
5,1,44,1,5,"encode@1792-1796@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1792,1796
15,5,79,1,16,"read@1798-1813@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1798,1813
7,2,49,1,7,"get_type@1824-1830@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_type","get_type & self",1824,1830
11,2,123,1,13,"encode@1834-1846@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1834,1846
24,9,155,1,26,"read@1848-1873@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1848,1873
4,1,35,1,4,"encode@1885-1888@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1885,1888
8,3,48,1,9,"read@1890-1898@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1890,1898
5,1,39,2,5,"find_extension@1902-1906@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","find_extension","find_extension & self , ext : ExtensionType",1902,1906
7,3,49,1,7,"get_sigalgs_extension@1908-1914@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_sigalgs_extension","get_sigalgs_extension & self",1908,1914
7,3,49,1,7,"get_authorities_extension@1916-1922@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_authorities_extension","get_authorities_extension & self",1916,1922
6,1,32,1,6,"new@1933-1938@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new lifetime_hint : u32 , ticket : Vec < u8 >",1933,1938
4,1,35,1,4,"encode@1942-1945@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1942,1945
8,3,50,1,9,"read@1947-1955@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1947,1955
6,2,38,1,6,"get_type@1966-1971@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_type","get_type & self",1966,1971
10,2,105,1,12,"encode@1975-1986@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",1975,1986
14,7,113,1,16,"read@1988-2003@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",1988,2003
9,1,61,2,9,"new@2018-2026@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new lifetime : u32 , age_add : u32 , nonce : Vec < u8 > , ticket : Vec < u8 >",2018,2026
5,1,39,2,5,"find_extension@2028-2032@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","find_extension","find_extension & self , ext : ExtensionType",2028,2032
7,3,49,1,7,"get_max_early_data_size@2034-2040@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_max_early_data_size","get_max_early_data_size & self",2034,2040
7,1,62,1,7,"encode@2044-2050@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",2044,2050
14,6,87,1,15,"read@2052-2066@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",2052,2066
4,1,35,1,4,"encode@2078-2081@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",2078,2081
9,4,56,1,10,"read@2083-2092@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",2083,2092
5,1,26,0,5,"new@2096-2100@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","new","new ocsp : Vec < u8 >",2096,2100
3,1,17,1,3,"into_inner@2102-2104@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","into_inner","into_inner self",2102,2104
26,2,310,1,26,"encode@2134-2159@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",2134,2159
11,2,96,1,14,"encode@2169-2182@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",2169,2182
3,1,26,1,3,"read@2184-2186@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",2184,2186
87,28,590,2,92,"read_version@2190-2281@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","read_version","read_version r : & mut Reader , vers : ProtocolVersion",2190,2281
6,1,28,0,6,"build_key_update_notify@2283-2288@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","build_key_update_notify","build_key_update_notify",2283,2288
19,3,118,1,21,"get_encoding_for_binder_signing@2290-2310@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","get_encoding_for_binder_signing","get_encoding_for_binder_signing & self",2290,2310
6,1,41,0,6,"build_handshake_hash@2312-2317@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/handshake.rs","build_handshake_hash","build_handshake_hash hash : & [ u8 ]",2312,2317
3,1,13,0,3,"default@28-30@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","default","default",28,30
6,1,27,0,6,"new@46-51@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","new","new",46,51
3,1,22,2,3,"want_message@54-56@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","want_message","want_message & self , msg : & PlainMessage",54,56
3,1,17,1,3,"is_empty@59-61@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","is_empty","is_empty & self",59,61
22,4,118,2,28,"take_message@70-97@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","take_message","take_message & mut self , msg : PlainMessage",70,97
11,5,107,1,12,"buf_contains_message@102-113@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","buf_contains_message","buf_contains_message & self",102,113
17,2,112,2,19,"deframe_one@119-137@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","deframe_one","deframe_one & mut self , version : ProtocolVersion",119,137
16,1,116,0,19,"want@150-168@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","want","want",150,168
9,1,112,2,11,"pop_eq@170-180@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","pop_eq","pop_eq expect : & PlainMessage , hj : & mut HandshakeJoiner",170,180
21,1,147,0,27,"split@183-209@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","split","split",183,209
10,1,74,0,14,"broken@212-225@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","broken","broken",212,225
38,1,308,0,50,"join@228-277@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","join","join",228,277
11,1,85,0,12,"test_rejects_giant_certs@280-291@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/hsjoiner.rs","test_rejects_giant_certs","test_rejects_giant_certs",280,291
5,2,42,0,5,"new@21-25@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/fragmenter.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/fragmenter.rs","new","new max_fragment_size : Option < usize >",21,25
13,3,95,2,15,"fragment@31-45@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/fragmenter.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/fragmenter.rs","fragment","fragment & self , msg : PlainMessage , out : & mut VecDeque < PlainMessage >",31,45
3,1,13,0,3,"default@40-42@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","default","default",40,42
8,1,42,0,8,"new@46-53@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","new","new",46,53
16,3,106,2,23,"read@58-80@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","read","read & mut self , rd : & mut dyn io :: Read",58,80
3,2,24,1,3,"has_pending@85-87@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","has_pending","has_pending & self",85,87
15,2,108,1,17,"try_deframe_one@92-108@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","try_deframe_one","try_deframe_one & mut self",92,108
9,3,58,2,22,"buf_consume@111-132@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/deframer.rs","buf_consume","buf_consume & mut self , taken : usize",111,132
3,1,27,1,3,"encode@9-11@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","encode","encode & self , bytes : & mut Vec < u8 >",9,11
3,1,25,1,3,"read@13-15@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","read","read r : & mut Reader",13,15
3,1,26,0,3,"new@19-21@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","new","new bytes : impl Into < Vec < u8 > >",19,21
3,1,18,0,3,"empty@23-25@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","empty","empty",23,25
3,1,25,1,3,"read@27-29@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","read","read r : & mut Reader",27,29
4,1,47,1,4,"encode@33-36@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","encode","encode & self , bytes : & mut Vec < u8 >",33,36
6,3,65,1,6,"read@38-43@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","read","read r : & mut Reader",38,43
3,1,18,0,3,"new@51-53@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","new","new bytes : Vec < u8 >",51,53
4,1,47,1,4,"encode@57-60@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","encode","encode & self , bytes : & mut Vec < u8 >",57,60
6,3,65,1,6,"read@62-67@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","read","read r : & mut Reader",62,67
3,1,18,0,3,"new@75-77@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","new","new bytes : Vec < u8 >",75,77
3,1,18,0,3,"empty@79-81@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","empty","empty",79,81
4,1,43,0,4,"encode_slice@83-86@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","encode_slice","encode_slice slice : & [ u8 ] , bytes : & mut Vec < u8 >",83,86
3,1,29,1,3,"encode@90-92@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","encode","encode & self , bytes : & mut Vec < u8 >",90,92
6,3,61,1,6,"read@94-99@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","read","read r : & mut Reader",94,99
3,1,18,0,3,"new@107-109@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","new","new bytes : Vec < u8 >",107,109
3,1,16,0,3,"empty@111-113@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","empty","empty",111,113
3,1,15,1,3,"into_inner@115-117@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","into_inner","into_inner self",115,117
4,1,44,1,4,"encode@121-124@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","encode","encode & self , bytes : & mut Vec < u8 >",121,124
6,3,61,1,6,"read@126-131@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/base.rs","read","read r : & mut Reader",126,131
12,2,107,0,15,"smoketest@37-51@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/mod.rs","smoketest","smoketest",37,51
4,1,35,1,4,"encode@11-14@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/alert.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/alert.rs","encode","encode & self , bytes : & mut Vec < u8 >",11,14
5,3,47,1,6,"read@16-21@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/alert.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/alert.rs","read","read r : & mut Reader",16,21
6,1,25,0,6,"init@11-16@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","init","init bytes : & [ u8 ]",11,16
5,1,42,1,5,"rest@18-22@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","rest","rest & mut self",18,22
8,2,62,2,9,"take@24-32@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","take","take & mut self , len : usize",24,32
3,1,21,1,3,"any_left@34-36@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","any_left","any_left & self",34,36
3,1,21,1,3,"left@38-40@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","left","left & self",38,40
3,1,13,1,3,"used@42-44@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","used","used & self",42,44
3,1,31,2,3,"sub@46-48@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","sub","sub & mut self , len : usize",46,48
7,1,64,1,12,"encode@54-65@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","encode","encode & self , bytes : & mut Vec < u8 >",54,65
4,1,36,0,4,"read_bytes@69-72@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","read_bytes","read_bytes bytes : & [ u8 ]",69,72
4,2,43,0,4,"decode_u8@76-79@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","decode_u8","decode_u8 bytes : & [ u8 ]",76,79
3,1,25,1,3,"encode@82-84@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","encode","encode & self , bytes : & mut Vec < u8 >",82,84
3,1,27,1,3,"read@85-87@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","read","read r : & mut Reader",85,87
4,1,57,1,4,"put_u16@90-93@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","put_u16","put_u16 v : u16 , out : & mut [ u8 ]",90,93
3,2,35,0,3,"decode_u16@95-97@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","decode_u16","decode_u16 bytes : & [ u8 ]",95,97
5,1,45,1,5,"encode@100-104@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","encode","encode & self , bytes : & mut Vec < u8 >",100,104
3,1,27,1,3,"read@106-108@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","read","read r : & mut Reader",106,108
4,2,63,0,4,"decode@117-120@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","decode","decode bytes : & [ u8 ]",117,120
3,1,16,1,3,"from@126-128@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","from","from v : u24",126,128
4,1,41,1,4,"encode@132-135@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","encode","encode & self , bytes : & mut Vec < u8 >",132,135
3,1,29,1,3,"read@137-139@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","read","read r : & mut Reader",137,139
3,2,35,0,3,"decode_u32@142-144@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","decode_u32","decode_u32 bytes : & [ u8 ]",142,144
3,1,30,1,3,"encode@147-149@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","encode","encode & self , bytes : & mut Vec < u8 >",147,149
3,1,27,1,3,"read@151-153@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","read","read r : & mut Reader",151,153
4,1,56,1,4,"put_u64@156-159@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","put_u64","put_u64 v : u64 , bytes : & mut [ u8 ]",156,159
3,2,35,0,3,"decode_u64@161-163@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","decode_u64","decode_u64 bytes : & [ u8 ]",161,163
5,1,45,1,5,"encode@166-170@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","encode","encode & self , bytes : & mut Vec < u8 >",166,170
3,1,27,1,3,"read@172-174@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","read","read r : & mut Reader",172,174
10,2,85,0,12,"encode_vec_u8@177-188@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","encode_vec_u8","encode_vec_u8 bytes : & mut Vec < u8 > , items : & [ T ]",177,188
13,2,126,0,15,"encode_vec_u16@190-204@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","encode_vec_u16","encode_vec_u16 bytes : & mut Vec < u8 > , items : & [ T ]",190,204
14,2,141,0,16,"encode_vec_u24@206-221@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","encode_vec_u24","encode_vec_u24 bytes : & mut Vec < u8 > , items : & [ T ]",206,221
9,5,94,1,11,"read_vec_u8@223-233@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","read_vec_u8","read_vec_u8 r : & mut Reader",223,233
9,5,94,1,11,"read_vec_u16@235-245@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","read_vec_u16","read_vec_u16 r : & mut Reader",235,245
12,6,106,2,15,"read_vec_u24_limited@247-261@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/codec.rs","read_vec_u24_limited","read_vec_u24_limited r : & mut Reader , max_bytes : usize",247,261
3,1,24,1,3,"encode@7-9@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/ccs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/ccs.rs","encode","encode & self , bytes : & mut Vec < u8 >",7,9
8,4,50,1,9,"read@11-19@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/ccs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/ccs.rs","read","read r : & mut Reader",11,19
7,2,46,1,7,"get_u8@16-22@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","get_u8","get_u8 & self",16,22
3,1,28,1,3,"encode@25-27@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","encode","encode & self , bytes : & mut Vec < u8 >",25,27
3,1,30,1,3,"read@29-31@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","read","read r : & mut Reader",29,31
6,2,39,1,6,"from@34-39@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","from","from x : u8",34,39
7,2,46,1,7,"get_u16@55-61@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","get_u16","get_u16 & self",55,61
6,2,51,1,6,"as_str@63-68@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","as_str","as_str & self",63,68
3,1,28,1,3,"encode@71-73@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","encode","encode & self , bytes : & mut Vec < u8 >",71,73
3,1,30,1,3,"read@75-77@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","read","read r : & mut Reader",75,77
6,2,39,1,6,"from@80-85@crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/msgs/macros.rs","from","from x : u16",80,85
28,2,58,1,28,"to_bytes@29-56@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","to_bytes","to_bytes self",29,56
5,1,34,1,5,"new@79-83@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","new","new algorithm : hkdf :: Algorithm , secret : & [ u8 ]",79,83
13,1,54,3,13,"client_early_traffic_secret@85-97@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","client_early_traffic_secret","client_early_traffic_secret & self , hs_hash : & Digest , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] ,",85,97
10,1,43,2,10,"resumption_psk_binder_key_and_sign_verify_data@99-108@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","resumption_psk_binder_key_and_sign_verify_data","resumption_psk_binder_key_and_sign_verify_data & self , hs_hash : & Digest ,",99,108
5,1,25,1,5,"new@120-124@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","new","new algorithm : hkdf :: Algorithm",120,124
4,1,34,1,4,"into_handshake@126-129@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","into_handshake","into_handshake mut self , secret : & [ u8 ]",126,129
3,1,18,1,3,"from@133-135@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","from","from KeyScheduleEarly { ks } : KeyScheduleEarly",133,135
25,1,125,3,29,"derive_handshake_secrets@144-172@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","derive_handshake_secrets","derive_handshake_secrets self , hs_hash : Digest , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] ,",144,172
4,1,30,2,4,"sign_server_finish@182-185@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","sign_server_finish","sign_server_finish & self , hs_hash : & Digest",182,185
3,1,17,1,3,"client_key@187-189@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","client_key","client_key & self",187,189
23,1,102,3,26,"into_traffic_with_client_finished_pending@191-216@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","into_traffic_with_client_finished_pending","into_traffic_with_client_finished_pending self , hs_hash : Digest , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] ,",191,216
14,1,66,2,16,"sign_client_finish@228-243@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","sign_client_finish","sign_client_finish self , hs_hash : & Digest ,",228,243
32,1,118,3,36,"new@256-291@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","new","new mut ks : KeySchedule , hs_hash : Digest , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] ,",256,291
7,1,39,1,7,"next_server_application_traffic_secret@293-299@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","next_server_application_traffic_secret","next_server_application_traffic_secret & mut self",293,299
7,1,39,1,7,"next_client_application_traffic_secret@301-307@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","next_client_application_traffic_secret","next_client_application_traffic_secret & mut self",301,307
13,1,66,2,13,"resumption_master_secret_and_derive_ticket_psk@309-321@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","resumption_master_secret_and_derive_ticket_psk","resumption_master_secret_and_derive_ticket_psk & self , hs_hash : & Digest , nonce : & [ u8 ] ,",309,321
9,1,59,1,9,"export_keying_material@323-331@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","export_keying_material","export_keying_material & self , out : & mut [ u8 ] , label : & [ u8 ] , context : Option < & [ u8 ] > ,",323,331
8,1,69,1,8,"new@335-342@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","new","new algorithm : hkdf :: Algorithm , secret : & [ u8 ]",335,342
3,1,15,1,3,"algorithm@345-347@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","algorithm","algorithm & self",345,347
4,1,42,1,4,"new_with_empty_secret@349-352@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","new_with_empty_secret","new_with_empty_secret algorithm : hkdf :: Algorithm",349,352
4,1,39,1,4,"input_empty@355-358@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","input_empty","input_empty & mut self",355,358
4,1,43,1,4,"input_secret@361-364@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","input_secret","input_secret & mut self , secret : & [ u8 ]",361,364
7,3,65,3,7,"derive@367-373@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","derive","derive & self , key_type : L , kind : SecretKind , hs_hash : & [ u8 ]",367,373
18,2,119,3,18,"derive_logged_secret@375-392@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","derive_logged_secret","derive_logged_secret & self , kind : SecretKind , hs_hash : & [ u8 ] , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] ,",375,392
11,3,76,2,11,"derive_for_empty_hash@398-408@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","derive_for_empty_hash","derive_for_empty_hash & self , kind : SecretKind",398,408
3,1,32,3,3,"sign_finish@412-414@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","sign_finish","sign_finish & self , base_key : & hkdf :: Prk , hs_hash : & Digest",412,414
5,1,65,3,5,"sign_verify_data@418-422@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","sign_verify_data","sign_verify_data & self , base_key : & hkdf :: Prk , hs_hash : & Digest",418,422
3,1,34,2,3,"derive_next@425-427@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","derive_next","derive_next & self , base_key : & hkdf :: Prk",425,427
9,1,59,2,9,"derive_ticket_psk@431-439@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","derive_ticket_psk","derive_ticket_psk & self , rms : & hkdf :: Prk , nonce : & [ u8 ]",431,439
28,1,173,2,32,"export_keying_material@441-472@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","export_keying_material","export_keying_material & self , current_exporter_secret : & hkdf :: Prk , out : & mut [ u8 ] , label : & [ u8 ] , context : Option < & [ u8 ] > ,",441,472
7,3,74,2,7,"hkdf_expand@475-481@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","hkdf_expand","hkdf_expand secret : & hkdf :: Prk , key_type : L , label : & [ u8 ] , context : & [ u8 ]",475,481
26,3,185,3,29,"hkdf_expand_info@483-511@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","hkdf_expand_info","hkdf_expand_info secret : & hkdf :: Prk , key_type : L , label : & [ u8 ] , context : & [ u8 ] , f : F ,",483,511
3,1,13,1,3,"len@515-517@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","len","len & self",515,517
3,1,27,1,3,"derive_traffic_iv@535-537@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","derive_traffic_iv","derive_traffic_iv secret : & hkdf :: Prk",535,537
101,1,892,0,122,"test_vectors@546-667@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","test_vectors","test_vectors",546,667
28,2,169,2,29,"assert_traffic_secret@669-697@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","assert_traffic_secret","assert_traffic_secret ks : & KeySchedule , kind : SecretKind , hash : & [ u8 ] , expected_traffic_secret : & [ u8 ] , expected_key : & [ u8 ] , expected_iv : & [ u8 ] ,",669,697
11,1,78,1,11,"seal_zeroes@699-709@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/key_schedule.rs","seal_zeroes","seal_zeroes key : aead :: UnboundKey",699,709
8,1,64,2,9,"derive_encrypter@78-86@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","derive_encrypter","derive_encrypter & self , secret : & hkdf :: Prk",78,86
8,1,64,2,9,"derive_decrypter@90-98@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","derive_decrypter","derive_decrypter & self , secret : & hkdf :: Prk",90,98
18,1,50,0,18,"from@114-131@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","from","from s : & 'static Tls13CipherSuite) -> Self {
        Self::Tls13(s)
    }
}

impl PartialEq for Tls13CipherSuite {
    fn eq(&self, other: &Self) -> bool {
        self.common.suite == other.common.suite
    }
}

impl fmt::Debug for Tls13CipherSuite {
    fn fmt(&self, f: &mut fmt::Formatter<' _ >",114,131
15,2,25,1,32,"hash_algorithm@101-132@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","hash_algorithm","hash_algorithm & self",101,132
9,2,57,0,9,"unpad_tls13@144-152@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","unpad_tls13","unpad_tls13 v : & mut Vec < u8 >",144,152
9,1,52,1,9,"make_tls13_aad@154-162@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","make_tls13_aad","make_tls13_aad len : usize",154,162
16,2,160,3,19,"encrypt@168-186@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","encrypt","encrypt & self , msg : BorrowedPlainMessage , seq : u64",168,186
27,6,222,3,33,"decrypt@190-222@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls13/mod.rs","decrypt","decrypt & self , mut msg : OpaqueMessage , seq : u64",190,222
3,1,25,1,3,"put@14-16@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","put","put & self , _key : Vec < u8 > , _value : Vec < u8 >",14,16
3,1,24,1,3,"get@18-20@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","get","get & self , _key : & [ u8 ]",18,20
6,1,46,1,6,"new@33-38@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","new","new size : usize",33,38
7,1,44,1,7,"put@42-48@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","put","put & self , key : Vec < u8 > , value : Vec < u8 >",42,48
7,1,43,1,7,"get@50-56@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","get","get & self , key : & [ u8 ]",50,56
7,1,37,1,7,"resolve@62-68@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","resolve","resolve & self , _acceptable_issuers : & [ & [ u8 ] ] , _sigschemes : & [ SignatureScheme ] ,",62,68
3,1,11,1,3,"has_certs@70-72@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","has_certs","has_certs & self",70,72
8,2,78,1,8,"new@78-85@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","new","new chain : Vec < key :: Certificate > , priv_key : & key :: PrivateKey ,",78,85
7,1,48,1,7,"resolve@89-95@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","resolve","resolve & self , _acceptable_issuers : & [ & [ u8 ] ] , _sigschemes : & [ SignatureScheme ] ,",89,95
3,1,11,1,3,"has_certs@97-99@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","has_certs","has_certs & self",97,99
4,1,36,0,4,"test_noclientsessionstorage_drops_put@108-111@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","test_noclientsessionstorage_drops_put","test_noclientsessionstorage_drops_put",108,111
7,1,77,0,7,"test_noclientsessionstorage_denies_gets@114-120@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","test_noclientsessionstorage_denies_gets","test_noclientsessionstorage_denies_gets",114,120
4,1,39,0,4,"test_clientsessionmemorycache_accepts_put@123-126@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","test_clientsessionmemorycache_accepts_put","test_clientsessionmemorycache_accepts_put",123,126
6,1,85,0,6,"test_clientsessionmemorycache_persists_put@129-134@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","test_clientsessionmemorycache_persists_put","test_clientsessionmemorycache_persists_put",129,134
6,1,85,0,6,"test_clientsessionmemorycache_overwrites_put@137-142@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","test_clientsessionmemorycache_overwrites_put","test_clientsessionmemorycache_overwrites_put",137,142
14,1,232,0,16,"test_clientsessionmemorycache_drops_to_maintain_size_invariant@145-160@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/handy.rs","test_clientsessionmemorycache_drops_to_maintain_size_invariant","test_clientsessionmemorycache_drops_to_maintain_size_invariant",145,160
103,12,294,2,115,"find_session@42-156@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/hs.rs","find_session","find_session server_name : & ServerName , config : & ClientConfig , #[cfg(feature = 'quic')] cx: &mut ClientContext< '_>,
) -> Option<persist::Retrieved<persist::ClientSessionValue>> {
    let key = persist::ClientSessionKey::session_for_server_name(server_name);
    let key_buf = key.get_encoding();

    let value = config
        .session_storage
        .get(&key_buf)
        .or_else(|| {
            debug!('No cached session for {:?}', server_name);
            None
        })?;

    #[allow(unused_mut)]
    let mut reader = Reader::init(&value[2..]);
    #[allow(clippy::bind_instead_of_map)] // https://github.com/rust-lang/rust-clippy/issues/8082
    CipherSuite::read_bytes(&value[..2])
        .and_then(|suite| {
            persist::ClientSessionValue::read(&mut reader, suite, &config.cipher_suites)
        })
        .and_then(|resuming| {
            let retrieved = persist::Retrieved::new(resuming, TimeBase::now().ok()?);
            match retrieved.has_expired() {
                false => Some(retrieved),
                true => None,
            }
        })
        .and_then(|resuming| {
            #[cfg(feature = 'quic')]
            if cx.common.is_quic() {
                let params = PayloadU16::read(&mut reader)?;
                cx.common.quic.params = Some(params.0);
            }
            Some(resuming)
        })
}

pub(super) fn start_handshake(
    server_name: ServerName,
    extra_exts: Vec<ClientExtension>,
    config: Arc<ClientConfig>,
    cx: &mut ClientContext<' _ > ,",42,156
13,3,88,1,13,"handle@792-804@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/hs.rs","handle","handle self : Box < Self > , cx : & mut ClientContext < ' _ > , m : Message",792,804
576,30,1194,50,628,"emit_client_hello_for_retry@178-805@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/hs.rs","emit_client_hello_for_retry","emit_client_hello_for_retry config : Arc < ClientConfig > , cx : & mut ClientContext < '_>,
    resuming_session: Option<persist::Retrieved<persist::ClientSessionValue>>,
    random: Random,
    using_ems: bool,
    mut transcript_buffer: HandshakeHashBuffer,
    mut sent_tls13_fake_ccs: bool,
    mut hello: ClientHelloDetails,
    session_id: Option<SessionID>,
    retryreq: Option<&HelloRetryRequest>,
    server_name: ServerName,
    key_share: Option<kx::KeyExchange>,
    extra_exts: Vec<ClientExtension>,
    may_send_sct_list: bool,
    suite: Option<SupportedCipherSuite>,
) -> NextState {
    // Do we have a SessionID or ticket cached for this host?
    let (ticket, resume_version) = if let Some(resuming) = &resuming_session {
        match &resuming.value {
            persist::ClientSessionValue::Tls13(inner) => {
                (inner.ticket().to_vec(), ProtocolVersion::TLSv1_3)
            }
            #[cfg(feature = 'tls12')]
            persist::ClientSessionValue::Tls12(inner) => {
                (inner.ticket().to_vec(), ProtocolVersion::TLSv1_2)
            }
        }
    } else {
        (Vec::new(), ProtocolVersion::Unknown(0))
    };

    let support_tls12 = config.supports_version(ProtocolVersion::TLSv1_2) && !cx.common.is_quic();
    let support_tls13 = config.supports_version(ProtocolVersion::TLSv1_3);

    let mut supported_versions = Vec::new();
    if support_tls13 {
        supported_versions.push(ProtocolVersion::TLSv1_3);
    }

    if support_tls12 {
        supported_versions.push(ProtocolVersion::TLSv1_2);
    }

    let mut exts = Vec::new();
    if !supported_versions.is_empty() {
        exts.push(ClientExtension::SupportedVersions(supported_versions));
    }
    if let (Some(sni_name), true) = (server_name.for_sni(), config.enable_sni) {
        exts.push(ClientExtension::make_sni(sni_name));
    }
    exts.push(ClientExtension::ECPointFormats(
        ECPointFormatList::supported(),
    ));
    exts.push(ClientExtension::NamedGroups(
        config
            .kx_groups
            .iter()
            .map(|skxg| skxg.name)
            .collect(),
    ));
    exts.push(ClientExtension::SignatureAlgorithms(
        config
            .verifier
            .supported_verify_schemes(),
    ));
    exts.push(ClientExtension::ExtendedMasterSecretRequest);
    exts.push(ClientExtension::CertificateStatusRequest(
        CertificateStatusRequest::build_ocsp(),
    ));

    if may_send_sct_list {
        exts.push(ClientExtension::SignedCertificateTimestampRequest);
    }

    if let Some(key_share) = &key_share {
        debug_assert!(support_tls13);
        let key_share = KeyShareEntry::new(key_share.group(), key_share.pubkey.as_ref());
        exts.push(ClientExtension::KeyShare(vec![key_share]));
    }

    if let Some(cookie) = retryreq.and_then(HelloRetryRequest::get_cookie) {
        exts.push(ClientExtension::Cookie(cookie.clone()));
    }

    if support_tls13 && config.enable_tickets {
        // We could support PSK_KE here too. Such connections don' t let psk_modes = vec ! [ PSKKeyExchangeMode :: PSK_DHE_KE ] ; exts . push ClientExtension :: PresharedKeyModes psk_modes ; } if ! config . alpn_protocols . is_empty { exts . push ClientExtension :: Protocols ProtocolNameList :: from_slices & config . alpn_protocols . iter . map | proto | & proto [ . . ] . collect :: < Vec < _ > > , ; } exts . extend extra_exts . iter . cloned ; let fill_in_binder = if support_tls13 && config . enable_tickets && resume_version == ProtocolVersion :: TLSv1_3 && ! ticket . is_empty { resuming_session . as_ref . and_then | resuming | match suite , resuming . tls13 { Some suite , Some resuming => { suite . tls13 ? . can_resume_from resuming . suite ? ; Some resuming } None , Some resuming => Some resuming , _ => None , } . map | resuming | { tls13 :: prepare_resumption & config , cx , ticket , & resuming , & mut exts , retryreq . is_some , ; resuming } } else if config . enable_tickets { if ticket . is_empty { exts . push ClientExtension :: SessionTicket ClientSessionTicket :: Request ; } else { exts . push ClientExtension :: SessionTicket ClientSessionTicket :: Offer Payload :: new ticket , ; } None } else { None } ; hello . sent_extensions = exts . iter . map ClientExtension :: get_type . collect ; let session_id = session_id . unwrap_or_else SessionID :: empty ; let mut cipher_suites : Vec < _ > = config . cipher_suites . iter . map | cs | cs . suite . collect ; cipher_suites . push CipherSuite :: TLS_EMPTY_RENEGOTIATION_INFO_SCSV ; let mut chp = HandshakeMessagePayload { typ : HandshakeType :: ClientHello , payload : HandshakePayload :: ClientHello ClientHelloPayload { client_version : ProtocolVersion :: TLSv1_2 , random , session_id , cipher_suites , compression_methods : vec ! [ Compression :: Null ] , extensions : exts , } , } ; let early_key_schedule = if let Some resuming = fill_in_binder { let schedule = tls13 :: fill_in_psk_binder & resuming , & transcript_buffer , & mut chp ; Some resuming . suite , schedule } else { None } ; let ch = Message { version : if retryreq . is_some { ProtocolVersion :: TLSv1_2 } else { ProtocolVersion :: TLSv1_0 } , payload : MessagePayload :: Handshake chp , } ; if retryreq . is_some { tls13 :: emit_fake_ccs & mut sent_tls13_fake_ccs , cx . common ; } trace ! 'Sending ClientHello {:#?}' , ch ; transcript_buffer . add_message & ch ; cx . common . send_msg ch , false ; let early_key_schedule = early_key_schedule . map | resuming_suite , schedule | { if ! cx . data . early_data . is_enabled { return schedule ; } tls13 :: derive_early_traffic_secret & * config . key_log , cx , resuming_suite , & schedule , & mut sent_tls13_fake_ccs , & transcript_buffer , & random . 0 , ; schedule } ; let next = ExpectServerHello { config , resuming_session , server_name , random , using_ems , transcript_buffer , early_key_schedule , hello , offered_key_share : key_share , session_id , sent_tls13_fake_ccs , suite , } ; if support_tls13 && retryreq . is_none { Box :: new ExpectServerHelloOrHelloRetryRequest { next , extra_exts } } else { Box :: new next } } pub super fn process_alpn_protocol common : & mut CommonState , config : & ClientConfig , proto : Option < & [ u8 ] > , -> Result < , Error > { common . alpn_protocol = proto . map ToOwned :: to_owned ; if let Some alpn_protocol = & common . alpn_protocol { if ! config . alpn_protocols . contains alpn_protocol { return Err common . illegal_param 'server sent non-offered ALPN protocol' ; } } #[cfg(feature = 'quic')] { if common . is_quic && common . alpn_protocol . is_none && ! config . alpn_protocols . is_empty { common . send_fatal_alert AlertDescription :: NoApplicationProtocol ; return Err Error :: NoApplicationProtocol ; } } debug ! 'ALPN protocol is {:?}' , common . alpn_protocol . as_ref . map | v | bs_debug :: BsDebug v ; Ok } pub super fn sct_list_is_invalid scts : & SCTList -> bool { scts . is_empty || scts . iter . any | sct | sct . 0 . is_empty } impl State < ClientConnectionData > for ExpectServerHello { fn handle mut self : Box < Self > , cx : & mut ClientContext < '_>, m: Message) -> NextStateOrError {
        let server_hello =
            require_handshake_msg!(m, HandshakeType::ServerHello, HandshakePayload::ServerHello)?;
        trace!('We got ServerHello {:#?}', server_hello);

        use crate::ProtocolVersion::{TLSv1_2, TLSv1_3};
        let tls13_supported = self.config.supports_version(TLSv1_3);

        let server_version = if server_hello.legacy_version == TLSv1_2 {
            server_hello
                .get_supported_versions()
                .unwrap_or(server_hello.legacy_version)
        } else {
            server_hello.legacy_version
        };

        let version = match server_version {
            TLSv1_3 if tls13_supported => TLSv1_3,
            TLSv1_2 if self.config.supports_version(TLSv1_2) => {
                if cx.data.early_data.is_enabled() && cx.common.early_traffic {
                    // The client must fail with a dedicated error code if the server
                    // responds with TLS 1.2 when offering 0-RTT.
                    return Err(Error::PeerMisbehavedError(
                        'server chose v1.2 when offering 0-rtt'.to_string(),
                    ));
                }

                if server_hello
                    .get_supported_versions()
                    .is_some()
                {
                    return Err(cx
                        .common
                        .illegal_param('server chose v1.2 using v1.3 extension'));
                }

                TLSv1_2
            }
            _ => {
                cx.common
                    .send_fatal_alert(AlertDescription::ProtocolVersion);
                let msg = match server_version {
                    TLSv1_2 | TLSv1_3 => 'server' s TLS version is disabled in client ',
                    _ => ' server does not support TLS v1 . 2 / v1 . 3 ',
                };
                return Err(Error::PeerIncompatibleError(msg.to_string()));
            }
        };

        if server_hello.compression_method != Compression::Null {
            return Err(cx
                .common
                .illegal_param(' server chose non - Null compression '));
        }

        if server_hello.has_duplicate_extension() {
            cx.common
                .send_fatal_alert(AlertDescription::DecodeError);
            return Err(Error::PeerMisbehavedError(
                ' server sent duplicate extensions '.to_string(),
            ));
        }

        let allowed_unsolicited = [ExtensionType::RenegotiationInfo];
        if self
            .hello
            .server_sent_unsolicited_extensions(&server_hello.extensions, &allowed_unsolicited)
        {
            cx.common
                .send_fatal_alert(AlertDescription::UnsupportedExtension);
            return Err(Error::PeerMisbehavedError(
                ' server sent unsolicited extension '.to_string(),
            ));
        }

        cx.common.negotiated_version = Some(version);

        // Extract ALPN protocol
        if !cx.common.is_tls13() {
            process_alpn_protocol(cx.common, &self.config, server_hello.get_alpn_protocol())?;
        }

        // If ECPointFormats extension is supplied by the server, it must contain
        // Uncompressed.  But it's allowed to be omitted.
        if let Some(point_fmts) = server_hello.get_ecpoints_extension() {
            if !point_fmts.contains(&ECPointFormat::Uncompressed) {
                cx.common
                    .send_fatal_alert(AlertDescription::HandshakeFailure);
                return Err(Error::PeerMisbehavedError(
                    ' server does not support uncompressed points '.to_string(),
                ));
            }
        }

        let suite = self
            .config
            .find_cipher_suite(server_hello.cipher_suite)
            .ok_or_else(|| {
                cx.common
                    .send_fatal_alert(AlertDescription::HandshakeFailure);
                Error::PeerMisbehavedError(' server chose non - offered ciphersuite '.to_string())
            })?;

        if version != suite.version().version {
            return Err(cx
                .common
                .illegal_param(' server chose unusable ciphersuite for version '));
        }

        match self.suite {
            Some(prev_suite) if prev_suite != suite => {
                return Err(cx
                    .common
                    .illegal_param(' server varied selected ciphersuite '));
            }
            _ => {
                debug!(' Using ciphersuite { : ? } ', suite);
                self.suite = Some(suite);
                cx.common.suite = Some(suite);
            }
        }

        // Start our handshake hash, and input the server-hello.
        let mut transcript = self
            .transcript_buffer
            .start_hash(suite.hash_algorithm());
        transcript.add_message(&m);

        let randoms = ConnectionRandoms::new(self.random, server_hello.random, true);
        // For TLS1.3, start message encryption using
        // handshake_traffic_secret.
        match suite {
            SupportedCipherSuite::Tls13(suite) => {
                let resuming_session = self
                    .resuming_session
                    .and_then(|resuming| match resuming.value {
                        persist::ClientSessionValue::Tls13(inner) => Some(inner),
                        #[cfg(feature = ' tls12 ')]
                        persist::ClientSessionValue::Tls12(_) => None,
                    });

                tls13::handle_server_hello(
                    self.config,
                    cx,
                    server_hello,
                    resuming_session,
                    self.server_name,
                    randoms,
                    suite,
                    transcript,
                    self.early_key_schedule,
                    self.hello,
                    // We always send a key share when TLS 1.3 is enabled.
                    self.offered_key_share.unwrap(),
                    self.sent_tls13_fake_ccs,
                )
            }
            #[cfg(feature = ' tls12 ')]
            SupportedCipherSuite::Tls12(suite) => {
                let resuming_session = self
                    .resuming_session
                    .and_then(|resuming| match resuming.value {
                        persist::ClientSessionValue::Tls12(inner) => Some(inner),
                        persist::ClientSessionValue::Tls13(_) => None,
                    });

                tls12::CompleteServerHelloHandling {
                    config: self.config,
                    resuming_session,
                    server_name: self.server_name,
                    randoms,
                    using_ems: self.using_ems,
                    transcript,
                }
                .handle_server_hello(cx, suite, server_hello, tls13_supported)
            }
        }
    }
}

impl ExpectServerHelloOrHelloRetryRequest {
    fn into_expect_server_hello(self) -> NextState {
        Box::new(self.next)
    }

    fn handle_hello_retry_request(
        self,
        cx: &mut ClientContext<'_>,
        m: Message,
    ) -> NextStateOrError {
        let hrr = require_handshake_msg!(
            m,
            HandshakeType::HelloRetryRequest,
            HandshakePayload::HelloRetryRequest
        )?;
        trace!(' Got HRR { : ? } ', hrr);

        cx.common.check_aligned_handshake()?;

        let cookie = hrr.get_cookie();
        let req_group = hrr.get_requested_key_share_group();

        // We always send a key share when TLS 1.3 is enabled.
        let offered_key_share = self.next.offered_key_share.unwrap();

        // A retry request is illegal if it contains no cookie and asks for
        // retry of a group we already sent.
        if cookie.is_none() && req_group == Some(offered_key_share.group()) {
            return Err(cx
                .common
                .illegal_param(' server requested hrr with our group '));
        }

        // Or has an empty cookie.
        if let Some(cookie) = cookie {
            if cookie.0.is_empty() {
                return Err(cx
                    .common
                    .illegal_param(' server requested hrr with empty cookie '));
            }
        }

        // Or has something unrecognised
        if hrr.has_unknown_extension() {
            cx.common
                .send_fatal_alert(AlertDescription::UnsupportedExtension);
            return Err(Error::PeerIncompatibleError(
                ' server sent hrr with unhandled extension '.to_string(),
            ));
        }

        // Or has the same extensions more than once
        if hrr.has_duplicate_extension() {
            return Err(cx
                .common
                .illegal_param(' server send duplicate hrr extensions '));
        }

        // Or asks us to change nothing.
        if cookie.is_none() && req_group.is_none() {
            return Err(cx
                .common
                .illegal_param(' server requested hrr with no changes '));
        }

        // Or asks us to talk a protocol we didn't offer, or doesn't support HRR at all.
        match hrr.get_supported_versions() {
            Some(ProtocolVersion::TLSv1_3) => {
                cx.common.negotiated_version = Some(ProtocolVersion::TLSv1_3);
            }
            _ => {
                return Err(cx
                    .common
                    .illegal_param(' server requested unsupported version in hrr '));
            }
        }

        // Or asks us to use a ciphersuite we didn't offer.
        let maybe_cs = self
            .next
            .config
            .find_cipher_suite(hrr.cipher_suite);
        let cs = match maybe_cs {
            Some(cs) => cs,
            None => {
                return Err(cx
                    .common
                    .illegal_param(' server requested unsupported cs in hrr '));
            }
        };

        // HRR selects the ciphersuite.
        cx.common.suite = Some(cs);

        // This is the draft19 change where the transcript became a tree
        let transcript = self
            .next
            .transcript_buffer
            .start_hash(cs.hash_algorithm());
        let mut transcript_buffer = transcript.into_hrr_buffer();
        transcript_buffer.add_message(&m);

        // Early data is not allowed after HelloRetryrequest
        if cx.data.early_data.is_enabled() {
            cx.data.early_data.rejected();
        }

        let may_send_sct_list = self
            .next
            .hello
            .server_may_send_sct_list();

        let key_share = match req_group {
            Some(group) if group != offered_key_share.group() => {
                let group = kx::KeyExchange::choose(group, &self.next.config.kx_groups)
                    .ok_or_else(|| {
                        cx.common
                            .illegal_param(' server requested hrr with bad group ' }",178,805
14,2,69,2,15,"send_cert_error_alert@807-821@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/hs.rs","send_cert_error_alert","send_cert_error_alert common : & mut CommonState , err : Error",807,821
7,2,46,2,7,"supports_version@166-172@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","supports_version","supports_version & self , v : ProtocolVersion",166,172
3,1,21,1,3,"dangerous@177-179@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","dangerous","dangerous & mut self",177,179
6,1,43,2,6,"find_cipher_suite@181-186@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","find_cipher_suite","find_cipher_suite & self , suite : CipherSuite",181,186
80,1,96,1,123,"resolve@65-187@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","resolve","resolve & self , acceptable_issuers : & [ & [ u8 ] ] , sigschemes : & [ SignatureScheme ] ,",65,187
5,2,37,1,5,"for_sni@224-228@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","for_sni","for_sni & self",224,228
12,1,103,1,15,"encode@231-245@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","encode","encode & self",231,245
6,2,66,1,6,"try_from@252-257@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","try_from","try_from s : & str",252,257
3,1,26,2,3,"fmt@266-268@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","fmt","fmt & self , f : & mut fmt :: Formatter",266,268
3,1,25,1,3,"set_certificate_verifier@289-291@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","set_certificate_verifier","set_certificate_verifier & mut self , verifier : Arc < dyn ServerCertVerifier >",289,291
37,4,166,1,250,"put@44-293@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","put","put & self , key : Vec < u8 > , value : Vec < u8 >",44,293
6,1,21,0,6,"new@310-315@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","new","new",310,315
3,1,25,1,3,"is_enabled@317-319@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","is_enabled","is_enabled & self",317,319
6,1,25,1,6,"is_accepted@321-326@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","is_accepted","is_accepted & self",321,326
5,1,39,2,5,"enable@328-332@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","enable","enable & mut self , max_data : usize",328,332
4,1,23,1,4,"rejected@334-337@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","rejected","rejected & mut self",334,337
5,1,35,1,5,"accepted@339-343@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","accepted","accepted & mut self",339,343
7,2,41,1,7,"finished@345-351@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","finished","finished & mut self",345,351
17,3,108,2,18,"check_write@353-370@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","check_write","check_write & mut self , sz : usize",353,370
3,1,13,1,3,"bytes_left@372-374@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","bytes_left","bytes_left & self",372,374
93,9,572,19,139,"new@383-521@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","new","new sess : & 'a mut ClientConnection) -> WriteEarlyData<' a > { WriteEarlyData { sess } } pub fn bytes_left & self -> usize { self . sess . inner . data . early_data . bytes_left } } impl < 'a> io::Write for WriteEarlyData<' a > { fn write & mut self , buf : & [ u8 ] -> io :: Result < usize > { self . sess . write_early_data buf } fn flush & mut self -> io :: Result < > { Ok } } pub struct ClientConnection { inner : ConnectionCommon < ClientConnectionData > , } impl fmt :: Debug for ClientConnection { fn fmt & self , f : & mut fmt :: Formatter -> fmt :: Result { f . debug_struct 'ClientConnection' . finish } } impl ClientConnection { pub fn new config : Arc < ClientConfig > , name : ServerName -> Result < Self , Error > { Self :: new_inner config , name , Vec :: new , Protocol :: Tcp } fn new_inner config : Arc < ClientConfig > , name : ServerName , extra_exts : Vec < ClientExtension > , proto : Protocol , -> Result < Self , Error > { let mut common_state = CommonState :: new config . max_fragment_size , true ? ; common_state . protocol = proto ; let mut data = ClientConnectionData :: new ; let mut cx = hs :: ClientContext { common : & mut common_state , data : & mut data , } ; let state = hs :: start_handshake name , extra_exts , config , & mut cx ? ; let inner = ConnectionCommon :: new state , data , common_state ; Ok Self { inner } } pub fn early_data & mut self -> Option < WriteEarlyData > { if self . inner . data . early_data . is_enabled { Some WriteEarlyData :: new self } else { None } } pub fn is_early_data_accepted & self -> bool { self . inner . data . early_data . is_accepted } fn write_early_data & mut self , data : & [ u8 ] -> io :: Result < usize > { self . inner . data . early_data . check_write data . len . map | sz | { self . inner . common_state . send_early_plaintext & data [ . . sz ] } } } impl Deref for ClientConnection { type Target = ConnectionCommon < ClientConnectionData > ; fn deref & self -> & Self :: Target { & self . inner } } impl DerefMut for ClientConnection { fn deref_mut & mut self -> & mut Self :: Target { & mut self . inner } } #[doc(hidden)] impl < 'a> TryFrom<&' a mut crate :: Connection > for & 'a mut ClientConnection {
    type Error = ();

    fn try_from(value: &' a mut crate :: Connection",383,521
3,1,17,1,3,"from@525-527@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","from","from conn : ClientConnection",525,527
6,1,23,0,6,"new@537-542@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","new","new",537,542
8,1,41,1,8,"quic_transport_parameters@549-556@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","quic_transport_parameters","quic_transport_parameters & self",549,556
13,3,61,1,13,"zero_rtt_keys@558-570@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","zero_rtt_keys","zero_rtt_keys & self",558,570
3,1,32,1,3,"read_hs@572-574@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","read_hs","read_hs & mut self , plaintext : & [ u8 ]",572,574
3,1,39,1,3,"write_hs@576-578@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","write_hs","write_hs & mut self , buf : & mut Vec < u8 >",576,578
3,1,22,1,3,"alert@580-582@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","alert","alert & self",580,582
17,3,117,2,19,"new_quic@591-609@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/client_conn.rs","new_quic","new_quic config : Arc < ClientConfig > , quic_version : quic :: Version , name : ServerName , params : Vec < u8 > ,",591,609
186,8,654,44,199,"handle_server_hello@52-250@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","handle_server_hello","handle_server_hello mut self , cx : & mut ClientContext , suite : & 'static Tls12CipherSuite,
            server_hello: &ServerHelloPayload,
            tls13_supported: bool,
        ) -> hs::NextStateOrError {
            server_hello
                .random
                .write_slice(&mut self.randoms.server);

            // Look for TLS1.3 downgrade signal in server random
            if tls13_supported
                && self
                    .randoms
                    .has_tls12_downgrade_marker()
            {
                return Err(cx
                    .common
                    .illegal_param('downgrade to TLS1.2 when TLS1.3 is supported'));
            }

            // Doing EMS?
            self.using_ems = server_hello.ems_support_acked();

            // Might the server send a ticket?
            let must_issue_new_ticket = if server_hello
                .find_extension(ExtensionType::SessionTicket)
                .is_some()
            {
                debug!('Server supports tickets');
                true
            } else {
                false
            };

            // Might the server send a CertificateStatus between Certificate and
            // ServerKeyExchange?
            let may_send_cert_status = server_hello
                .find_extension(ExtensionType::StatusRequest)
                .is_some();
            if may_send_cert_status {
                debug!('Server may staple OCSP response');
            }

            // Save any sent SCTs for verification against the certificate.
            let server_cert_sct_list = if let Some(sct_list) = server_hello.get_sct_list() {
                debug!('Server sent {:?} SCTs', sct_list.len());

                if hs::sct_list_is_invalid(sct_list) {
                    let error_msg = 'server sent invalid SCT list'.to_string();
                    return Err(Error::PeerMisbehavedError(error_msg));
                }
                Some(sct_list.clone())
            } else {
                None
            };

            // See if we' re successfully resuming . if let Some ref resuming = self . resuming_session { if resuming . session_id == server_hello . session_id { debug ! 'Server agreed to resume' ; if resuming . suite != suite { let error_msg = 'abbreviated handshake offered, but with varied cs' . to_string ; return Err Error :: PeerMisbehavedError error_msg ; } if resuming . extended_ms != self . using_ems { let error_msg = 'server varied ems support over resume' . to_string ; return Err Error :: PeerMisbehavedError error_msg ; } let secrets = ConnectionSecrets :: new_resume self . randoms , suite , resuming . secret ; self . config . key_log . log 'CLIENT_RANDOM' , & secrets . randoms . client , & secrets . master_secret , ; cx . common . start_encryption_tls12 & secrets ; cx . common . peer_certificates = Some resuming . server_cert_chain . to_vec ; let cert_verified = verify :: ServerCertVerified :: assertion ; let sig_verified = verify :: HandshakeSignatureValid :: assertion ; return if must_issue_new_ticket { Ok Box :: new ExpectNewTicket { config : self . config , secrets , resuming_session : self . resuming_session , session_id : server_hello . session_id , server_name : self . server_name , using_ems : self . using_ems , transcript : self . transcript , resuming : true , cert_verified , sig_verified , } } else { Ok Box :: new ExpectCcs { config : self . config , secrets , resuming_session : self . resuming_session , session_id : server_hello . session_id , server_name : self . server_name , using_ems : self . using_ems , transcript : self . transcript , ticket : None , resuming : true , cert_verified , sig_verified , } } ; } } Ok Box :: new ExpectCertificate { config : self . config , resuming_session : self . resuming_session , session_id : server_hello . session_id , server_name : self . server_name , randoms : self . randoms , using_ems : self . using_ems , transcript : self . transcript , suite , may_send_cert_status , must_issue_new_ticket , server_cert_sct_list , } } } } struct ExpectCertificate { config : Arc < ClientConfig > , resuming_session : Option < persist :: Tls12ClientSessionValue > , session_id : SessionID , server_name : ServerName , randoms : ConnectionRandoms , using_ems : bool , transcript : HandshakeHash , pub super suite : & 'static Tls12CipherSuite,
    may_send_cert_status: bool,
    must_issue_new_ticket: bool,
    server_cert_sct_list: Option<SCTList>,
}

impl State<ClientConnectionData> for ExpectCertificate {
    fn handle(
        mut self: Box<Self>,
        _cx: &mut ClientContext<' _ > , m : Message ,",52,250
15,1,78,3,16,"emit_certificate@425-440@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","emit_certificate","emit_certificate transcript : & mut HandshakeHash , cert_chain : CertificatePayload , common : & mut CommonState ,",425,440
15,1,126,3,17,"emit_clientkx@442-458@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","emit_clientkx","emit_clientkx transcript : & mut HandshakeHash , common : & mut CommonState , pubkey : & PublicKey",442,458
31,3,218,3,34,"emit_certverify@460-493@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","emit_certverify","emit_certverify transcript : & mut HandshakeHash , client_auth : & mut ClientAuthDetails , common : & mut CommonState ,",460,493
7,1,44,1,8,"emit_ccs@495-502@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","emit_ccs","emit_ccs common : & mut CommonState",495,502
18,1,109,3,20,"emit_finished@504-523@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","emit_finished","emit_finished secrets : & ConnectionSecrets , transcript : & mut HandshakeHash , common : & mut CommonState ,",504,523
6,1,29,1,6,"new@531-536@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","new","new params : Vec < u8 > , sig : DigitallySignedStruct",531,536
65,3,145,1,70,"handle@873-942@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls12.rs","handle","handle mut self : Box < Self > , _cx : & mut ClientContext < '_>,
        m: Message,
    ) -> hs::NextStateOrError {
        self.transcript.add_message(&m);

        let nst = require_handshake_msg_move!(
            m,
            HandshakeType::NewSessionTicket,
            HandshakePayload::NewSessionTicket
        )?;

        Ok(Box::new(ExpectCcs {
            config: self.config,
            secrets: self.secrets,
            resuming_session: self.resuming_session,
            session_id: self.session_id,
            server_name: self.server_name,
            using_ems: self.using_ems,
            transcript: self.transcript,
            ticket: Some(nst),
            resuming: self.resuming,
            cert_verified: self.cert_verified,
            sig_verified: self.sig_verified,
        }))
    }
}

// -- Waiting for their CCS --
struct ExpectCcs {
    config: Arc<ClientConfig>,
    secrets: ConnectionSecrets,
    resuming_session: Option<persist::Tls12ClientSessionValue>,
    session_id: SessionID,
    server_name: ServerName,
    using_ems: bool,
    transcript: HandshakeHash,
    ticket: Option<NewSessionTicketPayload>,
    resuming: bool,
    cert_verified: verify::ServerCertVerified,
    sig_verified: verify::HandshakeSignatureValid,
}

impl State<ClientConnectionData> for ExpectCcs {
    fn handle(self: Box<Self>, cx: &mut ClientContext<' _ > , m : Message",873,942
403,26,1701,84,457,"handle_server_hello@60-516@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","handle_server_hello","handle_server_hello config : Arc < ClientConfig > , cx : & mut ClientContext , server_hello : & ServerHelloPayload , mut resuming_session : Option < persist :: Tls13ClientSessionValue > , server_name : ServerName , randoms : ConnectionRandoms , suite : & 'static Tls13CipherSuite,
    transcript: HandshakeHash,
    early_key_schedule: Option<KeyScheduleEarly>,
    hello: ClientHelloDetails,
    our_key_share: kx::KeyExchange,
    mut sent_tls13_fake_ccs: bool,
) -> hs::NextStateOrError {
    validate_server_hello(cx.common, server_hello)?;

    let their_key_share = server_hello
        .get_key_share()
        .ok_or_else(|| {
            cx.common
                .send_fatal_alert(AlertDescription::MissingExtension);
            Error::PeerMisbehavedError('missing key share'.to_string())
        })?;

    if our_key_share.group() != their_key_share.group {
        return Err(cx
            .common
            .illegal_param('wrong group for key share'));
    }

    let key_schedule_pre_handshake = if let (Some(selected_psk), Some(early_key_schedule)) =
        (server_hello.get_psk_index(), early_key_schedule)
    {
        if let Some(ref resuming) = resuming_session {
            let resuming_suite = match suite.can_resume_from(resuming.suite()) {
                Some(resuming) => resuming,
                None => {
                    return Err(cx
                        .common
                        .illegal_param('server resuming incompatible suite'));
                }
            };

            // If the server varies the suite here, we will have encrypted early data with
            // the wrong suite.
            if cx.data.early_data.is_enabled() && resuming_suite != suite {
                return Err(cx
                    .common
                    .illegal_param('server varied suite with early data'));
            }

            if selected_psk != 0 {
                return Err(cx
                    .common
                    .illegal_param('server selected invalid psk'));
            }

            debug!('Resuming using PSK');
            // The key schedule has been initialized and set in fill_in_psk_binder()
        } else {
            return Err(Error::PeerMisbehavedError(
                'server selected unoffered psk'.to_string(),
            ));
        }
        KeySchedulePreHandshake::from(early_key_schedule)
    } else {
        debug!('Not resuming');
        // Discard the early data key schedule.
        cx.data.early_data.rejected();
        cx.common.early_traffic = false;
        resuming_session.take();
        KeySchedulePreHandshake::new(suite.hkdf_algorithm)
    };

    let key_schedule = our_key_share.complete(&their_key_share.payload.0, |secret| {
        Ok(key_schedule_pre_handshake.into_handshake(secret))
    })?;

    // Remember what KX group the server liked for next time.
    save_kx_hint(&config, &server_name, their_key_share.group);

    // If we change keying when a subsequent handshake message is being joined,
    // the two halves will have different record layer protections.  Disallow this.
    cx.common.check_aligned_handshake()?;

    let hash_at_client_recvd_server_hello = transcript.get_current_hash();

    let (key_schedule, client_key, server_key) = key_schedule.derive_handshake_secrets(
        hash_at_client_recvd_server_hello,
        &*config.key_log,
        &randoms.client,
    );

    // Decrypt with the peer' s key , encrypt with our own key cx . common . record_layer . set_message_decrypter suite . derive_decrypter & server_key ; if ! cx . data . early_data . is_enabled { cx . common . record_layer . set_message_encrypter suite . derive_encrypter & client_key ; } #[cfg(feature = 'quic')] { cx . common . quic . hs_secrets = Some quic :: Secrets :: new client_key , server_key , suite , true ; } emit_fake_ccs & mut sent_tls13_fake_ccs , cx . common ; Ok Box :: new ExpectEncryptedExtensions { config , resuming_session , server_name , randoms , suite , transcript , key_schedule , hello , } } fn validate_server_hello common : & mut CommonState , server_hello : & ServerHelloPayload , -> Result < , Error > { for ext in & server_hello . extensions { if ! ALLOWED_PLAINTEXT_EXTS . contains & ext . get_type { common . send_fatal_alert AlertDescription :: UnsupportedExtension ; return Err Error :: PeerMisbehavedError 'server sent unexpected cleartext ext' . to_string , ; } } Ok } pub super fn initial_key_share config : & ClientConfig , server_name : & ServerName , -> Result < kx :: KeyExchange , Error > { let key = persist :: ClientSessionKey :: hint_for_server_name server_name ; let key_buf = key . get_encoding ; let maybe_value = config . session_storage . get & key_buf ; let group = maybe_value . and_then | enc | NamedGroup :: read_bytes & enc . and_then | group | kx :: KeyExchange :: choose group , & config . kx_groups . unwrap_or_else || { config . kx_groups . first . expect 'No kx groups configured' } ; kx :: KeyExchange :: start group . ok_or Error :: FailedToGetRandomBytes } fn save_kx_hint config : & ClientConfig , server_name : & ServerName , group : NamedGroup { let key = persist :: ClientSessionKey :: hint_for_server_name server_name ; config . session_storage . put key . get_encoding , group . get_encoding ; } pub super fn fill_in_psk_binder resuming : & persist :: Tls13ClientSessionValue , transcript : & HandshakeHashBuffer , hmp : & mut HandshakeMessagePayload , -> KeyScheduleEarly { let hkdf_alg = resuming . suite . hkdf_algorithm ; let suite_hash = resuming . suite . hash_algorithm ; let binder_plaintext = hmp . get_encoding_for_binder_signing ; let handshake_hash = transcript . get_hash_given suite_hash , & binder_plaintext ; let key_schedule = KeyScheduleEarly :: new hkdf_alg , resuming . secret ; let real_binder = key_schedule . resumption_psk_binder_key_and_sign_verify_data & handshake_hash ; if let HandshakePayload :: ClientHello ref mut ch = hmp . payload { ch . set_psk_binder real_binder . as_ref ; } ; key_schedule } pub super fn prepare_resumption config : & ClientConfig , cx : & mut ClientContext < '_>,
    ticket: Vec<u8>,
    resuming_session: &persist::Retrieved<&persist::Tls13ClientSessionValue>,
    exts: &mut Vec<ClientExtension>,
    doing_retry: bool,
) {
    let resuming_suite = resuming_session.suite();
    cx.common.suite = Some(resuming_suite.into());
    cx.data.resumption_ciphersuite = Some(resuming_suite.into());
    // The EarlyData extension MUST be supplied together with the
    // PreSharedKey extension.
    let max_early_data_size = resuming_session.max_early_data_size();
    if config.enable_early_data && max_early_data_size > 0 && !doing_retry {
        cx.data
            .early_data
            .enable(max_early_data_size as usize);
        exts.push(ClientExtension::EarlyData);
    }

    // Finally, and only for TLS1.3 with a ticket resumption, include a binder
    // for our ticket.  This must go last.
    //
    // Include an empty binder. It gets filled in below because it depends on
    // the message it' s contained in ! ! ! . let obfuscated_ticket_age = resuming_session . obfuscated_ticket_age ; let binder_len = resuming_suite . hash_algorithm . output_len ; let binder = vec ! [ 0u8 ; binder_len ] ; let psk_identity = PresharedKeyIdentity :: new ticket , obfuscated_ticket_age ; let psk_ext = PresharedKeyOffer :: new psk_identity , binder ; exts . push ClientExtension :: PresharedKey psk_ext ; } pub super fn derive_early_traffic_secret key_log : & dyn KeyLog , cx : & mut ClientContext < '_>,
    resuming_suite: &' static Tls13CipherSuite , early_key_schedule : & KeyScheduleEarly , sent_tls13_fake_ccs : & mut bool , transcript_buffer : & HandshakeHashBuffer , client_random : & [ u8 ; 32 ] , { emit_fake_ccs sent_tls13_fake_ccs , cx . common ; let client_hello_hash = transcript_buffer . get_hash_given resuming_suite . hash_algorithm , & [ ] ; let client_early_traffic_secret = early_key_schedule . client_early_traffic_secret & client_hello_hash , key_log , client_random ; cx . common . record_layer . set_message_encrypter resuming_suite . derive_encrypter & client_early_traffic_secret ; #[cfg(feature = 'quic')] { cx . common . quic . early_secret = Some client_early_traffic_secret ; } cx . common . early_traffic = true ; trace ! 'Starting early data traffic' ; } pub super fn emit_fake_ccs sent_tls13_fake_ccs : & mut bool , common : & mut CommonState { if common . is_quic { return ; } if std :: mem :: replace sent_tls13_fake_ccs , true { return ; } let m = Message { version : ProtocolVersion :: TLSv1_2 , payload : MessagePayload :: ChangeCipherSpec ChangeCipherSpecPayload { } , } ; common . send_msg m , false ; } fn validate_encrypted_extensions common : & mut CommonState , hello : & ClientHelloDetails , exts : & EncryptedExtensions , -> Result < , Error > { if exts . has_duplicate_extension { common . send_fatal_alert AlertDescription :: DecodeError ; return Err Error :: PeerMisbehavedError 'server sent duplicate encrypted extensions' . to_string , ; } if hello . server_sent_unsolicited_extensions exts , & [ ] { common . send_fatal_alert AlertDescription :: UnsupportedExtension ; let msg = 'server sent unsolicited encrypted extension' . to_string ; return Err Error :: PeerMisbehavedError msg ; } for ext in exts { if ALLOWED_PLAINTEXT_EXTS . contains & ext . get_type || DISALLOWED_TLS13_EXTS . contains & ext . get_type { common . send_fatal_alert AlertDescription :: UnsupportedExtension ; let msg = 'server sent inappropriate encrypted extension' . to_string ; return Err Error :: PeerMisbehavedError msg ; } } Ok } struct ExpectEncryptedExtensions { config : Arc < ClientConfig > , resuming_session : Option < persist :: Tls13ClientSessionValue > , server_name : ServerName , randoms : ConnectionRandoms , suite : & 'static Tls13CipherSuite,
    transcript: HandshakeHash,
    key_schedule: KeyScheduleHandshake,
    hello: ClientHelloDetails,
}

impl State<ClientConnectionData> for ExpectEncryptedExtensions {
    fn handle(mut self: Box<Self>, cx: &mut ClientContext<' _ > , m : Message -> hs :: NextStateOrError { let exts = require_handshake_msg ! m , HandshakeType :: EncryptedExtensions , HandshakePayload :: EncryptedExtensions ? ; debug ! 'TLS1.3 encrypted extensions: {:?}' , exts ; self . transcript . add_message & m ; validate_encrypted_extensions cx . common , & self . hello , exts ? ; hs :: process_alpn_protocol cx . common , & self . config , exts . get_alpn_protocol ? ; #[cfg(feature = 'quic')] { if cx . common . is_quic { match exts . get_quic_params_extension { Some params => cx . common . quic . params = Some params , None => { return Err cx . common . missing_extension 'QUIC transport parameters not found' ; } } } } if let Some resuming_session = self . resuming_session { let was_early_traffic = cx . common . early_traffic ; if was_early_traffic { if exts . early_data_extension_offered { cx . data . early_data . accepted ; } else { cx . data . early_data . rejected ; cx . common . early_traffic = false ; } } if was_early_traffic && ! cx . common . early_traffic { cx . common . record_layer . set_message_encrypter self . suite . derive_encrypter self . key_schedule . client_key , ; } cx . common . peer_certificates = Some resuming_session . server_cert_chain . to_vec , ; let cert_verified = verify :: ServerCertVerified :: assertion ; let sig_verified = verify :: HandshakeSignatureValid :: assertion ; Ok Box :: new ExpectFinished { config : self . config , server_name : self . server_name , randoms : self . randoms , suite : self . suite , transcript : self . transcript , key_schedule : self . key_schedule , client_auth : None , cert_verified , sig_verified , } } else { if exts . early_data_extension_offered { let msg = 'server sent early data extension without resumption' . to_string ; return Err Error :: PeerMisbehavedError msg ; } Ok Box :: new ExpectCertificateOrCertReq { config : self . config , server_name : self . server_name , randoms : self . randoms , suite : self . suite , transcript : self . transcript , key_schedule : self . key_schedule , may_send_sct_list : self . hello . server_may_send_sct_list , } } } } struct ExpectCertificateOrCertReq { config : Arc < ClientConfig > , server_name : ServerName , randoms : ConnectionRandoms , suite : & 'static Tls13CipherSuite,
    transcript: HandshakeHash,
    key_schedule: KeyScheduleHandshake,
    may_send_sct_list: bool,
}

impl State<ClientConnectionData> for ExpectCertificateOrCertReq {
    fn handle(self: Box<Self>, cx: &mut ClientContext<' _ > , m : Message",60,516
30,3,163,3,33,"emit_certificate_tls13@750-782@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","emit_certificate_tls13","emit_certificate_tls13 transcript : & mut HandshakeHash , client_auth : & mut ClientAuthDetails , common : & mut CommonState ,",750,782
27,3,179,3,31,"emit_certverify_tls13@784-814@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","emit_certverify_tls13","emit_certverify_tls13 transcript : & mut HandshakeHash , client_auth : & mut ClientAuthDetails , common : & mut CommonState ,",784,814
16,1,96,3,18,"emit_finished_tls13@816-833@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","emit_finished_tls13","emit_finished_tls13 transcript : & mut HandshakeHash , verify_data : ring :: hmac :: Tag , common : & mut CommonState ,",816,833
14,2,80,2,16,"emit_end_of_early_data_tls13@835-850@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","emit_end_of_early_data_tls13","emit_end_of_early_data_tls13 transcript : & mut HandshakeHash , common : & mut CommonState",835,850
36,4,169,3,42,"handle_key_update@1041-1082@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","handle_key_update","handle_key_update & mut self , common : & mut CommonState , kur : & KeyUpdateRequest ,",1041,1082
70,3,65,1,70,"handle@1086-1155@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","handle","handle mut self : Box < Self > , cx : & mut ClientContext < '_>, m: Message) -> hs::NextStateOrError {
        match m.payload {
            MessagePayload::ApplicationData(payload) => cx
                .common
                .take_received_plaintext(payload),
            MessagePayload::Handshake(payload) => match payload.payload {
                HandshakePayload::NewSessionTicketTLS13(new_ticket) => {
                    self.handle_new_ticket_tls13(cx, &new_ticket)?
                }
                HandshakePayload::KeyUpdate(key_update) => {
                    self.handle_key_update(cx.common, &key_update)?
                }
                _ => {
                    return Err(inappropriate_handshake_message(
                        &payload,
                        &[HandshakeType::NewSessionTicket, HandshakeType::KeyUpdate],
                    ));
                }
            },
            _ => {
                return Err(inappropriate_message(
                    &m,
                    &[ContentType::ApplicationData, ContentType::Handshake],
                ));
            }
        }

        Ok(self)
    }

    fn export_keying_material(
        &self,
        output: &mut [u8],
        label: &[u8],
        context: Option<&[u8]>,
    ) -> Result<(), Error> {
        self.key_schedule
            .export_keying_material(output, label, context)
    }

    fn perhaps_write_key_update(&mut self, common: &mut CommonState) {
        if self.want_write_key_update {
            self.want_write_key_update = false;
            common.send_msg_encrypt(Message::build_key_update_notify().into());

            let write_key = self
                .key_schedule
                .next_client_application_traffic_secret();
            common
                .record_layer
                .set_message_encrypter(self.suite.derive_encrypter(&write_key));
        }
    }
}

#[cfg(feature = 'quic')]
struct ExpectQuicTraffic(ExpectTraffic);

#[cfg(feature = 'quic')]
impl State<ClientConnectionData> for ExpectQuicTraffic {
    fn handle(mut self: Box<Self>, cx: &mut ClientContext<' _ > , m : Message",1086,1155
9,1,54,1,9,"export_keying_material@1157-1165@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/tls13.rs","export_keying_material","export_keying_material & self , output : & mut [ u8 ] , label : & [ u8 ] , context : Option < & [ u8 ] > ,",1157,1165
14,1,64,2,14,"with_root_certificates@19-32@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/builder.rs","with_root_certificates","with_root_certificates self , root_store : anchors :: RootCertStore ,",19,32
14,1,68,1,14,"with_custom_certificate_verifier@36-49@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/builder.rs","with_custom_certificate_verifier","with_custom_certificate_verifier self , verifier : Arc < dyn verify :: ServerCertVerifier > ,",36,49
8,2,60,2,8,"with_single_cert@154-161@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/builder.rs","with_single_cert","with_single_cert self , cert_chain : Vec < key :: Certificate > , key_der : key :: PrivateKey ,",154,161
3,1,24,1,3,"with_no_client_auth@164-166@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/builder.rs","with_no_client_auth","with_no_client_auth self",164,166
19,1,101,1,19,"with_client_cert_resolver@169-187@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/builder.rs","with_client_cert_resolver","with_client_cert_resolver self , client_auth_cert_resolver : Arc < dyn ResolvesClientCert > ,",169,187
11,1,35,1,11,"new@18-28@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","new","new cert_chain : CertificatePayload , ocsp_response : Vec < u8 > , scts : Option < SCTList > ,",18,28
7,1,51,1,7,"scts@30-36@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","scts","scts & self",30,36
5,1,19,0,5,"new@44-48@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","new","new",44,48
4,1,21,1,4,"server_may_send_sct_list@50-53@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","server_may_send_sct_list","server_may_send_sct_list & self",50,53
15,4,74,1,16,"server_sent_unsolicited_extensions@55-70@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","server_sent_unsolicited_extensions","server_sent_unsolicited_extensions & self , received_exts : & [ ServerExtension ] , allowed_unsolicited : & [ ExtensionType ] ,",55,70
7,1,23,0,7,"new@80-86@crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/client/common.rs","new","new",80,86
6,1,62,1,6,"concat_sign@3-8@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","concat_sign","concat_sign key : & hmac :: Key , a : & [ u8 ] , b : & [ u8 ]",3,8
10,2,137,1,15,"p@10-24@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","p","p out : & mut [ u8 ] , alg : hmac :: Algorithm , secret : & [ u8 ] , seed : & [ u8 ]",10,24
6,1,49,0,6,"concat@26-31@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","concat","concat a : & [ u8 ] , b : & [ u8 ]",26,31
4,1,62,1,4,"prf@33-36@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","prf","prf out : & mut [ u8 ] , alg : hmac :: Algorithm , secret : & [ u8 ] , label : & [ u8 ] , seed : & [ u8 ]",33,36
10,1,92,0,11,"check_sha256@43-53@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","check_sha256","check_sha256",43,53
10,1,92,0,11,"check_sha512@56-66@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/prf.rs","check_sha512","check_sha512",56,66
3,1,26,2,3,"eq@197-199@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","eq","eq & self , other : & Self",197,199
73,1,195,7,79,"fmt@204-282@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","fmt","fmt & self , f : & mut fmt :: Formatter < '_>) -> fmt::Result {
        f.debug_struct('Tls12CipherSuite')
            .field('suite', &self.common.suite)
            .field('bulk', &self.common.bulk)
            .finish()
    }
}

/// TLS1.2 per-connection keying material
pub(crate) struct ConnectionSecrets {
    pub(crate) randoms: ConnectionRandoms,
    suite: &' static Tls12CipherSuite , pub crate master_secret : [ u8 ; 48 ] , } impl ConnectionSecrets { pub crate fn from_key_exchange kx : kx :: KeyExchange , peer_pub_key : & [ u8 ] , ems_seed : Option < Digest > , randoms : ConnectionRandoms , suite : & 'static Tls12CipherSuite,
    ) -> Result<Self, Error> {
        let mut ret = Self {
            randoms,
            suite,
            master_secret: [0u8; 48],
        };

        let (label, seed) = match ems_seed {
            Some(seed) => ('extended master secret', Seed::Ems(seed)),
            None => (
                'master secret',
                Seed::Randoms(join_randoms(&ret.randoms.client, &ret.randoms.server)),
            ),
        };

        kx.complete(peer_pub_key, |secret| {
            prf::prf(
                &mut ret.master_secret,
                suite.hmac_algorithm,
                secret,
                label.as_bytes(),
                seed.as_ref(),
            );
            Ok(())
        })?;

        Ok(ret)
    }

    pub(crate) fn new_resume(
        randoms: ConnectionRandoms,
        suite: &' static Tls12CipherSuite , master_secret : & [ u8 ] , -> Self { let mut ret = Self { randoms , suite , master_secret : [ 0u8 ; 48 ] , } ; ret . master_secret . copy_from_slice master_secret ; ret } pub crate fn make_cipher_pair & self -> MessageCipherPair { fn split_key < 'a>(
            key_block: &' a [ u8 ] , alg : & 'static aead::Algorithm,
        ) -> (aead::LessSafeKey, &' a [ u8 ]",204,282
17,1,121,1,23,"make_key_block@322-344@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","make_key_block","make_key_block & self",322,344
3,1,16,1,3,"suite@346-348@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","suite","suite & self",346,348
5,1,34,1,5,"get_master_secret@350-354@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","get_master_secret","get_master_secret & self",350,354
12,1,74,2,13,"make_verify_data@356-368@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","make_verify_data","make_verify_data & self , handshake_hash : & Digest , label : & [ u8 ]",356,368
3,1,27,2,3,"client_verify_data@370-372@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","client_verify_data","client_verify_data & self , handshake_hash : & Digest",370,372
3,1,27,2,3,"server_verify_data@374-376@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","server_verify_data","server_verify_data & self , handshake_hash : & Digest",374,376
22,2,137,1,23,"export_keying_material@378-400@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","export_keying_material","export_keying_material & self , output : & mut [ u8 ] , label : & [ u8 ] , context : Option < & [ u8 ] > ,",378,400
6,2,43,1,6,"as_ref@409-414@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","as_ref","as_ref & self",409,414
6,1,64,0,6,"join_randoms@417-422@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","join_randoms","join_randoms first : & [ u8 ; 32 ] , second : & [ u8 ; 32 ]",417,422
9,2,63,1,9,"decode_ecdh_params@426-434@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","decode_ecdh_params","decode_ecdh_params common : & mut CommonState , kx_params : & [ u8 ] ,",426,434
8,3,65,0,8,"decode_ecdh_params_@436-443@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","decode_ecdh_params_","decode_ecdh_params_ kx_params : & [ u8 ]",436,443
8,1,91,0,8,"server_ecdhe_remaining_bytes@451-458@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","server_ecdhe_remaining_bytes","server_ecdhe_remaining_bytes",451,458
3,1,26,0,3,"client_ecdhe_invalid@461-463@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/mod.rs","client_ecdhe_invalid","client_ecdhe_invalid",461,463
13,1,120,4,13,"make_tls12_aad@13-25@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","make_tls12_aad","make_tls12_aad seq : u64 , typ : ContentType , vers : ProtocolVersion , len : usize ,",13,25
9,1,72,2,10,"decrypter@30-39@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","decrypter","decrypter & self , dec_key : aead :: LessSafeKey , dec_iv : & [ u8 ]",30,39
13,1,111,2,22,"encrypter@41-62@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","encrypter","encrypter & self , enc_key : aead :: LessSafeKey , write_iv : & [ u8 ] , explicit : & [ u8 ] ,",41,62
6,1,46,2,6,"decrypter@68-73@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","decrypter","decrypter & self , dec_key : aead :: LessSafeKey , iv : & [ u8 ]",68,73
11,1,54,2,11,"encrypter@75-85@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","encrypter","encrypter & self , enc_key : aead :: LessSafeKey , enc_iv : & [ u8 ] , _ : & [ u8 ] ,",75,85
12,1,75,2,14,"decrypter@89-102@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","decrypter","decrypter & self , key : aead :: LessSafeKey , iv : & [ u8 ]",89,102
23,4,198,3,28,"decrypt@114-141@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","decrypt","decrypt & self , mut msg : OpaqueMessage , seq : u64",114,141
17,2,204,3,20,"encrypt@145-164@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","encrypt","encrypt & self , msg : BorrowedPlainMessage , seq : u64",145,164
23,4,151,3,28,"decrypt@186-213@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","decrypt","decrypt & self , mut msg : OpaqueMessage , seq : u64",186,213
15,2,163,3,18,"encrypt@217-234@crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/tls12/cipher.rs","encrypt","encrypt & self , msg : BorrowedPlainMessage , seq : u64",217,234
9,5,64,1,11,"complete_prior_io@33-43@crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","complete_prior_io","complete_prior_io & mut self",33,43
15,8,110,1,23,"read@52-74@crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","read","read & mut self , buf : & mut [ u8 ]",52,74
110,7,326,17,139,"read_buf@77-215@crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","read_buf","read_buf & mut self , buf : & mut std :: io :: ReadBuf < '_>) -> Result<()> {
        self.complete_prior_io()?;

        // We call complete_io() in a loop since a single call may read only
        // a partial packet from the underlying transport. A full packet is
        // needed to get more plaintext, which we must do if EOF has not been
        // hit. Otherwise, we will prematurely signal EOF by returning without
        // writing anything. We determine if EOF has actually been hit by
        // checking if 0 bytes were read from the underlying transport.
        while self.conn.wants_read() {
            let at_eof = self.conn.complete_io(self.sock)?.0 == 0;
            if at_eof {
                if let Ok(io_state) = self.conn.process_new_packets() {
                    if at_eof && io_state.plaintext_bytes_to_read() == 0 {
                        return Ok(());
                    }
                }
                break;
            }
        }

        self.conn.reader().read_buf(buf)
    }
}

impl<' a , C , T , S > Write for Stream < 'a, C, T>
where
    C: ' a + DerefMut + Deref < Target = ConnectionCommon < S > > , T : 'a + Read + Write,
    S: SideData,
{
    fn write(&mut self, buf: &[u8]) -> Result<usize> {
        self.complete_prior_io()?;

        let len = self.conn.writer().write(buf)?;

        // Try to write the underlying transport here, but don' t let let _ = self . conn . complete_io self . sock ; Ok len } fn write_vectored & mut self , bufs : & [ IoSlice < '_>]) -> Result<usize> {
        self.complete_prior_io()?;

        let len = self
            .conn
            .writer()
            .write_vectored(bufs)?;

        // Try to write the underlying transport here, but don' t let let _ = self . conn . complete_io self . sock ; Ok len } fn flush & mut self -> Result < > { self . complete_prior_io ? ; self . conn . writer . flush ? ; if self . conn . wants_write { self . conn . complete_io self . sock ? ; } Ok } } #[derive(Debug)] pub struct StreamOwned < C : Sized , T : Read + Write + Sized > { pub conn : C , pub sock : T , } impl < C , T , S > StreamOwned < C , T > where C : DerefMut + Deref < Target = ConnectionCommon < S > > , T : Read + Write , S : SideData , { pub fn new conn : C , sock : T -> Self { Self { conn , sock } } pub fn get_ref & self -> & T { & self . sock } pub fn get_mut & mut self -> & mut T { & mut self . sock } } impl < 'a, C, T, S> StreamOwned<C, T>
where
    C: DerefMut + Deref<Target = ConnectionCommon<S>>,
    T: Read + Write,
    S: SideData,
{
    fn as_stream(&' a mut self -> Stream < 'a, C, T> {
        Stream {
            conn: &mut self.conn,
            sock: &mut self.sock,
        }
    }
}

impl<C, T, S> Read for StreamOwned<C, T>
where
    C: DerefMut + Deref<Target = ConnectionCommon<S>>,
    T: Read + Write,
    S: SideData,
{
    fn read(&mut self, buf: &mut [u8]) -> Result<usize> {
        self.as_stream().read(buf)
    }

    #[cfg(feature = 'read_buf')]
    fn read_buf(&mut self, buf: &mut std::io::ReadBuf<' _ >",77,215
3,1,31,1,3,"write@224-226@crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","write","write & mut self , buf : & [ u8 ]",224,226
3,1,24,1,3,"flush@228-230@crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","flush","flush & mut self",228,230
3,1,17,0,3,"stream_can_be_created_for_connection_and_tcpstream@241-243@crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","stream_can_be_created_for_connection_and_tcpstream","stream_can_be_created_for_connection_and_tcpstream",241,243
3,1,16,0,3,"streamowned_can_be_created_for_client_and_tcpstream@246-248@crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","streamowned_can_be_created_for_client_and_tcpstream","streamowned_can_be_created_for_client_and_tcpstream",246,248
3,1,16,0,3,"streamowned_can_be_created_for_server_and_tcpstream@251-253@crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/stream.rs","streamowned_can_be_created_for_server_and_tcpstream","streamowned_can_be_created_for_server_and_tcpstream",251,253
3,1,17,1,3,"as_ref@22-24@crypto_codebases/rustls/rustls_2022/ccn_lib/src/key.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/key.rs","as_ref","as_ref & self",22,24
6,1,49,2,6,"fmt@28-33@crypto_codebases/rustls/rustls_2022/ccn_lib/src/key.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/key.rs","fmt","fmt & self , f : & mut fmt :: Formatter",28,33
6,1,28,0,6,"certificate_debug@41-46@crypto_codebases/rustls/rustls_2022/ccn_lib/src/key.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/key.rs","certificate_debug","certificate_debug",41,46
6,1,23,0,6,"new@18-23@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","new","new",18,23
3,1,15,1,3,"set_client_auth_enabled@27-29@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","set_client_auth_enabled","set_client_auth_enabled & mut self",27,29
6,2,43,2,6,"add_message@32-37@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","add_message","add_message & mut self , m : & Message",32,37
3,1,25,1,3,"update_raw@41-43@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","update_raw","update_raw & mut self , buf : & [ u8 ]",41,43
23,2,69,2,23,"get_hash_given@46-68@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","get_hash_given","get_hash_given & self , hash : & 'static digest::Algorithm,
        extra: &[u8],
    ) -> digest::Digest {
        let mut ctx = digest::Context::new(hash);
        ctx.update(&self.buffer);
        ctx.update(extra);
        ctx.finish()
    }

    /// We now know what hash function the verify_data will use.
    pub(crate) fn start_hash(self, alg: &' static digest :: Algorithm",46,68
3,1,15,1,3,"abandon_client_auth@89-91@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","abandon_client_auth","abandon_client_auth & mut self",89,91
7,2,51,2,7,"add_message@94-100@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","add_message","add_message & mut self , m : & Message",94,100
7,2,51,1,9,"update_raw@103-111@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","update_raw","update_raw & mut self , buf : & [ u8 ]",103,111
5,1,43,1,5,"get_hash_given@115-119@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","get_hash_given","get_hash_given & self , extra : & [ u8 ]",115,119
9,1,55,1,10,"into_hrr_buffer@121-130@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","into_hrr_buffer","into_hrr_buffer self",121,130
8,1,76,1,10,"rollup_for_hrr@135-144@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","rollup_for_hrr","rollup_for_hrr & mut self",135,144
3,1,23,1,3,"get_current_hash@147-149@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","get_current_hash","get_current_hash & self",147,149
3,1,24,1,3,"take_handshake_buf@155-157@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","take_handshake_buf","take_handshake_buf & mut self",155,157
3,1,22,1,3,"algorithm@160-162@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","algorithm","algorithm & self",160,162
14,1,134,0,14,"hashes_correctly@171-184@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","hashes_correctly","hashes_correctly",171,184
28,1,211,0,28,"buffers_correctly@188-215@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","buffers_correctly","buffers_correctly",188,215
23,1,183,0,23,"abandon@218-240@crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/hash_hs.rs","abandon","abandon",218,240
3,1,15,1,3,"group@42-44@crypto_codebases/rustls/rustls_2022/ccn_lib/src/kx.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/kx.rs","group","group & self",42,44
9,1,100,2,9,"complete@50-58@crypto_codebases/rustls/rustls_2022/ccn_lib/src/kx.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/kx.rs","complete","complete self , peer : & [ u8 ] , f : impl FnOnce & [ u8 ] -> Result < T , > ,",50,58
15,5,112,1,17,"check_message@51-67@crypto_codebases/rustls/rustls_2022/ccn_lib/src/check.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/check.rs","check_message","check_message m : & Message , content_types : & [ ContentType ] , handshake_types : & [ HandshakeType ] ,",51,67
11,1,58,1,11,"inappropriate_message@69-79@crypto_codebases/rustls/rustls_2022/ccn_lib/src/check.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/check.rs","inappropriate_message","inappropriate_message m : & Message , content_types : & [ ContentType ]",69,79
13,1,51,1,13,"inappropriate_handshake_message@81-93@crypto_codebases/rustls/rustls_2022/ccn_lib/src/check.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/check.rs","inappropriate_handshake_message","inappropriate_handshake_message hsp : & HandshakeMessagePayload , handshake_types : & [ HandshakeType ] ,",81,93
7,1,56,0,7,"join@102-108@crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","join","join items : & [ T ]",102,108
55,2,387,2,55,"fmt@111-165@crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","fmt","fmt & self , f : & mut fmt :: Formatter",111,165
3,1,14,1,3,"from@170-172@crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","from","from _ : SystemTimeError",170,172
3,1,16,1,3,"from@178-180@crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","from","from _ : rand :: GetRandomFailed",178,180
37,2,223,0,39,"smoke@188-226@crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","smoke","smoke",188,226
5,1,34,0,5,"rand_error_mapping@229-233@crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","rand_error_mapping","rand_error_mapping",229,233
8,1,54,0,9,"time_error_mapping@236-244@crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/error.rs","time_error_mapping","time_error_mapping",236,244
6,1,32,1,6,"new@26-31@crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","new","new capacity_order_of_magnitude : usize",26,31
19,5,132,3,23,"insert@33-55@crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","insert","insert & mut self , k : K , v : V",33,55
7,3,47,2,7,"get@57-63@crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","get","get & self , k : & Q",57,63
18,5,103,2,19,"remove@65-83@crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","remove","remove & mut self , k : & Q",65,83
6,1,60,0,6,"test_updates_existing_item@91-96@crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","test_updates_existing_item","test_updates_existing_item",91,96
9,1,103,0,10,"test_evicts_oldest_item@99-108@crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","test_evicts_oldest_item","test_evicts_oldest_item",99,108
12,1,145,0,15,"test_evicts_second_oldest_item_if_first_removed@111-125@crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","test_evicts_second_oldest_item_if_first_removed","test_evicts_second_oldest_item_if_first_removed",111,125
13,1,162,0,16,"test_evicts_after_second_oldest_item_removed@128-143@crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","test_evicts_after_second_oldest_item_removed","test_evicts_after_second_oldest_item_removed",128,143
15,1,187,0,18,"test_removes_all_items@146-163@crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","test_removes_all_items","test_removes_all_items",146,163
8,2,65,0,9,"test_inserts_many_items@166-174@crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/limited_cache.rs","test_inserts_many_items","test_inserts_many_items",166,174
5,1,28,1,5,"next_packet_keys@42-46@crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","next_packet_keys","next_packet_keys & mut self",42,46
5,1,60,1,5,"update@48-52@crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","update","update & mut self",48,52
7,2,51,1,7,"local_remote@54-60@crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","local_remote","local_remote & self",54,60
10,1,100,1,28,"quic_transport_parameters@72-99@crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","quic_transport_parameters","quic_transport_parameters & self",72,99
20,2,82,2,21,"new@102-122@crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","new","new suite : & 'static Tls13CipherSuite, secret: &hkdf::Prk) -> Self {
        Self {
            header: HeaderProtectionKey::new(suite, secret),
            packet: PacketKey::new(suite, secret),
        }
    }
}

/// A QUIC header protection key
pub struct HeaderProtectionKey(aead::quic::HeaderProtectionKey);

impl HeaderProtectionKey {
    fn new(suite: &' static Tls13CipherSuite , secret : & hkdf :: Prk",102,122
8,1,50,2,8,"encrypt_in_place@145-152@crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","encrypt_in_place","encrypt_in_place & self , sample : & [ u8 ] , first : & mut u8 , packet_number : & mut [ u8 ] ,",145,152
8,1,50,2,8,"decrypt_in_place@176-183@crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","decrypt_in_place","decrypt_in_place & self , sample : & [ u8 ] , first : & mut u8 , packet_number : & mut [ u8 ] ,",176,183
35,6,226,3,52,"xor_in_place@185-236@crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","xor_in_place","xor_in_place & self , sample : & [ u8 ] , first : & mut u8 , packet_number : & mut [ u8 ] , masked : bool ,",185,236
3,1,21,1,3,"sample_len@240-242@crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","sample_len","sample_len & self",240,242
14,2,94,2,14,"encrypt_in_place@276-289@crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/quic.rs","encrypt_in_place","encrypt_in_place & self , packet_number : u64 , header : & [ u8 ] , payload : & mut [ u8 ] ,",276,289
15,3,95,0,16,"wrap_in_asn1_len@5-20@crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","wrap_in_asn1_len","wrap_in_asn1_len bytes : & mut Vec < u8 >",5,20
4,1,34,0,4,"wrap_in_sequence@23-26@crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","wrap_in_sequence","wrap_in_sequence bytes : & mut Vec < u8 >",23,26
5,1,37,0,5,"test_empty@29-33@crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","test_empty","test_empty",29,33
9,1,81,0,9,"test_small@36-44@crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","test_small","test_small",36,44
6,1,63,0,6,"test_medium@47-52@crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","test_medium","test_medium",47,52
6,1,63,0,6,"test_large@55-60@crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","test_large","test_large",55,60
7,1,77,0,7,"test_huge@63-69@crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","test_huge","test_huge",63,69
10,1,79,0,10,"test_gigantic@72-81@crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","test_gigantic","test_gigantic",72,81
10,1,81,0,10,"test_ludicrous@84-93@crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/x509.rs","test_ludicrous","test_ludicrous",84,93
5,2,37,0,5,"now@19-23@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","now","now",19,23
3,1,17,1,3,"as_secs@26-28@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","as_secs","as_secs & self",26,28
16,4,103,1,16,"new@130-145@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","new","new lifetime : u32 , generator : fn -> Result < Box < dyn ProducesTickets > , rand :: GetRandomFailed > ,",130,145
31,10,269,2,70,"maybe_roll@156-225@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","maybe_roll","maybe_roll & self , now : TimeBase",156,225
3,1,15,1,3,"lifetime@229-231@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","lifetime","lifetime & self",229,231
3,1,11,1,3,"enabled@233-235@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","enabled","enabled & self",233,235
4,3,51,1,5,"encrypt@237-241@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","encrypt","encrypt & self , message : & [ u8 ]",237,241
12,4,78,1,14,"decrypt@243-256@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","decrypt","decrypt & self , ciphertext : & [ u8 ]",243,256
3,2,33,0,3,"generate_inner@262-264@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","generate_inner","generate_inner",262,264
3,2,38,0,3,"new@271-273@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","new","new",271,273
7,1,68,0,7,"basic_pairwise_test@277-283@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","basic_pairwise_test","basic_pairwise_test",277,283
19,1,246,0,21,"ticketswitcher_switching_test@286-306@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","ticketswitcher_switching_test","ticketswitcher_switching_test",286,306
3,1,25,0,3,"fail_generator@309-311@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","fail_generator","fail_generator",309,311
21,1,254,0,23,"ticketswitcher_recover_test@314-336@crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/ticketer.rs","ticketswitcher_recover_test","ticketswitcher_recover_test",314,336
22,18,194,2,24,"fmt@16-39@crypto_codebases/rustls/rustls_2022/ccn_lib/src/bs_debug.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/bs_debug.rs","fmt","fmt & self , fmt : & mut fmt :: Formatter",16,39
28,1,58,0,30,"debug@47-76@crypto_codebases/rustls/rustls_2022/ccn_lib/src/bs_debug.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/bs_debug.rs","debug","debug",47,76
3,1,15,0,3,"assertion@48-50@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","assertion","assertion",48,50
3,1,15,0,3,"assertion@56-58@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","assertion","assertion",56,58
3,1,15,0,3,"assertion@68-70@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","assertion","assertion",68,70
3,1,15,0,3,"assertion@77-79@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","assertion","assertion",77,79
17,1,99,5,37,"verify_server_cert@95-131@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","verify_server_cert","verify_server_cert & self , end_entity : & Certificate , intermediates : & [ Certificate ] , server_name : & ServerName , scts : & mut dyn Iterator < Item = & [ u8 ] > , ocsp_response : & [ u8 ] , now : SystemTime ,",95,131
8,1,41,3,8,"verify_tls13_signature@144-151@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","verify_tls13_signature","verify_tls13_signature & self , message : & [ u8 ] , cert : & Certificate , dss : & DigitallySignedStruct ,",144,151
3,1,18,1,3,"supported_verify_schemes@160-162@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","supported_verify_schemes","supported_verify_schemes & self",160,162
3,1,11,1,3,"request_scts@170-172@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","request_scts","request_scts & self",170,172
3,1,24,1,3,"as_ref@180-182@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","as_ref","as_ref & self",180,182
3,1,11,1,3,"offer_client_auth@190-192@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","offer_client_auth","offer_client_auth & self",190,192
3,1,21,1,3,"client_auth_mandatory@197-199@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","client_auth_mandatory","client_auth_mandatory & self",197,199
15,1,84,1,42,"client_auth_root_subjects@206-247@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","client_auth_root_subjects","client_auth_root_subjects & self",206,247
8,1,41,3,8,"verify_tls13_signature@260-267@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","verify_tls13_signature","verify_tls13_signature & self , message : & [ u8 ] , cert : & Certificate , dss : & DigitallySignedStruct ,",260,267
3,1,18,1,3,"supported_verify_schemes@276-278@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","supported_verify_schemes","supported_verify_schemes & self",276,278
31,7,228,5,36,"verify_server_cert@286-321@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","verify_server_cert","verify_server_cert & self , end_entity : & Certificate , intermediates : & [ Certificate ] , server_name : & ServerName , scts : & mut dyn Iterator < Item = & [ u8 ] > , ocsp_response : & [ u8 ] , now : SystemTime ,",286,321
3,1,24,1,3,"new@340-342@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","new","new roots : RootCertStore , ct_policy : Option < CertificateTransparencyPolicy >",340,342
13,1,51,0,13,"verification_schemes@346-358@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","verification_schemes","verification_schemes",346,358
43,8,240,4,48,"verify@387-434@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","verify","verify & self , cert : & Certificate , now : SystemTime , scts : & mut dyn Iterator < Item = & [ u8 ] > ,",387,434
11,3,98,2,12,"verify_signed_struct@654-665@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","verify_signed_struct","verify_signed_struct message : & [ u8 ] , cert : & Certificate , dss : & DigitallySignedStruct ,",654,665
17,2,121,1,18,"convert_alg_tls13@667-684@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","convert_alg_tls13","convert_alg_tls13 scheme : SignatureScheme ,",667,684
3,1,22,1,3,"construct_tls13_client_verify_message@687-689@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","construct_tls13_client_verify_message","construct_tls13_client_verify_message handshake_hash : & Digest",687,689
3,1,22,1,3,"construct_tls13_server_verify_message@692-694@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","construct_tls13_server_verify_message","construct_tls13_server_verify_message handshake_hash : & Digest",692,694
10,1,61,1,10,"construct_tls13_verify_message@696-705@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","construct_tls13_verify_message","construct_tls13_verify_message handshake_hash : & Digest , context_string_with_0 : & [ u8 ] ,",696,705
11,3,97,2,13,"verify_tls13@707-719@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","verify_tls13","verify_tls13 msg : & [ u8 ] , cert : & Certificate , dss : & DigitallySignedStruct ,",707,719
9,1,70,1,9,"unix_time_millis@721-729@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verify.rs","unix_time_millis","unix_time_millis now : SystemTime",721,729
4,1,42,2,10,"log@44-53@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","log","log & self , label : & str , client_random : & [ u8 ] , secret : & [ u8 ]",44,53
1,1,27,2,1,"log@60-60@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","log","log & self , _ : & str , _ : & [ u8 ] , _ : & [ u8 ]",60,60
3,1,16,2,3,"will_log@62-64@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","will_log","will_log & self , _label : & str",62,64
12,2,93,1,13,"new@75-87@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","new","new var : Result < String , env :: VarError >",75,87
30,11,233,2,32,"try_write@89-120@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","try_write","try_write & mut self , label : & str , client_random : & [ u8 ] , secret : & [ u8 ]",89,120
4,1,32,0,4,"new@136-139@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","new","new",136,139
14,2,74,2,14,"log@143-156@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","log","log & self , label : & str , client_random : & [ u8 ] , secret : & [ u8 ]",143,156
5,1,24,0,5,"init@163-167@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","init","init",163,167
9,1,57,0,9,"test_env_var_is_not_unicode@170-178@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","test_env_var_is_not_unicode","test_env_var_is_not_unicode",170,178
7,1,49,0,7,"test_env_var_is_not_set@181-187@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","test_env_var_is_not_set","test_env_var_is_not_set",181,187
7,1,49,0,7,"test_env_var_cannot_be_opened@190-196@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","test_env_var_cannot_be_opened","test_env_var_cannot_be_opened",190,196
7,1,49,0,7,"test_env_var_cannot_be_written@199-205@crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/keylog.rs","test_env_var_cannot_be_written","test_env_var_cannot_be_written",199,205
6,2,59,2,6,"read_tls@42-47@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","read_tls","read_tls & mut self , rd : & mut dyn io :: Read",42,47
6,2,41,1,6,"reader@50-55@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","reader","reader & mut self",50,55
6,2,49,1,6,"writer@58-63@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","writer","writer & mut self",58,63
6,2,46,1,6,"process_new_packets@68-73@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","process_new_packets","process_new_packets & mut self",68,73
11,2,82,1,11,"export_keying_material@78-88@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","export_keying_material","export_keying_material & self , output : & mut [ u8 ] , label : & [ u8 ] , context : Option < & [ u8 ] > ,",78,88
10,3,78,2,10,"complete_io@93-102@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","complete_io","complete_io & mut self , io : & mut T",93,102
6,2,46,1,6,"quic_transport_parameters@107-112@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","quic_transport_parameters","quic_transport_parameters & self",107,112
6,2,45,1,6,"zero_rtt_keys@114-119@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","zero_rtt_keys","zero_rtt_keys & self",114,119
6,2,56,1,6,"read_hs@121-126@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","read_hs","read_hs & mut self , plaintext : & [ u8 ]",121,126
6,2,61,1,6,"write_hs@128-133@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","write_hs","write_hs & mut self , buf : & mut Vec < u8 >",128,133
6,2,43,1,6,"alert@135-140@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","alert","alert & self",135,140
6,2,41,1,6,"deref@146-151@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","deref","deref & self",146,151
6,2,45,1,6,"deref_mut@155-160@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","deref_mut","deref_mut & mut self",155,160
3,1,13,1,3,"tls_bytes_to_write@175-177@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","tls_bytes_to_write","tls_bytes_to_write & self",175,177
3,1,13,1,3,"plaintext_bytes_to_read@181-183@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","plaintext_bytes_to_read","plaintext_bytes_to_read & self",181,183
3,1,13,1,3,"peer_has_closed@193-195@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","peer_has_closed","peer_has_closed & self",193,195
11,5,114,1,18,"read@226-243@crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/conn.rs","read","read & mut self , buf : & mut [ u8 ]",226,243
16,3,78,0,18,"new@50-67@crypto_codebases/rustls/rustls_2022/ccn_lib/src/versions.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/versions.rs","new","new versions : & [ & ' static SupportedProtocolVersion ]",50,67
8,2,47,2,8,"contains@69-76@crypto_codebases/rustls/rustls_2022/ccn_lib/src/versions.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/versions.rs","contains","contains & self , version : ProtocolVersion",69,76
10,1,81,1,25,"sign@27-51@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","sign","sign & self , message : & [ u8 ]",27,51
8,1,39,0,8,"new@58-65@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","new","new cert : Vec < key :: Certificate > , key : Arc < dyn SigningKey >",58,65
3,1,35,1,3,"end_entity_cert@68-70@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","end_entity_cert","end_entity_cert & self",68,70
31,5,140,1,41,"cross_check_end_entity_cert@80-120@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","cross_check_end_entity_cert","cross_check_end_entity_cert & self , name : Option < webpki :: DnsNameRef > ,",80,120
9,3,72,1,9,"any_supported_type@125-133@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","any_supported_type","any_supported_type der : & key :: PrivateKey",125,133
17,3,103,1,19,"any_ecdsa_type@136-154@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","any_ecdsa_type","any_ecdsa_type der : & key :: PrivateKey",136,154
6,2,61,1,9,"any_eddsa_type@157-165@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","any_eddsa_type","any_eddsa_type der : & key :: PrivateKey",157,165
6,1,74,1,6,"new@184-189@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","new","new der : & key :: PrivateKey",184,189
6,1,66,1,6,"choose_scheme@193-198@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","choose_scheme","choose_scheme & self , offered : & [ SignatureScheme ]",193,198
3,1,13,1,3,"algorithm@200-202@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","algorithm","algorithm & self",200,202
10,2,69,1,10,"choose_scheme@286-295@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","choose_scheme","choose_scheme & self , offered : & [ SignatureScheme ]",286,295
4,1,26,1,4,"algorithm@297-300@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","algorithm","algorithm & self",297,300
7,1,82,1,7,"sign@309-315@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","sign","sign & self , message : & [ u8 ]",309,315
3,1,13,1,3,"scheme@317-319@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","scheme","scheme & self",317,319
8,1,65,2,8,"new@341-348@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","new","new der : & key :: PrivateKey , scheme : SignatureScheme",341,348
10,2,69,1,10,"choose_scheme@352-361@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","choose_scheme","choose_scheme & self , offered : & [ SignatureScheme ]",352,361
4,1,26,1,4,"algorithm@363-366@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","algorithm","algorithm & self",363,366
3,1,44,1,3,"sign@375-377@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","sign","sign & self , message : & [ u8 ]",375,377
3,1,13,1,3,"scheme@379-381@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","scheme","scheme & self",379,381
10,1,40,0,10,"supported_sign_tls13@386-395@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","supported_sign_tls13","supported_sign_tls13",386,395
3,1,26,2,3,"fmt@402-404@crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/sign.rs","fmt","fmt & self , f : & mut fmt :: Formatter",402,404
10,1,53,0,10,"new@30-39@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","new","new",30,39
3,1,17,1,3,"is_encrypting@41-43@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","is_encrypting","is_encrypting & self",41,43
3,1,17,1,3,"is_decrypting@45-47@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","is_decrypting","is_decrypting & self",45,47
5,1,37,1,5,"prepare_message_encrypter@51-55@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","prepare_message_encrypter","prepare_message_encrypter & mut self , cipher : Box < dyn MessageEncrypter >",51,55
5,1,37,1,5,"prepare_message_decrypter@59-63@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","prepare_message_decrypter","prepare_message_decrypter & mut self , cipher : Box < dyn MessageDecrypter >",59,63
4,1,29,1,4,"start_encrypting@67-70@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","start_encrypting","start_encrypting & mut self",67,70
4,1,29,1,4,"start_decrypting@74-77@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","start_decrypting","start_decrypting & mut self",74,77
4,1,30,1,4,"set_message_encrypter@81-84@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","set_message_encrypter","set_message_encrypter & mut self , cipher : Box < dyn MessageEncrypter >",81,84
4,1,30,1,4,"set_message_decrypter@88-91@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","set_message_decrypter","set_message_decrypter & mut self , cipher : Box < dyn MessageDecrypter >",88,91
3,1,15,1,3,"wants_close_before_decrypt@101-103@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","wants_close_before_decrypt","wants_close_before_decrypt & self",101,103
3,1,15,1,3,"wants_close_before_encrypt@107-109@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","wants_close_before_encrypt","wants_close_before_encrypt & self",107,109
3,1,15,1,3,"encrypt_exhausted@113-115@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","encrypt_exhausted","encrypt_exhausted & self",113,115
7,1,55,2,7,"decrypt_incoming@122-128@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","decrypt_incoming","decrypt_incoming & mut self , encr : OpaqueMessage",122,128
9,1,65,2,9,"encrypt_outgoing@134-142@crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/record_layer.rs","encrypt_outgoing","encrypt_outgoing & mut self , plain : BorrowedPlainMessage",134,142
6,1,27,0,6,"new@16-21@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","new","new limit : Option < usize >",16,21
3,1,22,1,3,"set_limit@30-32@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","set_limit","set_limit & mut self , new_limit : Option < usize >",30,32
3,1,17,1,3,"is_empty@35-37@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","is_empty","is_empty & self",35,37
7,2,34,1,7,"len@40-46@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","len","len & self",40,46
8,2,52,2,8,"apply_limit@51-58@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","apply_limit","apply_limit & self , len : usize",51,58
5,1,49,1,5,"append_limited_copy@62-66@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","append_limited_copy","append_limited_copy & mut self , bytes : & [ u8 ]",62,66
7,2,46,1,9,"append@69-77@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","append","append & mut self , bytes : Vec < u8 >",69,77
3,1,24,1,3,"pop@81-83@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","pop","pop & mut self",81,83
11,4,89,1,14,"read@87-100@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","read","read & mut self , buf : & mut [ u8 ]",87,100
9,3,107,1,10,"read_buf@104-113@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","read_buf","read_buf & mut self , buf : & mut io :: ReadBuf < ' _ >",104,113
11,3,68,2,11,"consume@115-125@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","consume","consume & mut self , mut used : usize",115,125
13,4,145,2,14,"write_to@128-141@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","write_to","write_to & mut self , wr : & mut dyn io :: Write",128,141
10,1,122,0,11,"short_append_copy_with_limit@149-159@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","short_append_copy_with_limit","short_append_copy_with_limit",149,159
27,1,271,0,31,"read_buf@163-193@crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/vecbuf.rs","read_buf","read_buf",163,193
3,1,20,0,3,"invalid@20-22@crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","invalid","invalid",20,22
5,1,33,3,8,"encrypt@16-23@crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","encrypt","encrypt & self , m : BorrowedPlainMessage , seq : u64",16,23
3,1,20,0,3,"invalid@26-28@crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","invalid","invalid",26,28
3,1,23,0,3,"new@37-39@crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","new","new value : [ u8 ; ring :: aead :: NONCE_LEN ]",37,39
6,1,55,0,6,"copy@42-47@crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","copy","copy value : & [ u8 ]",42,47
3,1,19,1,3,"value@50-52@crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","value","value & self",50,52
3,1,13,1,3,"len@58-60@crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","len","len & self",58,60
3,1,36,3,3,"encrypt@89-91@crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","encrypt","encrypt & self , _m : BorrowedPlainMessage , _seq : u64",89,91
3,1,29,3,3,"decrypt@98-100@crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/cipher.rs","decrypt","decrypt & self , _m : OpaqueMessage , _seq : u64",98,100
3,1,17,1,3,"suite@73-75@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","suite","suite & self",73,75
7,2,40,1,7,"common@77-83@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","common","common & self",77,83
16,2,40,1,16,"tls13@85-100@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","tls13","tls13 & self",85,100
10,2,57,2,10,"usable_for_signature_algorithm@104-113@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","usable_for_signature_algorithm","usable_for_signature_algorithm & self , _sig_alg : SignatureAlgorithm",104,113
14,3,68,0,15,"choose_ciphersuite_preferring_client@144-158@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","choose_ciphersuite_preferring_client","choose_ciphersuite_preferring_client client_suites : & [ CipherSuite ] , server_suites : & [ SupportedCipherSuite ] ,",144,158
12,2,65,0,13,"choose_ciphersuite_preferring_server@160-172@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","choose_ciphersuite_preferring_server","choose_ciphersuite_preferring_server client_suites : & [ CipherSuite ] , server_suites : & [ SupportedCipherSuite ] ,",160,172
9,2,49,1,9,"reduce_given_sigalg@176-184@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","reduce_given_sigalg","reduce_given_sigalg all : & [ SupportedCipherSuite ] , sigalg : SignatureAlgorithm ,",176,184
9,2,52,1,9,"reduce_given_version@188-196@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","reduce_given_version","reduce_given_version all : & [ SupportedCipherSuite ] , version : ProtocolVersion ,",188,196
9,1,47,1,9,"compatible_sigscheme_for_suites@199-207@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","compatible_sigscheme_for_suites","compatible_sigscheme_for_suites sigscheme : SignatureScheme , common_suites : & [ SupportedCipherSuite ] ,",199,207
10,1,67,0,10,"test_client_pref@215-224@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","test_client_pref","test_client_pref",215,224
10,1,67,0,10,"test_server_pref@227-236@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","test_server_pref","test_server_pref",227,236
12,1,46,0,12,"test_pref_fails@239-250@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","test_pref_fails","test_pref_fails",239,250
3,1,14,0,3,"test_scs_is_debug@253-255@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","test_scs_is_debug","test_scs_is_debug",253,255
12,1,60,0,12,"test_can_resume_to@258-269@crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/suites.rs","test_can_resume_to","test_can_resume_to",258,269
5,1,39,0,5,"fill_random@8-12@crypto_codebases/rustls/rustls_2022/ccn_lib/src/rand.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/rand.rs","fill_random","fill_random bytes : & mut [ u8 ]",8,12
5,2,43,1,5,"random_vec@16-20@crypto_codebases/rustls/rustls_2022/ccn_lib/src/rand.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/rand.rs","random_vec","random_vec len : usize",16,20
5,2,43,0,5,"random_u32@23-27@crypto_codebases/rustls/rustls_2022/ccn_lib/src/rand.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/rand.rs","random_u32","random_u32",23,27
83,1,60,1,83,"fmt@103-185@crypto_codebases/rustls/rustls_2022/ccn_lib/src/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/builder.rs","fmt","fmt & self , f : & mut fmt :: Formatter < '_>) -> fmt::Result {
        f.debug_struct('ConfigBuilder')
            .field('side', &format_args!('{}', &std::any::type_name::<Side>()))
            .field(
                'state',
                &format_args!('{}', &std::any::type_name::<State>()),
            )
            .finish()
    }
}

/// Config builder state where the caller must supply cipher suites.
///
/// For more information, see the [`ConfigBuilder`] documentation.
#[derive(Clone)]
pub struct WantsCipherSuites(pub(crate) ());

impl<S: ConfigSide> ConfigBuilder<S, WantsCipherSuites> {
    /// Start side-specific config with defaults for underlying cryptography.
    ///
    /// If used, this will enable all safe supported cipher suites ([`DEFAULT_CIPHER_SUITES`]), all
    /// safe supported key exchange groups ([`ALL_KX_GROUPS`]) and all safe supported protocol
    /// versions ([`DEFAULT_VERSIONS`]).
    ///
    /// These are safe defaults, useful for 99% of applications.
    ///
    /// [`DEFAULT_VERSIONS`]: versions::DEFAULT_VERSIONS
    pub fn with_safe_defaults(self) -> ConfigBuilder<S, WantsVerifier> {
        ConfigBuilder {
            state: WantsVerifier {
                cipher_suites: DEFAULT_CIPHER_SUITES.to_vec(),
                kx_groups: ALL_KX_GROUPS.to_vec(),
                versions: versions::EnabledVersions::new(versions::DEFAULT_VERSIONS),
            },
            side: self.side,
        }
    }

    /// Choose a specific set of cipher suites.
    pub fn with_cipher_suites(
        self,
        cipher_suites: &[SupportedCipherSuite],
    ) -> ConfigBuilder<S, WantsKxGroups> {
        ConfigBuilder {
            state: WantsKxGroups {
                cipher_suites: cipher_suites.to_vec(),
            },
            side: self.side,
        }
    }

    /// Choose the default set of cipher suites ([`DEFAULT_CIPHER_SUITES`]).
    ///
    /// Note that this default provides only high-quality suites: there is no need
    /// to filter out low-, export- or NULL-strength cipher suites: rustls does not
    /// implement these.
    pub fn with_safe_default_cipher_suites(self) -> ConfigBuilder<S, WantsKxGroups> {
        self.with_cipher_suites(DEFAULT_CIPHER_SUITES)
    }
}

/// Config builder state where the caller must supply key exchange groups.
///
/// For more information, see the [`ConfigBuilder`] documentation.
#[derive(Clone)]
pub struct WantsKxGroups {
    cipher_suites: Vec<SupportedCipherSuite>,
}

impl<S: ConfigSide> ConfigBuilder<S, WantsKxGroups> {
    /// Choose a specific set of key exchange groups.
    pub fn with_kx_groups(
        self,
        kx_groups: &[&' static SupportedKxGroup ] ,",103,185
3,1,21,1,3,"with_safe_default_kx_groups@190-192@crypto_codebases/rustls/rustls_2022/ccn_lib/src/builder.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/builder.rs","with_safe_default_kx_groups","with_safe_default_kx_groups self",190,192
7,1,41,1,7,"to_trust_anchor@17-23@crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","to_trust_anchor","to_trust_anchor & self",17,23
11,1,79,0,11,"from_subject_spki_name_constraints@33-43@crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","from_subject_spki_name_constraints","from_subject_spki_name_constraints subject : impl Into < Vec < u8 > > , spki : impl Into < Vec < u8 > > , name_constraints : Option < impl Into < Vec < u8 > > > ,",33,43
3,1,18,0,3,"empty@56-58@crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","empty","empty",56,58
3,1,17,1,3,"is_empty@61-63@crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","is_empty","is_empty & self",61,63
3,1,17,1,3,"len@66-68@crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","len","len & self",66,68
10,2,71,1,12,"subjects@71-82@crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","subjects","subjects & self",71,82
10,2,77,2,10,"add@85-94@crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","add","add & mut self , der : & key :: Certificate",85,94
6,1,28,2,6,"add_server_trust_anchors@98-103@crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","add_server_trust_anchors","add_server_trust_anchors & mut self , trust_anchors : impl Iterator < Item = OwnedTrustAnchor > ,",98,103
20,3,113,1,23,"add_parsable_certificates@112-134@crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/anchors.rs","add_parsable_certificates","add_parsable_certificates & mut self , der_certs : & [ Vec < u8 > ]",112,134
3,1,36,1,3,"duration_nanos@17-19@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","duration_nanos","duration_nanos d : Duration",17,19
11,1,36,0,11,"test_reddit_cert@22-32@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_reddit_cert","test_reddit_cert",22,32
11,1,36,0,11,"test_github_cert@35-45@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_github_cert","test_github_cert",35,45
13,1,48,0,13,"test_arstechnica_cert@48-60@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_arstechnica_cert","test_arstechnica_cert",48,60
11,1,36,0,11,"test_servo_cert@63-73@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_servo_cert","test_servo_cert",63,73
11,1,36,0,11,"test_twitter_cert@76-86@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_twitter_cert","test_twitter_cert",76,86
11,1,36,0,11,"test_wikipedia_cert@89-99@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_wikipedia_cert","test_wikipedia_cert",89,99
11,1,36,0,11,"test_google_cert@102-112@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_google_cert","test_google_cert",102,112
11,1,36,0,11,"test_hn_cert@115-125@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_hn_cert","test_hn_cert",115,125
11,1,36,0,11,"test_stackoverflow_cert@128-138@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_stackoverflow_cert","test_stackoverflow_cert",128,138
11,1,36,0,11,"test_duckduckgo_cert@141-151@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_duckduckgo_cert","test_duckduckgo_cert",141,151
12,1,42,0,12,"test_rustlang_cert@154-165@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_rustlang_cert","test_rustlang_cert",154,165
11,1,36,0,11,"test_wapo_cert@168-178@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","test_wapo_cert","test_wapo_cert",168,178
26,1,135,1,26,"new@189-214@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","new","new name : & 'static str, domain: &' static str , certs : & [ & ' static [ u8 ] ]",189,214
27,2,201,2,29,"bench@216-244@crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2022/ccn_lib/src/verifybench.rs","bench","bench & self , count : usize",216,244
