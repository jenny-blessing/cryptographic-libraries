7,1,31,1,7,"key_block_shape@168-174@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","key_block_shape","key_block_shape & self",168,174
13,2,86,2,13,"extract_keys@176-188@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","extract_keys","extract_keys & self , key : AeadKey , write_iv : & [ u8 ] , explicit : & [ u8 ] ,",176,188
3,1,15,1,3,"fips@190-192@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","fips","fips & self",190,192
9,1,77,2,9,"decrypter@198-206@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","decrypter","decrypter & self , dec_key : AeadKey , iv : & [ u8 ]",198,206
9,1,84,2,9,"encrypter@208-216@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","encrypter","encrypter & self , enc_key : AeadKey , enc_iv : & [ u8 ] , _ : & [ u8 ]",208,216
7,1,25,1,7,"key_block_shape@218-224@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","key_block_shape","key_block_shape & self",218,224
12,1,79,2,13,"extract_keys@226-238@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","extract_keys","extract_keys & self , key : AeadKey , iv : & [ u8 ] , _explicit : & [ u8 ] ,",226,238
3,1,11,1,3,"fips@240-242@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","fips","fips & self",240,242
15,2,160,3,18,"encrypt@383-400@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","encrypt","encrypt & mut self , msg : OutboundPlainMessage , seq : u64 ,",383,400
3,1,27,2,3,"encrypted_payload_len@402-404@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","encrypted_payload_len","encrypted_payload_len & self , payload_len : usize",402,404
8,1,85,0,17,"gcm_iv@407-423@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","gcm_iv","gcm_iv write_iv : & [ u8 ] , explicit : & [ u8 ]",407,423
7,1,85,1,12,"for_secret@428-439@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","for_secret","for_secret & self , output : & mut [ u8 ] , secret : & [ u8 ] , label : & [ u8 ] , seed : & [ u8 ]",428,439
17,2,88,1,17,"for_key_exchange@441-457@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","for_key_exchange","for_key_exchange & self , output : & mut [ u8 ; 48 ] , kx : Box < dyn ActiveKeyExchange > , peer_pub_key : & [ u8 ] , label : & [ u8 ] , seed : & [ u8 ] ,",441,457
3,1,15,1,3,"fips@459-461@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls12.rs","fips","fips & self",459,461
8,1,65,3,9,"encrypter@81-89@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","encrypter","encrypter & self , key : AeadKey , iv : Iv",81,89
8,1,65,3,9,"decrypter@91-99@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","decrypter","decrypter & self , key : AeadKey , iv : Iv",91,99
3,1,17,1,3,"key_len@101-103@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","key_len","key_len & self",101,103
7,1,35,3,7,"extract_keys@105-111@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","extract_keys","extract_keys & self , key : AeadKey , iv : Iv ,",105,111
3,1,11,1,3,"fips@113-115@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","fips","fips & self",113,115
3,1,32,3,3,"encrypter@121-123@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","encrypter","encrypter & self , key : AeadKey , iv : Iv",121,123
3,1,32,3,3,"decrypter@125-127@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","decrypter","decrypter & self , key : AeadKey , iv : Iv",125,127
3,1,17,1,3,"key_len@129-131@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","key_len","key_len & self",129,131
7,1,35,3,7,"extract_keys@133-139@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","extract_keys","extract_keys & self , key : AeadKey , iv : Iv ,",133,139
3,1,15,1,3,"fips@141-143@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","fips","fips & self",141,143
3,1,32,3,3,"encrypter@149-151@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","encrypter","encrypter & self , key : AeadKey , iv : Iv",149,151
3,1,32,3,3,"decrypter@153-155@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","decrypter","decrypter & self , key : AeadKey , iv : Iv",153,155
3,1,17,1,3,"key_len@157-159@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","key_len","key_len & self",157,159
7,1,35,3,7,"extract_keys@161-167@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","extract_keys","extract_keys & self , key : AeadKey , iv : Iv ,",161,167
3,1,15,1,3,"fips@169-171@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","fips","fips & self",169,171
20,2,159,3,23,"encrypt@287-309@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","encrypt","encrypt & mut self , msg : OutboundPlainMessage , seq : u64 ,",287,309
3,1,29,2,3,"encrypted_payload_len@311-313@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","encrypted_payload_len","encrypted_payload_len & self , payload_len : usize",311,313
11,2,112,1,11,"extract_from_zero_ikm@348-358@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","extract_from_zero_ikm","extract_from_zero_ikm & self , salt : Option < & [ u8 ] >",348,358
11,2,107,1,11,"extract_from_secret@360-370@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","extract_from_secret","extract_from_secret & self , salt : Option < & [ u8 ] > , secret : & [ u8 ]",360,370
6,1,52,2,6,"expander_for_okm@372-377@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","expander_for_okm","expander_for_okm & self , okm : & OkmBlock",372,377
3,1,63,2,3,"hmac_sign@379-381@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","hmac_sign","hmac_sign & self , key : & OkmBlock , message : & [ u8 ]",379,381
3,1,15,1,3,"fips@383-385@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","fips","fips & self",383,385
6,1,72,1,6,"expand_slice@394-399@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","expand_slice","expand_slice & self , info : & [ & [ u8 ] ] , output : & mut [ u8 ]",394,399
9,1,89,1,9,"expand_block@401-409@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","expand_block","expand_block & self , info : & [ & [ u8 ] ]",401,409
3,1,17,1,3,"hash_len@411-413@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","hash_len","hash_len & self",411,413
3,1,13,1,3,"len@419-421@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/tls13.rs","len","len & self",419,421
9,1,39,0,9,"default_provider@37-45@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","default_provider","default_provider",37,45
39,1,33,0,39,"default_kx_groups@47-85@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","default_kx_groups","default_kx_groups",47,85
3,1,13,1,3,"fips@87-89@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","fips","fips & self",87,89
8,1,65,1,8,"agree_ephemeral@235-242@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","agree_ephemeral","agree_ephemeral priv_key : ring_like :: agreement :: EphemeralPrivateKey , peer_key : & ring_like :: agreement :: UnparsedPublicKey < & [ u8 ] > ,",235,242
3,1,17,0,3,"fips@250-252@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","fips","fips",250,252
5,1,30,0,5,"default_suites_are_fips@258-262@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","default_suites_are_fips","default_suites_are_fips",258,262
3,1,18,0,3,"default_suites@266-268@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/mod.rs","default_suites","default_suites",266,268
50,4,156,0,53,"any_supported_type@20-72@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","any_supported_type","any_supported_type der : & PrivateKeyDer < '_>) -> Result<Arc<dyn SigningKey>, Error> {
    if let Ok(rsa) = RsaSigningKey::new(der) {
        return Ok(Arc::new(rsa));
    }

    if let Ok(ecdsa) = any_ecdsa_type(der) {
        return Ok(ecdsa);
    }

    if let PrivateKeyDer::Pkcs8(pkcs8) = der {
        if let Ok(eddsa) = any_eddsa_type(pkcs8) {
            return Ok(eddsa);
        }
    }

    Err(Error::General(
        'failed to parse private key as RSA, ECDSA, or EdDSA'.into(),
    ))
}

/// Parse `der` as any ECDSA key type, returning the first which works.
///
/// Both SEC1 (PEM section starting with ' BEGIN EC PRIVATE KEY ') and PKCS8
/// (PEM section starting with ' BEGIN PRIVATE KEY ') encodings are supported.
pub fn any_ecdsa_type(der: &PrivateKeyDer<' _ >",20,72
112,1,153,7,118,"any_eddsa_type@75-192@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","any_eddsa_type","any_eddsa_type der : & PrivatePkcs8KeyDer < '_>) -> Result<Arc<dyn SigningKey>, Error> {
    // TODO: Add support for Ed448
    Ok(Arc::new(Ed25519SigningKey::new(
        der,
        SignatureScheme::ED25519,
    )?))
}

/// A `SigningKey` for RSA-PKCS1 or RSA-PSS.
///
/// This is used by the test suite, so it must be `pub`, but it isn' t part of #[doc(hidden)] pub struct RsaSigningKey { key : Arc < RsaKeyPair > , } static ALL_RSA_SCHEMES : & [ SignatureScheme ] = & [ SignatureScheme :: RSA_PSS_SHA512 , SignatureScheme :: RSA_PSS_SHA384 , SignatureScheme :: RSA_PSS_SHA256 , SignatureScheme :: RSA_PKCS1_SHA512 , SignatureScheme :: RSA_PKCS1_SHA384 , SignatureScheme :: RSA_PKCS1_SHA256 , ] ; impl RsaSigningKey { pub fn new der : & PrivateKeyDer < '_>) -> Result<Self, Error> {
        let key_pair = match der {
            PrivateKeyDer::Pkcs1(pkcs1) => RsaKeyPair::from_der(pkcs1.secret_pkcs1_der()),
            PrivateKeyDer::Pkcs8(pkcs8) => RsaKeyPair::from_pkcs8(pkcs8.secret_pkcs8_der()),
            _ => {
                return Err(Error::General(
                    'failed to parse RSA private key as either PKCS#1 or PKCS#8'.into(),
                ));
            }
        }
        .map_err(|key_rejected| {
            Error::General(format!('failed to parse RSA private key: {}', key_rejected))
        })?;

        Ok(Self {
            key: Arc::new(key_pair),
        })
    }
}

impl SigningKey for RsaSigningKey {
    fn choose_scheme(&self, offered: &[SignatureScheme]) -> Option<Box<dyn Signer>> {
        ALL_RSA_SCHEMES
            .iter()
            .find(|scheme| offered.contains(scheme))
            .map(|scheme| RsaSigner::new(Arc::clone(&self.key), *scheme))
    }

    fn algorithm(&self) -> SignatureAlgorithm {
        SignatureAlgorithm::RSA
    }
}

impl Debug for RsaSigningKey {
    fn fmt(&self, f: &mut Formatter<' _ > -> fmt :: Result { f . debug_struct 'RsaSigningKey' . field 'algorithm' , & self . algorithm . finish } } struct RsaSigner { key : Arc < RsaKeyPair > , scheme : SignatureScheme , encoding : & 'static dyn signature::RsaEncoding,
}

impl RsaSigner {
    fn new(key: Arc<RsaKeyPair>, scheme: SignatureScheme) -> Box<dyn Signer> {
        let encoding: &dyn signature::RsaEncoding = match scheme {
            SignatureScheme::RSA_PKCS1_SHA256 => &signature::RSA_PKCS1_SHA256,
            SignatureScheme::RSA_PKCS1_SHA384 => &signature::RSA_PKCS1_SHA384,
            SignatureScheme::RSA_PKCS1_SHA512 => &signature::RSA_PKCS1_SHA512,
            SignatureScheme::RSA_PSS_SHA256 => &signature::RSA_PSS_SHA256,
            SignatureScheme::RSA_PSS_SHA384 => &signature::RSA_PSS_SHA384,
            SignatureScheme::RSA_PSS_SHA512 => &signature::RSA_PSS_SHA512,
            _ => unreachable!(),
        };

        Box::new(Self {
            key,
            scheme,
            encoding,
        })
    }
}

impl Signer for RsaSigner {
    fn sign(&self, message: &[u8]) -> Result<Vec<u8>, Error> {
        let mut sig = vec![0; self.key.public_modulus_len()];

        let rng = SystemRandom::new();
        self.key
            .sign(self.encoding, &rng, message, &mut sig)
            .map(|_| sig)
            .map_err(|_| Error::General('signing failed'.to_string()))
    }

    fn scheme(&self) -> SignatureScheme {
        self.scheme
    }
}

impl Debug for RsaSigner {
    fn fmt(&self, f: &mut Formatter<' _ >",75,192
20,4,121,1,21,"new@215-235@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","new","new der : & PrivateKeyDer < '_>,
        scheme: SignatureScheme,
        sigalg: &' static signature :: EcdsaSigningAlgorithm ,",215,235
10,2,69,1,10,"choose_scheme@239-248@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","choose_scheme","choose_scheme & self , offered : & [ SignatureScheme ]",239,248
3,1,17,1,3,"algorithm@250-252@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","algorithm","algorithm & self",250,252
32,1,42,1,32,"fmt@256-287@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","fmt","fmt & self , f : & mut Formatter < '_>) -> fmt::Result {
        f.debug_struct('EcdsaSigningKey')
            .field('algorithm', &self.algorithm())
            .finish()
    }
}

struct EcdsaSigner {
    key: Arc<EcdsaKeyPair>,
    scheme: SignatureScheme,
}

impl Signer for EcdsaSigner {
    fn sign(&self, message: &[u8]) -> Result<Vec<u8>, Error> {
        let rng = SystemRandom::new();
        self.key
            .sign(&rng, message)
            .map_err(|_| Error::General('signing failed'.into()))
            .map(|sig| sig.as_ref().into())
    }

    fn scheme(&self) -> SignatureScheme {
        self.scheme
    }
}

impl Debug for EcdsaSigner {
    fn fmt(&self, f: &mut Formatter<' _ >",256,287
36,1,40,0,36,"new@309-344@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","new","new der : & PrivatePkcs8KeyDer < '_>, scheme: SignatureScheme) -> Result<Self, Error> {
        match Ed25519KeyPair::from_pkcs8_maybe_unchecked(der.secret_pkcs8_der()) {
            Ok(key_pair) => Ok(Self {
                key: Arc::new(key_pair),
                scheme,
            }),
            Err(e) => Err(Error::General(format!(
                'failed to parse Ed25519 private key: {e}'
            ))),
        }
    }
}

impl SigningKey for Ed25519SigningKey {
    fn choose_scheme(&self, offered: &[SignatureScheme]) -> Option<Box<dyn Signer>> {
        if offered.contains(&self.scheme) {
            Some(Box::new(Ed25519Signer {
                key: Arc::clone(&self.key),
                scheme: self.scheme,
            }))
        } else {
            None
        }
    }

    fn algorithm(&self) -> SignatureAlgorithm {
        self.scheme.sign()
    }
}

impl Debug for Ed25519SigningKey {
    fn fmt(&self, f: &mut Formatter<' _ >",309,344
3,1,44,1,3,"sign@353-355@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","sign","sign & self , message : & [ u8 ]",353,355
3,1,13,1,3,"scheme@357-359@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","scheme","scheme & self",357,359
5,1,42,1,5,"fmt@363-367@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","fmt","fmt & self , f : & mut Formatter < ' _ >",363,367
8,1,77,0,8,"can_load_ecdsa_nistp256_pkcs8@379-386@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_load_ecdsa_nistp256_pkcs8","can_load_ecdsa_nistp256_pkcs8",379,386
7,1,59,0,7,"can_load_ecdsa_nistp256_sec1@389-395@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_load_ecdsa_nistp256_sec1","can_load_ecdsa_nistp256_sec1",389,395
26,1,183,0,29,"can_sign_ecdsa_nistp256@398-426@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_sign_ecdsa_nistp256","can_sign_ecdsa_nistp256",398,426
8,1,77,0,8,"can_load_ecdsa_nistp384_pkcs8@429-436@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_load_ecdsa_nistp384_pkcs8","can_load_ecdsa_nistp384_pkcs8",429,436
7,1,59,0,7,"can_load_ecdsa_nistp384_sec1@439-445@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_load_ecdsa_nistp384_sec1","can_load_ecdsa_nistp384_sec1",439,445
26,1,183,0,29,"can_sign_ecdsa_nistp384@448-476@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_sign_ecdsa_nistp384","can_sign_ecdsa_nistp384",448,476
8,1,77,0,8,"can_load_ecdsa_nistp521_pkcs8@479-486@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_load_ecdsa_nistp521_pkcs8","can_load_ecdsa_nistp521_pkcs8",479,486
7,1,59,0,7,"can_load_ecdsa_nistp521_sec1@489-495@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_load_ecdsa_nistp521_sec1","can_load_ecdsa_nistp521_sec1",489,495
29,1,203,0,32,"can_sign_ecdsa_nistp521@498-529@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_sign_ecdsa_nistp521","can_sign_ecdsa_nistp521",498,529
7,1,77,0,7,"can_load_eddsa_pkcs8@532-538@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_load_eddsa_pkcs8","can_load_eddsa_pkcs8",532,538
21,1,175,0,23,"can_sign_eddsa@541-563@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_sign_eddsa","can_sign_eddsa",541,563
8,1,77,0,8,"can_load_rsa2048_pkcs8@566-573@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_load_rsa2048_pkcs8","can_load_rsa2048_pkcs8",566,573
7,1,59,0,7,"can_load_rsa2048_pkcs1@576-582@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_load_rsa2048_pkcs1","can_load_rsa2048_pkcs1",576,582
30,2,228,0,34,"can_sign_rsa2048@585-618@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","can_sign_rsa2048","can_sign_rsa2048",585,618
21,1,113,0,21,"cannot_load_invalid_pkcs8_encoding@621-641@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","cannot_load_invalid_pkcs8_encoding","cannot_load_invalid_pkcs8_encoding",621,641
16,2,98,1,17,"bench_rsa2048_pkcs1_sha256@649-665@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_rsa2048_pkcs1_sha256","bench_rsa2048_pkcs1_sha256 b : & mut test :: Bencher",649,665
16,2,98,1,17,"bench_rsa2048_pss_sha256@668-684@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_rsa2048_pss_sha256","bench_rsa2048_pss_sha256 b : & mut test :: Bencher",668,684
16,2,98,1,17,"bench_eddsa@687-703@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_eddsa","bench_eddsa b : & mut test :: Bencher",687,703
16,2,98,1,17,"bench_ecdsa_p256_sha256@706-722@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_ecdsa_p256_sha256","bench_ecdsa_p256_sha256 b : & mut test :: Bencher",706,722
16,2,98,1,17,"bench_ecdsa_p384_sha384@725-741@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_ecdsa_p384_sha384","bench_ecdsa_p384_sha384 b : & mut test :: Bencher",725,741
16,2,98,1,17,"bench_ecdsa_p521_sha512@744-760@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_ecdsa_p521_sha512","bench_ecdsa_p521_sha512 b : & mut test :: Bencher",744,760
8,2,64,1,9,"bench_load_and_validate_rsa2048@763-771@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_load_and_validate_rsa2048","bench_load_and_validate_rsa2048 b : & mut test :: Bencher",763,771
8,2,64,1,9,"bench_load_and_validate_rsa4096@774-782@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_load_and_validate_rsa4096","bench_load_and_validate_rsa4096 b : & mut test :: Bencher",774,782
8,2,64,1,9,"bench_load_and_validate_p256@785-793@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_load_and_validate_p256","bench_load_and_validate_p256 b : & mut test :: Bencher",785,793
8,2,64,1,9,"bench_load_and_validate_p384@796-804@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_load_and_validate_p384","bench_load_and_validate_p384 b : & mut test :: Bencher",796,804
8,2,64,1,9,"bench_load_and_validate_p521@807-815@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_load_and_validate_p521","bench_load_and_validate_p521 b : & mut test :: Bencher",807,815
6,2,58,1,7,"bench_load_and_validate_eddsa@818-824@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/aws_lc_rs/sign.rs","bench_load_and_validate_eddsa","bench_load_and_validate_eddsa b : & mut test :: Bencher",818,824
17,2,203,3,20,"encrypt@285-304@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls12.rs","encrypt","encrypt & mut self , msg : OutboundPlainMessage , seq : u64 ,",285,304
3,1,29,2,3,"encrypted_payload_len@306-308@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls12.rs","encrypted_payload_len","encrypted_payload_len & self , payload_len : usize",306,308
5,1,69,0,5,"complete@90-94@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","complete","complete self : Box < Self > , peer : & [ u8 ]",90,94
3,1,13,1,3,"group@97-99@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","group","group & self",97,99
3,1,20,1,3,"pub_key@102-104@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","pub_key","pub_key & self",102,104
3,1,22,0,3,"kxgroup_fmt_yields_name@112-114@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","kxgroup_fmt_yields_name","kxgroup_fmt_yields_name",112,114
3,1,22,1,3,"bench_x25519@120-122@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","bench_x25519","bench_x25519 b : & mut test :: Bencher",120,122
3,1,22,1,3,"bench_ecdh_p256@125-127@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","bench_ecdh_p256","bench_ecdh_p256 b : & mut test :: Bencher",125,127
3,1,22,1,3,"bench_ecdh_p384@130-132@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","bench_ecdh_p384","bench_ecdh_p384 b : & mut test :: Bencher",130,132
7,2,73,2,7,"bench_any@134-140@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/kx.rs","bench_any","bench_any b : & mut test :: Bencher , kxg : & dyn super :: SupportedKxGroup",134,140
6,2,43,0,6,"new@26-31@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/ticketer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/ticketer.rs","new","new",26,31
3,1,32,3,3,"encrypter@80-82@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","encrypter","encrypter & self , key : AeadKey , iv : Iv",80,82
3,1,32,3,3,"decrypter@84-86@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","decrypter","decrypter & self , key : AeadKey , iv : Iv",84,86
3,1,17,1,3,"key_len@88-90@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","key_len","key_len & self",88,90
7,1,35,3,7,"extract_keys@92-98@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","extract_keys","extract_keys & self , key : AeadKey , iv : Iv ,",92,98
3,1,11,1,3,"fips@100-102@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","fips","fips & self",100,102
3,1,32,3,3,"encrypter@108-110@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","encrypter","encrypter & self , key : AeadKey , iv : Iv",108,110
3,1,32,3,3,"decrypter@112-114@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","decrypter","decrypter & self , key : AeadKey , iv : Iv",112,114
3,1,17,1,3,"key_len@116-118@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","key_len","key_len & self",116,118
7,1,35,3,7,"extract_keys@120-126@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","extract_keys","extract_keys & self , key : AeadKey , iv : Iv ,",120,126
3,1,15,1,3,"fips@128-130@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","fips","fips & self",128,130
3,1,32,3,3,"encrypter@136-138@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","encrypter","encrypter & self , key : AeadKey , iv : Iv",136,138
3,1,32,3,3,"decrypter@140-142@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","decrypter","decrypter & self , key : AeadKey , iv : Iv",140,142
3,1,17,1,3,"key_len@144-146@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","key_len","key_len & self",144,146
7,1,35,3,7,"extract_keys@148-154@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","extract_keys","extract_keys & self , key : AeadKey , iv : Iv ,",148,154
3,1,15,1,3,"fips@156-158@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","fips","fips & self",156,158
11,2,112,1,11,"extract_from_zero_ikm@255-265@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","extract_from_zero_ikm","extract_from_zero_ikm & self , salt : Option < & [ u8 ] >",255,265
11,2,107,1,11,"extract_from_secret@267-277@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","extract_from_secret","extract_from_secret & self , salt : Option < & [ u8 ] > , secret : & [ u8 ]",267,277
6,1,52,2,6,"expander_for_okm@279-284@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","expander_for_okm","expander_for_okm & self , okm : & OkmBlock",279,284
3,1,63,2,3,"hmac_sign@286-288@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","hmac_sign","hmac_sign & self , key : & OkmBlock , message : & [ u8 ]",286,288
3,1,15,1,3,"fips@290-292@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","fips","fips & self",290,292
6,1,72,1,6,"expand_slice@301-306@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","expand_slice","expand_slice & self , info : & [ & [ u8 ] ] , output : & mut [ u8 ]",301,306
9,1,89,1,9,"expand_block@308-316@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","expand_block","expand_block & self , info : & [ & [ u8 ] ]",308,316
3,1,17,1,3,"hash_len@318-320@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","hash_len","hash_len & self",318,320
3,1,13,1,3,"len@326-328@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/tls13.rs","len","len & self",326,328
9,1,41,0,9,"default_provider@31-39@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/mod.rs","default_provider","default_provider",31,39
6,1,53,1,7,"fill@46-52@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/mod.rs","fill","fill & self , buf : & mut [ u8 ]",46,52
43,3,120,0,45,"any_supported_type@22-66@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","any_supported_type","any_supported_type der : & PrivateKeyDer < '_>) -> Result<Arc<dyn SigningKey>, Error> {
    if let Ok(rsa) = RsaSigningKey::new(der) {
        return Ok(Arc::new(rsa));
    }

    if let Ok(ecdsa) = any_ecdsa_type(der) {
        return Ok(ecdsa);
    }

    if let PrivateKeyDer::Pkcs8(pkcs8) = der {
        if let Ok(eddsa) = any_eddsa_type(pkcs8) {
            return Ok(eddsa);
        }
    }

    Err(Error::General(
        'failed to parse private key as RSA, ECDSA, or EdDSA'.into(),
    ))
}

/// Parse `der` as any ECDSA key type, returning the first which works.
///
/// Both SEC1 (PEM section starting with ' BEGIN EC PRIVATE KEY ') and PKCS8
/// (PEM section starting with ' BEGIN PRIVATE KEY ') encodings are supported.
pub fn any_ecdsa_type(der: &PrivateKeyDer<' _ >",22,66
112,1,153,7,118,"any_eddsa_type@69-186@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","any_eddsa_type","any_eddsa_type der : & PrivatePkcs8KeyDer < '_>) -> Result<Arc<dyn SigningKey>, Error> {
    // TODO: Add support for Ed448
    Ok(Arc::new(Ed25519SigningKey::new(
        der,
        SignatureScheme::ED25519,
    )?))
}

/// A `SigningKey` for RSA-PKCS1 or RSA-PSS.
///
/// This is used by the test suite, so it must be `pub`, but it isn' t part of #[doc(hidden)] pub struct RsaSigningKey { key : Arc < RsaKeyPair > , } static ALL_RSA_SCHEMES : & [ SignatureScheme ] = & [ SignatureScheme :: RSA_PSS_SHA512 , SignatureScheme :: RSA_PSS_SHA384 , SignatureScheme :: RSA_PSS_SHA256 , SignatureScheme :: RSA_PKCS1_SHA512 , SignatureScheme :: RSA_PKCS1_SHA384 , SignatureScheme :: RSA_PKCS1_SHA256 , ] ; impl RsaSigningKey { pub fn new der : & PrivateKeyDer < '_>) -> Result<Self, Error> {
        let key_pair = match der {
            PrivateKeyDer::Pkcs1(pkcs1) => RsaKeyPair::from_der(pkcs1.secret_pkcs1_der()),
            PrivateKeyDer::Pkcs8(pkcs8) => RsaKeyPair::from_pkcs8(pkcs8.secret_pkcs8_der()),
            _ => {
                return Err(Error::General(
                    'failed to parse RSA private key as either PKCS#1 or PKCS#8'.into(),
                ));
            }
        }
        .map_err(|key_rejected| {
            Error::General(format!('failed to parse RSA private key: {}', key_rejected))
        })?;

        Ok(Self {
            key: Arc::new(key_pair),
        })
    }
}

impl SigningKey for RsaSigningKey {
    fn choose_scheme(&self, offered: &[SignatureScheme]) -> Option<Box<dyn Signer>> {
        ALL_RSA_SCHEMES
            .iter()
            .find(|scheme| offered.contains(scheme))
            .map(|scheme| RsaSigner::new(Arc::clone(&self.key), *scheme))
    }

    fn algorithm(&self) -> SignatureAlgorithm {
        SignatureAlgorithm::RSA
    }
}

impl Debug for RsaSigningKey {
    fn fmt(&self, f: &mut Formatter<' _ > -> fmt :: Result { f . debug_struct 'RsaSigningKey' . field 'algorithm' , & self . algorithm . finish } } struct RsaSigner { key : Arc < RsaKeyPair > , scheme : SignatureScheme , encoding : & 'static dyn signature::RsaEncoding,
}

impl RsaSigner {
    fn new(key: Arc<RsaKeyPair>, scheme: SignatureScheme) -> Box<dyn Signer> {
        let encoding: &dyn signature::RsaEncoding = match scheme {
            SignatureScheme::RSA_PKCS1_SHA256 => &signature::RSA_PKCS1_SHA256,
            SignatureScheme::RSA_PKCS1_SHA384 => &signature::RSA_PKCS1_SHA384,
            SignatureScheme::RSA_PKCS1_SHA512 => &signature::RSA_PKCS1_SHA512,
            SignatureScheme::RSA_PSS_SHA256 => &signature::RSA_PSS_SHA256,
            SignatureScheme::RSA_PSS_SHA384 => &signature::RSA_PSS_SHA384,
            SignatureScheme::RSA_PSS_SHA512 => &signature::RSA_PSS_SHA512,
            _ => unreachable!(),
        };

        Box::new(Self {
            key,
            scheme,
            encoding,
        })
    }
}

impl Signer for RsaSigner {
    fn sign(&self, message: &[u8]) -> Result<Vec<u8>, Error> {
        let mut sig = vec![0; self.key.public().modulus_len()];

        let rng = SystemRandom::new();
        self.key
            .sign(self.encoding, &rng, message, &mut sig)
            .map(|_| sig)
            .map_err(|_| Error::General('signing failed'.to_string()))
    }

    fn scheme(&self) -> SignatureScheme {
        self.scheme
    }
}

impl Debug for RsaSigner {
    fn fmt(&self, f: &mut Formatter<' _ >",69,186
20,4,129,1,21,"new@209-229@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","new","new der : & PrivateKeyDer < '_>,
        scheme: SignatureScheme,
        sigalg: &' static signature :: EcdsaSigningAlgorithm ,",209,229
65,1,42,1,65,"convert_sec1_to_pkcs8@234-298@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","convert_sec1_to_pkcs8","convert_sec1_to_pkcs8 scheme : SignatureScheme , sigalg : & 'static signature::EcdsaSigningAlgorithm,
        maybe_sec1_der: &[u8],
        rng: &dyn SecureRandom,
    ) -> Result<EcdsaKeyPair, ()> {
        let pkcs8_prefix = match scheme {
            SignatureScheme::ECDSA_NISTP256_SHA256 => &PKCS8_PREFIX_ECDSA_NISTP256,
            SignatureScheme::ECDSA_NISTP384_SHA384 => &PKCS8_PREFIX_ECDSA_NISTP384,
            _ => unreachable!(), // all callers are in this file
        };

        let sec1_wrap = asn1_wrap(der::Tag::OctetString as u8, maybe_sec1_der);

        let mut pkcs8_inner = Vec::with_capacity(pkcs8_prefix.len() + sec1_wrap.len());
        pkcs8_inner.extend_from_slice(pkcs8_prefix);
        pkcs8_inner.extend_from_slice(&sec1_wrap);

        EcdsaKeyPair::from_pkcs8(sigalg, &wrap_in_sequence(&pkcs8_inner), rng).map_err(|_| ())
    }
}

// This is (line-by-line):
// - INTEGER Version = 0
// - SEQUENCE (privateKeyAlgorithm)
//   - id-ecPublicKey OID
//   - prime256v1 OID
const PKCS8_PREFIX_ECDSA_NISTP256: &[u8] = b'\x02\x01\x00\
      \x30\x13\
      \x06\x07\x2a\x86\x48\xce\x3d\x02\x01\
      \x06\x08\x2a\x86\x48\xce\x3d\x03\x01\x07';

// This is (line-by-line):
// - INTEGER Version = 0
// - SEQUENCE (privateKeyAlgorithm)
//   - id-ecPublicKey OID
//   - secp384r1 OID
const PKCS8_PREFIX_ECDSA_NISTP384: &[u8] = b'\x02\x01\x00\
     \x30\x10\
     \x06\x07\x2a\x86\x48\xce\x3d\x02\x01\
     \x06\x05\x2b\x81\x04\x00\x22';

impl SigningKey for EcdsaSigningKey {
    fn choose_scheme(&self, offered: &[SignatureScheme]) -> Option<Box<dyn Signer>> {
        if offered.contains(&self.scheme) {
            Some(Box::new(EcdsaSigner {
                key: Arc::clone(&self.key),
                scheme: self.scheme,
            }))
        } else {
            None
        }
    }

    fn algorithm(&self) -> SignatureAlgorithm {
        self.scheme.sign()
    }
}

impl Debug for EcdsaSigningKey {
    fn fmt(&self, f: &mut Formatter<' _ >",234,298
7,1,78,1,7,"sign@307-313@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","sign","sign & self , message : & [ u8 ]",307,313
3,1,13,1,3,"scheme@315-317@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","scheme","scheme & self",315,317
37,2,84,2,37,"fmt@321-357@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","fmt","fmt & self , f : & mut Formatter < '_>) -> fmt::Result {
        f.debug_struct('EcdsaSigner')
            .field('scheme', &self.scheme)
            .finish()
    }
}

/// A SigningKey that uses exactly one TLS-level SignatureScheme
/// and one ring-level signature::SigningAlgorithm.
///
/// Compare this to RsaSigningKey, which for a particular key is
/// willing to sign with several algorithms.  This is quite poor
/// cryptography practice, but is necessary because a given RSA key
/// is expected to work in TLS1.2 (PKCS#1 signatures) and TLS1.3
/// (PSS signatures) -- nobody is willing to obtain certificates for
/// different protocol versions.
///
/// Currently this is only implemented for Ed25519 keys.
struct Ed25519SigningKey {
    key: Arc<Ed25519KeyPair>,
    scheme: SignatureScheme,
}

impl Ed25519SigningKey {
    /// Make a new `Ed25519SigningKey` from a DER encoding in PKCS#8 format,
    /// expecting a key usable with precisely the given signature scheme.
    fn new(der: &PrivatePkcs8KeyDer<' _ > , scheme : SignatureScheme",321,357
10,2,69,1,10,"choose_scheme@361-370@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","choose_scheme","choose_scheme & self , offered : & [ SignatureScheme ]",361,370
3,1,17,1,3,"algorithm@372-374@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","algorithm","algorithm & self",372,374
28,1,42,1,28,"fmt@378-405@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","fmt","fmt & self , f : & mut Formatter < '_>) -> fmt::Result {
        f.debug_struct('Ed25519SigningKey')
            .field('algorithm', &self.algorithm())
            .finish()
    }
}

struct Ed25519Signer {
    key: Arc<Ed25519KeyPair>,
    scheme: SignatureScheme,
}

impl Signer for Ed25519Signer {
    fn sign(&self, message: &[u8]) -> Result<Vec<u8>, Error> {
        Ok(self.key.sign(message).as_ref().into())
    }

    fn scheme(&self) -> SignatureScheme {
        self.scheme
    }
}

impl Debug for Ed25519Signer {
    fn fmt(&self, f: &mut Formatter<' _ >",378,405
8,1,77,0,8,"can_load_ecdsa_nistp256_pkcs8@417-424@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_load_ecdsa_nistp256_pkcs8","can_load_ecdsa_nistp256_pkcs8",417,424
7,1,59,0,7,"can_load_ecdsa_nistp256_sec1@427-433@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_load_ecdsa_nistp256_sec1","can_load_ecdsa_nistp256_sec1",427,433
26,1,183,0,29,"can_sign_ecdsa_nistp256@436-464@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_sign_ecdsa_nistp256","can_sign_ecdsa_nistp256",436,464
8,1,77,0,8,"can_load_ecdsa_nistp384_pkcs8@467-474@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_load_ecdsa_nistp384_pkcs8","can_load_ecdsa_nistp384_pkcs8",467,474
7,1,59,0,7,"can_load_ecdsa_nistp384_sec1@477-483@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_load_ecdsa_nistp384_sec1","can_load_ecdsa_nistp384_sec1",477,483
26,1,183,0,29,"can_sign_ecdsa_nistp384@486-514@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_sign_ecdsa_nistp384","can_sign_ecdsa_nistp384",486,514
7,1,77,0,7,"can_load_eddsa_pkcs8@517-523@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_load_eddsa_pkcs8","can_load_eddsa_pkcs8",517,523
21,1,175,0,23,"can_sign_eddsa@526-548@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_sign_eddsa","can_sign_eddsa",526,548
8,1,77,0,8,"can_load_rsa2048_pkcs8@551-558@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_load_rsa2048_pkcs8","can_load_rsa2048_pkcs8",551,558
7,1,59,0,7,"can_load_rsa2048_pkcs1@561-567@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_load_rsa2048_pkcs1","can_load_rsa2048_pkcs1",561,567
30,2,228,0,34,"can_sign_rsa2048@570-603@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","can_sign_rsa2048","can_sign_rsa2048",570,603
21,1,113,0,21,"cannot_load_invalid_pkcs8_encoding@606-626@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","cannot_load_invalid_pkcs8_encoding","cannot_load_invalid_pkcs8_encoding",606,626
16,2,98,1,17,"bench_rsa2048_pkcs1_sha256@634-650@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","bench_rsa2048_pkcs1_sha256","bench_rsa2048_pkcs1_sha256 b : & mut test :: Bencher",634,650
16,2,98,1,17,"bench_rsa2048_pss_sha256@653-669@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","bench_rsa2048_pss_sha256","bench_rsa2048_pss_sha256 b : & mut test :: Bencher",653,669
16,2,98,1,17,"bench_eddsa@672-688@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","bench_eddsa","bench_eddsa b : & mut test :: Bencher",672,688
16,2,98,1,17,"bench_ecdsa_p256_sha256@691-707@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","bench_ecdsa_p256_sha256","bench_ecdsa_p256_sha256 b : & mut test :: Bencher",691,707
16,2,98,1,17,"bench_ecdsa_p384_sha384@710-726@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","bench_ecdsa_p384_sha384","bench_ecdsa_p384_sha384 b : & mut test :: Bencher",710,726
8,2,64,1,9,"bench_load_and_validate_rsa2048@729-737@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","bench_load_and_validate_rsa2048","bench_load_and_validate_rsa2048 b : & mut test :: Bencher",729,737
8,2,64,1,9,"bench_load_and_validate_rsa4096@740-748@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","bench_load_and_validate_rsa4096","bench_load_and_validate_rsa4096 b : & mut test :: Bencher",740,748
8,2,64,1,9,"bench_load_and_validate_p256@751-759@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","bench_load_and_validate_p256","bench_load_and_validate_p256 b : & mut test :: Bencher",751,759
8,2,64,1,9,"bench_load_and_validate_p384@762-770@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","bench_load_and_validate_p384","bench_load_and_validate_p384 b : & mut test :: Bencher",762,770
6,2,58,1,7,"bench_load_and_validate_eddsa@773-779@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/sign.rs","bench_load_and_validate_eddsa","bench_load_and_validate_eddsa b : & mut test :: Bencher",773,779
3,1,48,1,3,"with_key@19-21@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hmac.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hmac.rs","with_key","with_key & self , key : & [ u8 ]",19,21
3,1,21,1,3,"hash_output_len@23-25@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hmac.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hmac.rs","hash_output_len","hash_output_len & self",23,25
3,1,15,1,3,"fips@27-29@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hmac.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hmac.rs","fips","fips & self",27,29
9,2,101,1,9,"sign_concat@35-43@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hmac.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hmac.rs","sign_concat","sign_concat & self , first : & [ u8 ] , middle : & [ & [ u8 ] ] , last : & [ u8 ]",35,43
6,1,25,1,6,"tag_len@45-50@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hmac.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hmac.rs","tag_len","tag_len & self",45,50
3,1,36,1,3,"start@15-17@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","start","start & self",15,17
5,1,51,1,5,"hash@19-23@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","hash","hash & self , bytes : & [ u8 ]",19,23
3,1,17,1,3,"output_len@25-27@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","output_len","output_len & self",25,27
3,1,13,1,3,"algorithm@29-31@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","algorithm","algorithm & self",29,31
3,1,15,1,3,"fips@33-35@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","fips","fips & self",33,35
3,1,28,1,3,"fork_finish@41-43@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","fork_finish","fork_finish & self",41,43
3,1,33,1,3,"fork@45-47@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","fork","fork & self",45,47
3,1,28,0,3,"finish@49-51@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","finish","finish self : Box < Self >",49,51
3,1,25,1,3,"update@53-55@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","update","update & mut self , data : & [ u8 ]",53,55
3,1,31,1,3,"convert@58-60@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/ring/hash.rs","convert","convert val : digest :: Digest",58,60
6,1,30,2,14,"supports_suite@25-38@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hpke.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hpke.rs","supports_suite","supports_suite & self , suite : & HpkeSuite",25,38
3,1,20,1,3,"secret_bytes@119-121@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hpke.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hpke.rs","secret_bytes","secret_bytes & self",119,121
7,1,60,1,15,"open@108-122@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hpke.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hpke.rs","open","open & mut self , aad : & [ u8 ] , ciphertext : & [ u8 ]",108,122
3,1,18,0,3,"from@125-127@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hpke.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hpke.rs","from","from bytes : Vec < u8 >",125,127
21,2,98,1,21,"for_key_exchange@11-31@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","for_key_exchange","for_key_exchange & self , output : & mut [ u8 ; 48 ] , kx : Box < dyn ActiveKeyExchange > , peer_pub_key : & [ u8 ] , label : & [ u8 ] , seed : & [ u8 ] ,",11,31
3,1,59,1,3,"for_secret@33-35@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","for_secret","for_secret & self , output : & mut [ u8 ] , secret : & [ u8 ] , label : & [ u8 ] , seed : & [ u8 ]",33,35
12,1,102,1,18,"for_key_exchange@53-70@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","for_key_exchange","for_key_exchange & self , output : & mut [ u8 ; 48 ] , kx : Box < dyn ActiveKeyExchange > , peer_pub_key : & [ u8 ] , label : & [ u8 ] , seed : & [ u8 ] ,",53,70
9,2,129,1,14,"prf@73-86@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","prf","prf out : & mut [ u8 ] , hmac_key : & dyn hmac :: Key , label : & [ u8 ] , seed : & [ u8 ]",73,86
15,1,100,0,16,"check_sha256@98-113@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","check_sha256","check_sha256",98,113
15,1,100,0,16,"check_sha512@116-131@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","check_sha512","check_sha512",116,131
15,1,100,0,16,"check_sha384@134-149@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","check_sha384","check_sha384",134,149
12,2,114,1,14,"bench_sha256@155-168@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls12.rs","bench_sha256","bench_sha256 b : & mut test :: Bencher",155,168
12,2,114,1,13,"expand_unchecked@13-25@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","expand_unchecked","expand_unchecked & self , info : & [ & [ u8 ] ] , output : & mut [ u8 ]",13,25
7,2,72,1,8,"expand_slice@29-36@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","expand_slice","expand_slice & self , info : & [ & [ u8 ] ] , output : & mut [ u8 ]",29,36
6,1,67,1,6,"expand_block@38-43@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","expand_block","expand_block & self , info : & [ & [ u8 ] ]",38,43
3,1,17,1,3,"hash_len@45-47@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","hash_len","hash_len & self",45,47
15,2,117,1,15,"extract_from_zero_ikm@54-68@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","extract_from_zero_ikm","extract_from_zero_ikm & self , salt : Option < & [ u8 ] >",54,68
15,2,112,1,15,"extract_from_secret@70-84@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","extract_from_secret","extract_from_secret & self , salt : Option < & [ u8 ] > , secret : & [ u8 ]",70,84
3,1,39,2,3,"expander_for_okm@86-88@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","expander_for_okm","expander_for_okm & self , okm : & OkmBlock",86,88
5,1,44,2,5,"hmac_sign@90-94@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","hmac_sign","hmac_sign & self , key : & OkmBlock , message : & [ u8 ]",90,94
14,2,123,1,26,"extract_from_zero_ikm@142-167@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","extract_from_zero_ikm","extract_from_zero_ikm & self , salt : Option < & [ u8 ] >",142,167
5,1,52,2,15,"expander_for_okm@170-184@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","expander_for_okm","expander_for_okm & self , okm : & OkmBlock",170,184
8,1,73,1,76,"expand_slice@110-185@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","expand_slice","expand_slice & self , info : & [ & [ u8 ] ] , output : & mut [ u8 ]",110,185
10,2,75,1,10,"expand@196-205@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","expand","expand expander : & dyn HkdfExpander , info : & [ & [ u8 ] ]",196,205
8,1,59,0,8,"new@218-225@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","new","new bytes : & [ u8 ]",218,225
3,1,17,1,3,"drop@232-234@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","drop","drop & mut self",232,234
3,1,24,1,3,"as_ref@238-240@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","as_ref","as_ref & self",238,240
3,1,19,0,3,"from@260-262@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","from","from array : [ u8 ; N ]",260,262
24,1,227,0,26,"test_case_1@268-293@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","test_case_1","test_case_1",268,293
22,1,289,0,24,"test_case_2@296-319@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","test_case_2","test_case_2",296,319
19,1,167,0,21,"test_case_3@322-342@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","test_case_3","test_case_3",322,342
22,1,280,0,30,"test_salt_not_provided@345-374@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","test_salt_not_provided","test_salt_not_provided",345,374
10,1,71,0,11,"test_output_length_bounds@377-387@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/tls13.rs","test_output_length_bounds","test_output_length_bounds",377,387
102,1,34,0,107,"get_default_or_install_from_crate_features@254-360@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","get_default_or_install_from_crate_features","get_default_or_install_from_crate_features",254,360
9,3,86,1,20,"start@380-399@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","start","start & self",380,399
4,1,20,1,6,"name@405-410@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","name","name & self",405,410
16,4,118,0,42,"complete@429-470@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","complete","complete self : Box < Self > , peer_pub_key : & [ u8 ]",429,470
8,1,45,1,17,"pub_key@479-495@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","pub_key","pub_key & self",479,495
3,1,24,1,3,"secret_bytes@505-507@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","secret_bytes","secret_bytes & self",505,507
10,1,72,1,10,"strip_leading_zeros@512-521@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","strip_leading_zeros","strip_leading_zeros & mut self",512,521
3,1,17,1,3,"drop@525-527@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","drop","drop & mut self",525,527
6,1,29,0,6,"from@531-536@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","from","from source : & [ u8 ]",531,536
3,1,13,0,3,"default_fips_provider@574-576@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","default_fips_provider","default_fips_provider",574,576
16,2,171,0,16,"test_shared_secret_strip_leading_zeros@585-600@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/mod.rs","test_shared_secret_strip_leading_zeros","test_shared_secret_strip_leading_zeros",585,600
5,1,34,1,5,"end_entity_cert@109-113@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/signer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/signer.rs","end_entity_cert","end_entity_cert & self",109,113
29,1,77,1,41,"sign@74-114@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/signer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/signer.rs","sign","sign & self , message : & [ u8 ]",74,114
5,1,40,1,9,"with_key@11-19@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hmac.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hmac.rs","with_key","with_key & self , key : & [ u8 ]",11,19
8,1,59,0,8,"new@33-40@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hmac.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hmac.rs","new","new bytes : & [ u8 ]",33,40
3,1,17,1,3,"drop@47-49@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hmac.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hmac.rs","drop","drop & mut self",47,49
3,1,24,1,3,"as_ref@53-55@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hmac.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hmac.rs","as_ref","as_ref & self",53,55
3,1,34,1,3,"sign@63-65@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hmac.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hmac.rs","sign","sign & self , data : & [ & [ u8 ] ]",63,65
11,1,85,3,22,"encrypter@19-40@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/cipher.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/cipher.rs","encrypter","encrypter & self , key : AeadKey , iv : Iv",19,40
7,1,31,3,7,"encrypt@326-332@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/cipher.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/cipher.rs","encrypt","encrypt & mut self , _m : OutboundPlainMessage , _seq : u64 ,",326,332
3,1,15,2,3,"encrypted_payload_len@334-336@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/cipher.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/cipher.rs","encrypted_payload_len","encrypted_payload_len & self , payload_len : usize",334,336
7,1,58,1,15,"start@11-25@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hash.rs","start","start & self",11,25
9,1,73,0,9,"new@36-44@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hash.rs","new","new bytes : & [ u8 ]",36,44
3,1,24,1,3,"as_ref@51-53@crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hash.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/crypto/hash.rs","as_ref","as_ref & self",51,53
17,1,71,0,18,"new@135-152@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","new","new server_name : & 'a Option<DnsName>,
        signature_schemes: &' a [ SignatureScheme ] , alpn : Option < & 'a Vec<ProtocolName>>,
        cipher_suites: &' a [ CipherSuite ] ,",135,152
5,1,35,1,5,"server_name@157-161@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","server_name","server_name & self",157,161
3,1,16,1,3,"signature_schemes@166-168@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","signature_schemes","signature_schemes & self",166,168
21,1,160,1,21,"clone@344-364@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","clone","clone & self",344,364
63,2,153,1,179,"alpn@187-365@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","alpn","alpn & self",187,365
3,1,21,0,3,"builder@374-376@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","builder","builder",374,376
367,21,1639,64,572,"builder_with_protocol_versions@391-962@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","builder_with_protocol_versions","builder_with_protocol_versions versions : & [ & 'static versions::SupportedProtocolVersion],
    ) -> ConfigBuilder<Self, WantsVerifier> {
        // Safety assumptions:
        // 1. that the provider has been installed (explicitly or implicitly)
        // 2. that the process-level default provider is usable with the supplied protocol versions.
        Self::builder_with_provider(Arc::clone(
            CryptoProvider::get_default_or_install_from_crate_features(),
        ))
        .with_protocol_versions(versions)
        .unwrap()
    }

    /// Create a builder for a server configuration with a specific [`CryptoProvider`].
    ///
    /// This will use the provider' s configured ciphersuites . You must additionally choose #[cfg(feature = 'std')] pub fn builder_with_provider provider : Arc < CryptoProvider > , -> ConfigBuilder < Self , WantsVersions > { ConfigBuilder { state : WantsVersions { provider , time_provider : Arc :: new DefaultTimeProvider , } , side : PhantomData , } } pub fn builder_with_details provider : Arc < CryptoProvider > , time_provider : Arc < dyn TimeProvider > , -> ConfigBuilder < Self , WantsVersions > { ConfigBuilder { state : WantsVersions { provider , time_provider , } , side : PhantomData , } } pub fn fips & self -> bool { #[cfg(feature = 'tls12')] { self . provider . fips && self . require_ems } #[cfg(not(feature = 'tls12'))] { self . provider . fips } } pub fn crypto_provider & self -> & Arc < CryptoProvider > { & self . provider } pub crate fn supports_version & self , v : ProtocolVersion -> bool { self . versions . contains v && self . provider . cipher_suites . iter . any | cs | cs . version . version == v } #[cfg(feature = 'std')] pub crate fn supports_protocol & self , proto : Protocol -> bool { self . provider . cipher_suites . iter . any | cs | cs . usable_for_protocol proto } pub super fn current_time & self -> Result < UnixTime , Error > { self . time_provider . current_time . ok_or Error :: FailedToGetCurrentTime } } #[cfg(feature = 'std')] mod connection { use alloc :: boxed :: Box ; use alloc :: sync :: Arc ; use alloc :: vec :: Vec ; use core :: fmt ; use core :: fmt :: { Debug , Formatter } ; use core :: ops :: { Deref , DerefMut } ; use std :: io ; use super :: { Accepted , Accepting , EarlyDataState , ServerConfig , ServerConnectionData } ; use crate :: common_state :: { CommonState , Context , Side } ; use crate :: conn :: { ConnectionCommon , ConnectionCore } ; use crate :: error :: Error ; use crate :: server :: hs ; use crate :: suites :: ExtractedSecrets ; use crate :: vecbuf :: ChunkVecBuffer ; pub struct ReadEarlyData < 'a> {
        early_data: &' a mut EarlyDataState , } impl < 'a> ReadEarlyData<' a > { fn new early_data : & 'a mut EarlyDataState) -> Self {
            ReadEarlyData { early_data }
        }
    }

    impl<' a > io :: Read for ReadEarlyData < 'a> {
        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
            self.early_data.read(buf)
        }

        #[cfg(read_buf)]
        fn read_buf(&mut self, cursor: core::io::BorrowedCursor<' _ > -> io :: Result < > { self . early_data . read_buf cursor } } pub struct ServerConnection { pub super inner : ConnectionCommon < ServerConnectionData > , } impl ServerConnection { pub fn new config : Arc < ServerConfig > -> Result < Self , Error > { let mut common = CommonState :: new Side :: Server ; common . set_max_fragment_size config . max_fragment_size ? ; common . enable_secret_extraction = config . enable_secret_extraction ; Ok Self { inner : ConnectionCommon :: from ConnectionCore :: for_server config , Vec :: new ? , } } pub fn server_name & self -> Option < & str > { self . inner . core . get_sni_str } pub fn received_resumption_data & self -> Option < & [ u8 ] > { self . inner . core . data . received_resumption_data . as_ref . map | x | & x [ . . ] } pub fn set_resumption_data & mut self , data : & [ u8 ] { assert ! data . len < 2usize . pow 15 ; self . inner . core . data . resumption_data = data . into ; } pub fn reject_early_data & mut self { self . inner . core . reject_early_data } pub fn early_data & mut self -> Option < ReadEarlyData > { let data = & mut self . inner . core . data ; if data . early_data . was_accepted { Some ReadEarlyData :: new & mut data . early_data } else { None } } pub fn dangerous_extract_secrets self -> Result < ExtractedSecrets , Error > { self . inner . dangerous_extract_secrets } } impl Debug for ServerConnection { fn fmt & self , f : & mut Formatter -> fmt :: Result { f . debug_struct 'ServerConnection' . finish } } impl Deref for ServerConnection { type Target = ConnectionCommon < ServerConnectionData > ; fn deref & self -> & Self :: Target { & self . inner } } impl DerefMut for ServerConnection { fn deref_mut & mut self -> & mut Self :: Target { & mut self . inner } } impl From < ServerConnection > for crate :: Connection { fn from conn : ServerConnection -> Self { Self :: Server conn } } pub struct Acceptor { inner : Option < ConnectionCommon < ServerConnectionData > > , } impl Default for Acceptor { fn default -> Self { Self { inner : Some ConnectionCore :: new Box :: new Accepting , ServerConnectionData :: default , CommonState :: new Side :: Server , . into , , } } } impl Acceptor { pub fn read_tls & mut self , rd : & mut dyn io :: Read -> Result < usize , io :: Error > { match & mut self . inner { Some conn => conn . read_tls rd , None => Err io :: Error :: new io :: ErrorKind :: Other , 'acceptor cannot read after successful acceptance' , , } } pub fn accept & mut self -> Result < Option < Accepted > , Error , AcceptedAlert > { let mut connection = match self . inner . take { Some conn => conn , None => { return Err Error :: General 'Acceptor polled after completion' . into , AcceptedAlert :: empty , ; } } ; let message = match connection . first_handshake_message { Ok Some msg => msg , Ok None => { self . inner = Some connection ; return Ok None ; } Err err => return Err err , AcceptedAlert :: from connection , } ; let mut cx = Context :: from & mut connection ; let sig_schemes = match hs :: process_client_hello & message , false , & mut cx { Ok _ , sig_schemes => sig_schemes , Err err => { return Err err , AcceptedAlert :: from connection ; } } ; Ok Some Accepted { connection , message , sig_schemes , } } } pub struct AcceptedAlert ChunkVecBuffer ; impl AcceptedAlert { pub super fn empty -> Self { Self ChunkVecBuffer :: new None } pub fn write & mut self , wr : & mut dyn io :: Write -> Result < usize , io :: Error > { self . 0 . write_to wr } pub fn write_all & mut self , wr : & mut dyn io :: Write -> Result < , io :: Error > { while self . write wr ? != 0 { } Ok } } impl From < ConnectionCommon < ServerConnectionData > > for AcceptedAlert { fn from conn : ConnectionCommon < ServerConnectionData > -> Self { Self conn . core . common_state . sendable_tls } } impl Debug for AcceptedAlert { fn fmt & self , f : & mut Formatter < '_>) -> fmt::Result {
            f.debug_struct('AcceptedAlert').finish()
        }
    }
}

#[cfg(feature = 'std')]
pub use connection::{AcceptedAlert, Acceptor, ReadEarlyData, ServerConnection};

/// Unbuffered version of `ServerConnection`
///
/// See the [`crate::unbuffered`] module docs for more details
pub struct UnbufferedServerConnection {
    inner: UnbufferedConnectionCommon<ServerConnectionData>,
}

impl UnbufferedServerConnection {
    /// Make a new ServerConnection. `config` controls how we behave in the TLS protocol.
    pub fn new(config: Arc<ServerConfig>) -> Result<Self, Error> {
        let mut common = CommonState::new(Side::Server);
        common.set_max_fragment_size(config.max_fragment_size)?;
        common.enable_secret_extraction = config.enable_secret_extraction;
        Ok(Self {
            inner: UnbufferedConnectionCommon::from(ConnectionCore::for_server(
                config,
                Vec::new(),
            )?),
        })
    }
}

impl Deref for UnbufferedServerConnection {
    type Target = UnbufferedConnectionCommon<ServerConnectionData>;

    fn deref(&self) -> &Self::Target {
        &self.inner
    }
}

impl DerefMut for UnbufferedServerConnection {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.inner
    }
}

impl UnbufferedConnectionCommon<ServerConnectionData> {
    pub(crate) fn pop_early_data(&mut self) -> Option<Vec<u8>> {
        self.core.data.early_data.pop()
    }
}

/// Represents a `ClientHello` message received through the [`Acceptor`].
///
/// Contains the state required to resume the connection through [`Accepted::into_connection()`].
pub struct Accepted {
    connection: ConnectionCommon<ServerConnectionData>,
    message: Message<' static > , sig_schemes : Vec < SignatureScheme > , } impl Accepted { pub fn client_hello & self -> ClientHello < '_> {
        let payload = Self::client_hello_payload(&self.message);
        ClientHello::new(
            &self.connection.core.data.sni,
            &self.sig_schemes,
            payload.alpn_extension(),
            &payload.cipher_suites,
        )
    }

    /// Convert the [`Accepted`] into a [`ServerConnection`].
    ///
    /// Takes the state returned from [`Acceptor::accept()`] as well as the [`ServerConfig`] and
    /// [`sign::CertifiedKey`] that should be used for the session. Returns an error if
    /// configuration-dependent validation of the received `ClientHello` message fails.
    #[cfg(feature = 'std')]
    pub fn into_connection(
        mut self,
        config: Arc<ServerConfig>,
    ) -> Result<ServerConnection, (Error, AcceptedAlert)> {
        if let Err(err) = self
            .connection
            .set_max_fragment_size(config.max_fragment_size)
        {
            // We have a connection here, but it won' t contain an alert since the error return Err err , AcceptedAlert :: empty ; } self . connection . enable_secret_extraction = config . enable_secret_extraction ; let state = hs :: ExpectClientHello :: new config , Vec :: new ; let mut cx = hs :: ServerContext :: from & mut self . connection ; let ch = Self :: client_hello_payload & self . message ; let new = match state . with_certified_key self . sig_schemes , ch , & self . message , & mut cx { Ok new => new , Err err => return Err err , AcceptedAlert :: from self . connection , } ; self . connection . replace_state new ; Ok ServerConnection { inner : self . connection , } } fn client_hello_payload < 'a>(message: &' a Message -> & 'a ClientHelloPayload {
        match &message.payload {
            crate::msgs::message::MessagePayload::Handshake { parsed, .. } => match &parsed.payload
            {
                crate::msgs::handshake::HandshakePayload::ClientHello(ch) => ch,
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
}

impl Debug for Accepted {
    fn fmt(&self, f: &mut Formatter<' _ >",391,962
3,1,11,0,3,"default@991-993@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","default","default",991,993
3,1,16,1,3,"reject@997-999@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","reject","reject & mut self",997,999
3,1,31,2,3,"accept@1001-1003@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","accept","accept & mut self , max_size : usize",1001,1003
3,1,22,1,3,"was_accepted@1006-1008@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","was_accepted","was_accepted & self",1006,1008
3,1,19,1,3,"was_rejected@1010-1012@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","was_rejected","was_rejected & self",1010,1012
6,2,40,1,6,"pop@1014-1019@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","pop","pop & mut self",1014,1019
6,2,62,1,6,"read@1022-1027@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","read","read & mut self , buf : & mut [ u8 ]",1022,1027
27,2,74,1,27,"read_buf@1030-1056@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","read_buf","read_buf & mut self , cursor : core :: io :: BorrowedCursor < '_>) -> io::Result<()> {
        match self {
            Self::Accepted(ref mut received) => received.read_buf(cursor),
            _ => Err(io::Error::from(io::ErrorKind::BrokenPipe)),
        }
    }

    pub(super) fn take_received_plaintext(&mut self, bytes: Payload) -> bool {
        let available = bytes.bytes().len();
        match self {
            Self::Accepted(ref mut received) if received.apply_limit(available) == available => {
                received.append(bytes.into_vec());
                true
            }
            _ => false,
        }
    }
}

impl Debug for EarlyDataState {
    fn fmt(&self, f: &mut Formatter<' _ >",1030,1056
13,2,90,0,13,"for_server@1060-1072@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","for_server","for_server config : Arc < ServerConfig > , extra_exts : Vec < ServerExtension > ,",1060,1072
7,1,33,1,7,"reject_early_data@1075-1081@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","reject_early_data","reject_early_data & mut self",1075,1081
3,1,21,1,3,"get_sni_str@1084-1086@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","get_sni_str","get_sni_str & self",1084,1086
88,3,159,0,168,"handle@968-1135@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/server_conn.rs","handle","handle",968,1135
3,1,25,1,3,"put@14-16@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","put","put & self , _id : Vec < u8 > , _sec : Vec < u8 >",14,16
3,1,24,1,3,"get@17-19@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","get","get & self , _id : & [ u8 ]",17,19
3,1,24,1,3,"take@20-22@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","take","take & self , _id : & [ u8 ]",20,22
3,1,11,1,3,"can_cache@23-25@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","can_cache","can_cache & self",23,25
5,1,38,1,5,"new@49-53@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","new","new size : usize",49,53
5,1,51,1,5,"new@59-63@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","new","new size : usize",59,63
7,1,44,1,7,"put@67-73@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","put","put & self , key : Vec < u8 > , value : Vec < u8 >",67,73
7,1,43,1,7,"get@75-81@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","get","get & self , key : & [ u8 ]",75,81
3,1,39,1,3,"take@83-85@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","take","take & self , key : & [ u8 ]",83,85
3,1,11,1,3,"can_cache@87-89@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","can_cache","can_cache & self",87,89
89,1,41,1,89,"fmt@93-181@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/handy.rs","fmt","fmt & self , f : & mut Formatter < '_>) -> core::fmt::Result {
            f.debug_struct('ServerSessionMemoryCache')
                .finish()
        }
    }

    #[cfg(test)]
    mod tests {
        use std::vec;

        use super::*;
        use crate::server::StoresServerSessions;

        #[test]
        fn test_serversessionmemorycache_accepts_put() {
            let c = ServerSessionMemoryCache::new(4);
            assert!(c.put(vec![0x01], vec![0x02]));
        }

        #[test]
        fn test_serversessionmemorycache_persists_put() {
            let c = ServerSessionMemoryCache::new(4);
            assert!(c.put(vec![0x01], vec![0x02]));
            assert_eq!(c.get(&[0x01]), Some(vec![0x02]));
            assert_eq!(c.get(&[0x01]), Some(vec![0x02]));
        }

        #[test]
        fn test_serversessionmemorycache_overwrites_put() {
            let c = ServerSessionMemoryCache::new(4);
            assert!(c.put(vec![0x01], vec![0x02]));
            assert!(c.put(vec![0x01], vec![0x04]));
            assert_eq!(c.get(&[0x01]), Some(vec![0x04]));
        }

        #[test]
        fn test_serversessionmemorycache_drops_to_maintain_size_invariant() {
            let c = ServerSessionMemoryCache::new(2);
            assert!(c.put(vec![0x01], vec![0x02]));
            assert!(c.put(vec![0x03], vec![0x04]));
            assert!(c.put(vec![0x05], vec![0x06]));
            assert!(c.put(vec![0x07], vec![0x08]));
            assert!(c.put(vec![0x09], vec![0x0a]));

            let count = c.get(&[0x01]).iter().count()
                + c.get(&[0x03]).iter().count()
                + c.get(&[0x05]).iter().count()
                + c.get(&[0x07]).iter().count()
                + c.get(&[0x09]).iter().count();

            assert!(count < 5);
        }
    }
}

#[cfg(any(feature = 'std', feature = 'hashbrown'))]
pub use cache::ServerSessionMemoryCache;

/// Something which never produces tickets.
#[derive(Debug)]
pub(super) struct NeverProducesTickets {}

impl server::ProducesTickets for NeverProducesTickets {
    fn enabled(&self) -> bool {
        false
    }
    fn lifetime(&self) -> u32 {
        0
    }
    fn encrypt(&self, _bytes: &[u8]) -> Option<Vec<u8>> {
        None
    }
    fn decrypt(&self, _bytes: &[u8]) -> Option<Vec<u8>> {
        None
    }
}

/// Something which always resolves to the same cert chain.
#[derive(Debug)]
pub(super) struct AlwaysResolvesChain(Arc<sign::CertifiedKey>);

impl AlwaysResolvesChain {
    /// Creates an `AlwaysResolvesChain`, using the supplied key and certificate chain.
    pub(super) fn new(
        private_key: Arc<dyn sign::SigningKey>,
        chain: CertificateChain<' static > ,",93,181
10,5,64,3,17,"can_resume@39-55@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/hs.rs","can_resume","can_resume suite : SupportedCipherSuite , sni : & Option < DnsName > , using_ems : bool , resumedata : & persist :: ServerSessionValue ,",39,55
3,1,13,0,3,"new@66-68@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/hs.rs","new","new",66,68
14,1,64,1,14,"with_client_cert_verifier@18-31@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/builder.rs","with_client_cert_verifier","with_client_cert_verifier self , client_cert_verifier : Arc < dyn ClientCertVerifier > ,",18,31
3,1,25,1,3,"with_no_client_auth@34-36@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/builder.rs","with_no_client_auth","with_no_client_auth self",34,36
13,2,73,1,13,"with_single_cert@67-79@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/builder.rs","with_single_cert","with_single_cert self , cert_chain : Vec < CertificateDer < 'static>>,
        key_der: PrivateKeyDer<' static > ,",67,79
18,2,83,1,18,"with_single_cert_with_ocsp@92-109@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/builder.rs","with_single_cert_with_ocsp","with_single_cert_with_ocsp self , cert_chain : Vec < CertificateDer < 'static>>,
        key_der: PrivateKeyDer<' static > , ocsp : Vec < u8 > ,",92,109
24,1,147,1,24,"with_cert_resolver@112-135@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/builder.rs","with_cert_resolver","with_cert_resolver self , cert_resolver : Arc < dyn ResolvesServerCert >",112,135
3,1,21,1,3,"get_key@27-29@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/common.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/common.rs","get_key","get_key & self",27,29
3,1,19,1,3,"get_ocsp@32-34@crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/common.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/server/common.rs","get_ocsp","get_ocsp & self",32,34
127,3,238,12,224,"with_crls@97-320@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","with_crls","with_crls mut self , crls : impl IntoIterator < Item = CertificateRevocationListDer < 'static>>,
    ) -> Self {
        self.crls.extend(crls);
        self
    }

    /// Only check the end entity certificate revocation status when using CRLs.
    ///
    /// If CRLs are provided using [`with_crls`][Self::with_crls] only check the end entity
    /// certificate' s revocation status . Overrides the default behavior of checking revocation pub fn only_check_end_entity_revocation mut self -> Self { self . revocation_check_depth = RevocationCheckDepth :: EndEntity ; self } pub fn allow_unauthenticated mut self -> Self { self . anon_policy = AnonymousClientPolicy :: Allow ; self } pub fn allow_unknown_revocation_status mut self -> Self { self . unknown_revocation_policy = UnknownStatusPolicy :: Allow ; self } pub fn build self -> Result < Arc < dyn ClientCertVerifier > , VerifierBuilderError > { if self . roots . is_empty { return Err VerifierBuilderError :: NoRootAnchors ; } Ok Arc :: new WebPkiClientVerifier :: new self . roots , self . root_hint_subjects , parse_crls self . crls ? , self . revocation_check_depth , self . unknown_revocation_policy , self . anon_policy , self . supported_algs , } } #[derive(Debug)] pub struct WebPkiClientVerifier { roots : Arc < RootCertStore > , root_hint_subjects : Vec < DistinguishedName > , crls : Vec < CertRevocationList < 'static>>,
    revocation_check_depth: RevocationCheckDepth,
    unknown_revocation_policy: UnknownStatusPolicy,
    anonymous_policy: AnonymousClientPolicy,
    supported_algs: WebPkiSupportedAlgorithms,
}

impl WebPkiClientVerifier {
    /// Create a builder for the `webpki` client certificate verifier configuration using
    /// the [process-default `CryptoProvider`][CryptoProvider#using-the-per-process-default-cryptoprovider].
    ///
    /// Client certificate authentication will be offered by the server, and client certificates
    /// will be verified using the trust anchors found in the provided `roots`. If you
    /// wish to disable client authentication use [`WebPkiClientVerifier::no_client_auth()`] instead.
    ///
    /// Use [`Self::builder_with_provider`] if you wish to specify an explicit provider.
    ///
    /// For more information, see the [`ClientCertVerifierBuilder`] documentation.
    pub fn builder(roots: Arc<RootCertStore>) -> ClientCertVerifierBuilder {
        Self::builder_with_provider(
            roots,
            Arc::clone(CryptoProvider::get_default_or_install_from_crate_features()),
        )
    }

    /// Create a builder for the `webpki` client certificate verifier configuration using
    /// a specified [`CryptoProvider`].
    ///
    /// Client certificate authentication will be offered by the server, and client certificates
    /// will be verified using the trust anchors found in the provided `roots`. If you
    /// wish to disable client authentication use [WebPkiClientVerifier::no_client_auth()] instead.
    ///
    /// The cryptography used comes from the specified [`CryptoProvider`].
    ///
    /// For more information, see the [`ClientCertVerifierBuilder`] documentation.
    pub fn builder_with_provider(
        roots: Arc<RootCertStore>,
        provider: Arc<CryptoProvider>,
    ) -> ClientCertVerifierBuilder {
        ClientCertVerifierBuilder::new(roots, provider.signature_verification_algorithms)
    }

    /// Create a new `WebPkiClientVerifier` that disables client authentication. The server will
    /// not offer client authentication and anonymous clients will be accepted.
    ///
    /// This is in contrast to using `WebPkiClientVerifier::builder().allow_unauthenticated().build()`,
    /// which will produce a verifier that will offer client authentication, but not require it.
    pub fn no_client_auth() -> Arc<dyn ClientCertVerifier> {
        Arc::new(NoClientAuth {})
    }

    /// Construct a new `WebpkiClientVerifier`.
    ///
    /// * `roots` is a list of trust anchors to use for certificate validation.
    /// * `root_hint_subjects` is a list of distinguished names to use for hinting acceptable
    ///   certificate authority subjects to a client.
    /// * `crls` is a `Vec` of owned certificate revocation lists (CRLs) to use for
    ///   client certificate validation.
    /// * `revocation_check_depth` controls which certificates have their revocation status checked
    ///   when `crls` are provided.
    /// * `unknown_revocation_policy` controls how certificates with an unknown revocation status
    ///   are handled when `crls` are provided.
    /// * `anonymous_policy` controls whether client authentication is required, or if anonymous
    ///   clients can connect.
    /// * `supported_algs` specifies which signature verification algorithms should be used.
    pub(crate) fn new(
        roots: Arc<RootCertStore>,
        root_hint_subjects: Vec<DistinguishedName>,
        crls: Vec<CertRevocationList<' static > > , revocation_check_depth : RevocationCheckDepth , unknown_revocation_policy : UnknownStatusPolicy , anonymous_policy : AnonymousClientPolicy , supported_algs : WebPkiSupportedAlgorithms ,",97,320
3,1,11,1,3,"offer_client_auth@324-326@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","offer_client_auth","offer_client_auth & self",324,326
6,2,28,1,6,"client_auth_mandatory@328-333@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","client_auth_mandatory","client_auth_mandatory & self",328,333
3,1,17,1,3,"root_hint_subjects@335-337@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","root_hint_subjects","root_hint_subjects & self",335,337
32,3,169,2,37,"verify_client_cert@339-375@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","verify_client_cert","verify_client_cert & self , end_entity : & CertificateDer < '_>,
        intermediates: &[CertificateDer<' _ > ] , now : UnixTime ,",339,375
17,1,50,2,17,"verify_tls12_signature@377-393@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","verify_tls12_signature","verify_tls12_signature & self , message : & [ u8 ] , cert : & CertificateDer < '_>,
        dss: &DigitallySignedStruct,
    ) -> Result<HandshakeSignatureValid, Error> {
        verify_tls12_signature(message, cert, dss, &self.supported_algs)
    }

    fn verify_tls13_signature(
        &self,
        message: &[u8],
        cert: &CertificateDer<' _ > , dss : & DigitallySignedStruct ,",377,393
3,1,20,1,3,"supported_verify_schemes@395-397@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","supported_verify_schemes","supported_verify_schemes & self",395,397
18,1,50,0,18,"load_crls@420-437@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","load_crls","load_crls crls_der : & [ & [ u8 ] ]",420,437
9,1,69,0,9,"load_roots@439-447@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","load_roots","load_roots roots_der : & [ & [ u8 ] ]",439,447
6,1,37,0,6,"test_roots@449-454@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_roots","test_roots",449,454
3,1,12,0,4,"test_client_verifier_no_auth@457-460@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_client_verifier_no_auth","test_client_verifier_no_auth",457,460
8,1,47,0,11,"test_client_verifier_required_auth@463-473@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_client_verifier_required_auth","test_client_verifier_required_auth",463,473
9,1,51,0,12,"test_client_verifier_optional_auth@476-487@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_client_verifier_optional_auth","test_client_verifier_optional_auth",476,487
8,1,47,0,12,"test_client_verifier_without_crls_required_auth@490-501@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_client_verifier_without_crls_required_auth","test_client_verifier_without_crls_required_auth",490,501
9,1,51,0,12,"test_client_verifier_without_crls_opptional_auth@504-515@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_client_verifier_without_crls_opptional_auth","test_client_verifier_without_crls_opptional_auth",504,515
9,1,71,0,10,"test_with_invalid_crls@518-527@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_with_invalid_crls","test_with_invalid_crls",518,527
16,1,116,0,20,"test_with_crls_multiple_calls@530-549@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_with_crls_multiple_calls","test_with_crls_multiple_calls",530,549
9,1,54,0,12,"test_client_verifier_with_crls_required_auth_implicit@552-563@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_client_verifier_with_crls_required_auth_implicit","test_client_verifier_with_crls_required_auth_implicit",552,563
10,1,58,0,13,"test_client_verifier_with_crls_optional_auth@566-578@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_client_verifier_with_crls_optional_auth","test_client_verifier_with_crls_optional_auth",566,578
10,1,58,0,12,"test_client_verifier_ee_only@581-592@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_client_verifier_ee_only","test_client_verifier_ee_only",581,592
10,1,58,0,12,"test_client_verifier_allow_unknown@595-606@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_client_verifier_allow_unknown","test_client_verifier_allow_unknown",595,606
8,1,56,0,9,"test_builder_no_roots@609-617@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","test_builder_no_roots","test_builder_no_roots",609,617
10,2,57,0,11,"smoke@620-630@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/client_verifier.rs","smoke","smoke",620,630
4,1,19,1,4,"only_check_end_entity_revocation@68-71@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/server_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/server_verifier.rs","only_check_end_entity_revocation","only_check_end_entity_revocation mut self",68,71
4,1,19,1,4,"allow_unknown_revocation_status@81-84@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/server_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/server_verifier.rs","allow_unknown_revocation_status","allow_unknown_revocation_status mut self",81,84
13,3,71,1,14,"build@100-113@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/server_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/server_verifier.rs","build","build self",100,113
55,1,53,2,55,"verify_server_cert@213-267@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/server_verifier.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/server_verifier.rs","verify_server_cert","verify_server_cert & self , end_entity : & CertificateDer < '_>,
        intermediates: &[CertificateDer<' _ > ] , server_name : & ServerName < '_>,
        ocsp_response: &[u8],
        now: UnixTime,
    ) -> Result<ServerCertVerified, Error> {
        let cert = ParsedCertificate::try_from(end_entity)?;

        let crl_refs = self.crls.iter().collect::<Vec<_>>();

        let revocation = if self.crls.is_empty() {
            None
        } else {
            // Note: unwrap here is safe because RevocationOptionsBuilder only errors when given
            //       empty CRLs.
            Some(
                webpki::RevocationOptionsBuilder::new(crl_refs.as_slice())
                    // Note: safe to unwrap here - new is only fallible if no CRLs are provided
                    //       and we verify this above.
                    .unwrap()
                    .with_depth(self.revocation_check_depth)
                    .with_status_policy(self.unknown_revocation_policy)
                    .build(),
            )
        };

        // Note: we use the crate-internal `_impl` fn here in order to provide revocation
        // checking information, if applicable.
        verify_server_cert_signed_by_trust_anchor_impl(
            &cert,
            &self.roots,
            intermediates,
            revocation,
            now,
            self.supported.all,
        )?;

        if !ocsp_response.is_empty() {
            trace!('Unvalidated OCSP response: {:?}', ocsp_response.to_vec());
        }

        verify_server_name(&cert, server_name)?;
        Ok(ServerCertVerified::assertion())
    }

    fn verify_tls12_signature(
        &self,
        message: &[u8],
        cert: &CertificateDer<' _ > , dss : & DigitallySignedStruct ,",213,267
3,1,17,1,3,"from@37-39@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/mod.rs","from","from value : CertRevocationListError",37,39
72,1,86,1,72,"fmt@43-114@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/mod.rs","fmt","fmt & self , f : & mut fmt :: Formatter < '_>) -> fmt::Result {
        match self {
            Self::NoRootAnchors => write!(f, 'no root trust anchors were provided'),
            Self::InvalidCrl(e) => write!(f, 'provided CRL could not be parsed: {:?}', e),
        }
    }
}

#[cfg(feature = 'std')]
impl std::error::Error for VerifierBuilderError {}

fn pki_error(error: webpki::Error) -> Error {
    use webpki::Error::*;
    match error {
        BadDer | BadDerTime | TrailingData(_) => CertificateError::BadEncoding.into(),
        CertNotValidYet => CertificateError::NotValidYet.into(),
        CertExpired | InvalidCertValidity => CertificateError::Expired.into(),
        UnknownIssuer => CertificateError::UnknownIssuer.into(),
        CertNotValidForName => CertificateError::NotValidForName.into(),
        CertRevoked => CertificateError::Revoked.into(),
        UnknownRevocationStatus => CertificateError::UnknownRevocationStatus.into(),
        IssuerNotCrlSigner => CertRevocationListError::IssuerInvalidForCrl.into(),

        InvalidSignatureForPublicKey
        | UnsupportedSignatureAlgorithm
        | UnsupportedSignatureAlgorithmForPublicKey => CertificateError::BadSignature.into(),

        InvalidCrlSignatureForPublicKey
        | UnsupportedCrlSignatureAlgorithm
        | UnsupportedCrlSignatureAlgorithmForPublicKey => {
            CertRevocationListError::BadSignature.into()
        }

        _ => CertificateError::Other(OtherError(
            #[cfg(feature = 'std')]
            Arc::new(error),
        ))
        .into(),
    }
}

fn crl_error(e: webpki::Error) -> CertRevocationListError {
    use webpki::Error::*;
    match e {
        InvalidCrlSignatureForPublicKey
        | UnsupportedCrlSignatureAlgorithm
        | UnsupportedCrlSignatureAlgorithmForPublicKey => CertRevocationListError::BadSignature,
        InvalidCrlNumber => CertRevocationListError::InvalidCrlNumber,
        InvalidSerialNumber => CertRevocationListError::InvalidRevokedCertSerialNumber,
        IssuerNotCrlSigner => CertRevocationListError::IssuerInvalidForCrl,
        MalformedExtensions | BadDer | BadDerTime => CertRevocationListError::ParseError,
        UnsupportedCriticalExtension => CertRevocationListError::UnsupportedCriticalExtension,
        UnsupportedCrlVersion => CertRevocationListError::UnsupportedCrlVersion,
        UnsupportedDeltaCrl => CertRevocationListError::UnsupportedDeltaCrl,
        UnsupportedIndirectCrl => CertRevocationListError::UnsupportedIndirectCrl,
        UnsupportedRevocationReason => CertRevocationListError::UnsupportedRevocationReason,

        _ => CertRevocationListError::Other(OtherError(
            #[cfg(feature = 'std')]
            Arc::new(e),
        )),
    }
}

fn parse_crls(
    crls: Vec<CertificateRevocationListDer<' _ > > ,",43,114
23,1,133,0,29,"pki_crl_errors@118-146@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/mod.rs","pki_crl_errors","pki_crl_errors",118,146
45,2,215,0,47,"crl_error_from_webpki@149-195@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/mod.rs","crl_error_from_webpki","crl_error_from_webpki",149,195
28,1,47,2,28,"verify_server_cert_signed_by_trust_anchor@24-51@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/verify.rs","verify_server_cert_signed_by_trust_anchor","verify_server_cert_signed_by_trust_anchor cert : & ParsedCertificate , roots : & RootCertStore , intermediates : & [ CertificateDer < '_>],
    now: UnixTime,
    supported_algs: &[&dyn SignatureVerificationAlgorithm],
) -> Result<(), Error> {
    verify_server_cert_signed_by_trust_anchor_impl(
        cert,
        roots,
        intermediates,
        None, // No revocation checking supported with this API.
        now,
        supported_algs,
    )
}

/// Verify that the `end_entity` has an alternative name matching the `server_name`
/// note: this only verifies the name and should be used in conjuction with more verification
/// like [verify_server_cert_signed_by_trust_anchor]
pub fn verify_server_name(
    cert: &ParsedCertificate,
    server_name: &ServerName<' _ > ,",24,51
7,2,63,1,7,"fips@104-110@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/verify.rs","fips","fips & self",104,110
6,1,43,1,6,"subjects@88-93@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/anchors.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/anchors.rs","subjects","subjects & self",88,93
3,1,17,1,3,"is_empty@96-98@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/anchors.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/anchors.rs","is_empty","is_empty & self",96,98
3,1,17,1,3,"len@101-103@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/anchors.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/anchors.rs","len","len & self",101,103
5,1,55,1,5,"fmt@121-125@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/anchors.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/anchors.rs","fmt","fmt & self , f : & mut fmt :: Formatter < ' _ >",121,125
14,1,83,0,17,"root_cert_store_debug@129-145@crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/anchors.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/webpki/anchors.rs","root_cert_store_debug","root_cert_store_debug",129,145
8,2,84,1,8,"encode@30-37@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","encode","encode & self , bytes : & mut Vec < u8 >",30,37
28,2,146,0,28,"handshake@39-66@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","handshake","handshake parsed : HandshakeMessagePayload < 'a>) -> Self {
        Self::Handshake {
            encoded: Payload::new(parsed.get_encoding()),
            parsed,
        }
    }

    pub fn new(
        typ: ContentType,
        vers: ProtocolVersion,
        payload: &' a [ u8 ] ,",39,66
8,2,59,1,8,"content_type@68-75@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","content_type","content_type & self",68,75
16,2,89,1,17,"from@92-108@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","from","from msg : Message",92,108
17,2,17,1,33,"into_owned@77-109@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","into_owned","into_owned self",77,109
7,2,41,2,8,"is_handshake_type@156-163@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","is_handshake_type","is_handshake_type & self , hstyp : HandshakeType",156,163
9,1,41,2,9,"build_alert@165-173@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","build_alert","build_alert level : AlertLevel , desc : AlertDescription",165,173
6,1,30,0,6,"build_key_update_notify@175-180@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","build_key_update_notify","build_key_update_notify",175,180
7,2,58,1,7,"try_from@195-201@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","try_from","try_from plain : PlainMessage",195,201
13,1,19,1,20,"into_owned@183-202@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/mod.rs","into_owned","into_owned self",183,202
51,3,134,5,58,"new@24-81@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/inbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/inbound.rs","new","new typ : ContentType , version : ProtocolVersion , payload : & 'a mut [u8]) -> Self {
        Self {
            typ,
            version,
            payload: BorrowedPayload(payload),
        }
    }

    /// Force conversion into a plaintext message.
    ///
    /// This should only be used for messages that are known to be in plaintext. Otherwise, the
    /// `InboundOpaqueMessage` should be decrypted into a `PlainMessage` using a `MessageDecrypter`.
    pub fn into_plain_message(self) -> InboundPlainMessage<' a > { InboundPlainMessage { typ : self . typ , version : self . version , payload : self . payload . into_inner , } } pub fn into_tls13_unpadded_message mut self -> Result < InboundPlainMessage < 'a>, Error> {
        let payload = &mut self.payload;

        if payload.len() > MAX_FRAGMENT_LEN + 1 {
            return Err(Error::PeerSentOversizedRecord);
        }

        self.typ = unpad_tls13_payload(payload);
        if self.typ == ContentType::Unknown(0) {
            return Err(PeerMisbehaved::IllegalTlsInnerPlaintext.into());
        }

        if payload.len() > MAX_FRAGMENT_LEN {
            return Err(Error::PeerSentOversizedRecord);
        }

        self.version = ProtocolVersion::TLSv1_3;
        Ok(self.into_plain_message())
    }

    pub(crate) fn read(r: &mut ReaderMut<' a >",24,81
3,2,25,1,3,"is_valid_ccs@150-152@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/inbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/inbound.rs","is_valid_ccs","is_valid_ccs & self",150,152
7,1,49,1,7,"into_owned@155-161@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/inbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/inbound.rs","into_owned","into_owned self",155,161
9,2,54,1,9,"unpad_tls13_payload@171-179@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/inbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/inbound.rs","unpad_tls13_payload","unpad_tls13_payload p : & mut BorrowedPayload",171,179
23,2,132,2,23,"split_at@107-129@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","split_at","split_at & self , mid : usize",107,129
3,1,17,1,3,"is_empty@132-134@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","is_empty","is_empty & self",132,134
6,2,43,1,6,"len@137-142@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","len","len & self",137,142
7,1,28,3,7,"new@166-172@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","new","new typ : ContentType , version : ProtocolVersion , payload : PrefixedPayload",166,172
11,3,72,1,13,"read@178-190@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","read","read r : & mut Reader",178,190
8,1,89,1,8,"encode@192-199@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","encode","encode self",192,199
7,1,43,1,7,"into_plain_message@205-211@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","into_plain_message","into_plain_message self",205,211
5,1,37,1,5,"with_capacity@218-222@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","with_capacity","with_capacity capacity : usize",218,222
3,1,24,1,3,"extend_from_slice@224-226@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","extend_from_slice","extend_from_slice & mut self , slice : & [ u8 ]",224,226
3,1,24,2,3,"extend_from_chunks@228-230@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","extend_from_chunks","extend_from_chunks & mut self , chunks : & OutboundChunks",228,230
3,1,23,2,3,"truncate@232-234@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","truncate","truncate & mut self , len : usize",232,234
3,1,19,1,3,"len@236-238@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","len","len & self",236,238
3,1,22,1,3,"as_ref@242-244@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","as_ref","as_ref & self",242,244
3,1,25,1,3,"as_mut@248-250@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message/outbound.rs","as_mut","as_mut & mut self",248,250
6,1,22,2,6,"new@26-31@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","new","new value : T , retrieved_at : UnixTime",26,31
6,2,58,1,6,"map@33-38@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","map","map & self , f : impl FnOnce & T -> Option < & M >",33,38
8,1,51,1,8,"obfuscated_ticket_age@42-49@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","obfuscated_ticket_age","obfuscated_ticket_age & self",42,49
8,2,48,1,8,"has_expired@53-60@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","has_expired","has_expired & self",53,60
3,1,17,1,3,"deref@66-68@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","deref","deref & self",66,68
3,1,23,2,3,"rewind_epoch@116-118@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","rewind_epoch","rewind_epoch & mut self , delta : u32",116,118
3,1,29,1,3,"set_quic_params@120-122@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","set_quic_params","set_quic_params & mut self , quic_params : & [ u8 ]",120,122
3,1,22,1,3,"quic_params@124-126@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","quic_params","quic_params & self",124,126
3,1,17,1,3,"deref@132-134@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","deref","deref & self",132,134
3,1,23,2,3,"rewind_epoch@190-192@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","rewind_epoch","rewind_epoch & mut self , delta : u32",190,192
3,1,17,1,3,"deref@199-201@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","deref","deref & self",199,201
29,4,220,1,29,"encode@268-296@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","encode","encode & self , bytes : & mut Vec < u8 >",268,296
45,18,299,1,48,"read@298-345@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","read","read r : & mut Reader",298,345
41,2,69,1,117,"server_cert_chain@230-346@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","server_cert_chain","server_cert_chain & self",230,346
25,1,130,2,25,"new@349-373@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","new","new sni : Option < & DnsName < '_>>,
        v: ProtocolVersion,
        cs: CipherSuite,
        ms: &[u8],
        client_cert_chain: Option<CertificateChain<' static > > , alpn : Option < Vec < u8 > > , application_data : Vec < u8 > , creation_time : UnixTime , age_obfuscation_offset : u32 ,",349,373
3,1,15,1,3,"set_extended_ms_used@376-378@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","set_extended_ms_used","set_extended_ms_used & mut self",376,378
18,2,87,3,20,"set_freshness@380-399@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","set_freshness","set_freshness mut self , obfuscated_client_age_ms : u32 , time_now : UnixTime ,",380,399
3,1,17,1,3,"is_fresh@401-403@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","is_fresh","is_fresh & self",401,403
15,1,73,0,15,"serversessionvalue_is_debug@412-426@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","serversessionvalue_is_debug","serversessionvalue_is_debug",412,426
9,1,104,0,9,"serversessionvalue_no_sni@429-437@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","serversessionvalue_no_sni","serversessionvalue_no_sni",429,437
9,1,104,0,9,"serversessionvalue_with_cert@440-448@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/persist.rs","serversessionvalue_with_cert","serversessionvalue_with_cert",440,448
9,2,49,0,10,"corpus_dir@15-24@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","corpus_dir","corpus_dir",15,24
22,3,190,0,35,"test_read_fuzz_corpus@14-48@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","test_read_fuzz_corpus","test_read_fuzz_corpus",14,48
25,1,88,0,26,"can_read_safari_client_hello_with_ip_address_in_sni_extension@51-76@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","can_read_safari_client_hello_with_ip_address_in_sni_extension","can_read_safari_client_hello_with_ip_address_in_sni_extension",51,76
4,1,36,0,4,"alert_is_not_handshake@79-82@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","alert_is_not_handshake","alert_is_not_handshake",79,82
15,2,114,0,15,"construct_all_types@85-99@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","construct_all_types","construct_all_types",85,99
6,1,116,0,6,"debug_payload@102-107@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/message_test.rs","debug_payload","debug_payload",102,107
5,1,44,0,5,"rejects_short_random@28-32@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","rejects_short_random","rejects_short_random",28,32
7,1,62,0,8,"reads_random@35-42@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","reads_random","reads_random",35,42
6,1,29,0,6,"debug_random@45-50@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","debug_random","debug_random",45,50
5,1,44,0,5,"rejects_truncated_sessionid@53-57@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","rejects_truncated_sessionid","rejects_truncated_sessionid",53,57
5,1,44,0,5,"rejects_sessionid_with_bad_length@60-64@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","rejects_sessionid_with_bad_length","rejects_sessionid_with_bad_length",60,64
5,1,68,0,5,"sessionid_with_different_lengths_are_unequal@67-71@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","sessionid_with_different_lengths_are_unequal","sessionid_with_different_lengths_are_unequal",67,71
10,1,86,0,11,"accepts_short_sessionid@74-84@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","accepts_short_sessionid","accepts_short_sessionid",74,84
10,1,85,0,11,"accepts_empty_sessionid@87-97@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","accepts_empty_sessionid","accepts_empty_sessionid",87,97
12,1,120,0,12,"debug_sessionid@100-111@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","debug_sessionid","debug_sessionid",100,111
8,1,94,0,9,"can_roundtrip_unknown_client_ext@114-122@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_unknown_client_ext","can_roundtrip_unknown_client_ext",114,122
5,1,56,0,5,"refuses_client_ext_with_unparsed_bytes@125-129@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","refuses_client_ext_with_unparsed_bytes","refuses_client_ext_with_unparsed_bytes",125,129
5,1,56,0,5,"refuses_server_ext_with_unparsed_bytes@132-136@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","refuses_server_ext_with_unparsed_bytes","refuses_server_ext_with_unparsed_bytes",132,136
5,1,54,0,5,"refuses_certificate_ext_with_unparsed_bytes@139-143@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","refuses_certificate_ext_with_unparsed_bytes","refuses_certificate_ext_with_unparsed_bytes",139,143
5,1,58,0,5,"refuses_certificate_req_ext_with_unparsed_bytes@146-150@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","refuses_certificate_req_ext_with_unparsed_bytes","refuses_certificate_req_ext_with_unparsed_bytes",146,150
5,1,54,0,5,"refuses_helloreq_ext_with_unparsed_bytes@153-157@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","refuses_helloreq_ext_with_unparsed_bytes","refuses_helloreq_ext_with_unparsed_bytes",153,157
5,1,58,0,5,"refuses_newsessionticket_ext_with_unparsed_bytes@160-164@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","refuses_newsessionticket_ext_with_unparsed_bytes","refuses_newsessionticket_ext_with_unparsed_bytes",160,164
8,1,99,0,9,"can_roundtrip_single_sni@167-175@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_single_sni","can_roundtrip_single_sni",167,175
8,1,99,0,9,"can_round_trip_mixed_case_sni@178-186@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_round_trip_mixed_case_sni","can_round_trip_mixed_case_sni",178,186
8,1,99,0,9,"can_roundtrip_other_sni_name_types@189-197@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_other_sni_name_types","can_roundtrip_other_sni_name_types",189,197
13,2,128,0,14,"get_single_hostname_returns_none_for_other_sni_name_types@200-213@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_single_hostname_returns_none_for_other_sni_name_types","get_single_hostname_returns_none_for_other_sni_name_types",200,213
19,2,206,0,23,"can_roundtrip_multiname_sni@216-238@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_multiname_sni","can_roundtrip_multiname_sni",216,238
16,1,310,0,22,"rejects_truncated_sni@241-262@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","rejects_truncated_sni","rejects_truncated_sni",241,262
13,1,186,0,14,"can_roundtrip_psk_identity@265-278@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_psk_identity","can_roundtrip_psk_identity",265,278
13,1,176,0,14,"can_roundtrip_psk_offer@281-294@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_psk_offer","can_roundtrip_psk_offer",281,294
12,1,110,0,14,"can_roundtrip_certstatusreq_for_ocsp@297-310@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_certstatusreq_for_ocsp","can_roundtrip_certstatusreq_for_ocsp",297,310
10,1,76,0,11,"can_roundtrip_certstatusreq_for_other@313-323@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_certstatusreq_for_other","can_roundtrip_certstatusreq_for_other",313,323
16,2,165,0,17,"can_roundtrip_multi_proto@326-342@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_multi_proto","can_roundtrip_multi_proto",326,342
16,2,165,0,17,"can_roundtrip_single_proto@345-361@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_single_proto","can_roundtrip_single_proto",345,361
39,1,395,0,39,"get_sample_clienthellopayload@363-401@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_clienthellopayload","get_sample_clienthellopayload",363,401
3,1,16,0,3,"can_print_all_clientextensions@404-406@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_print_all_clientextensions","can_print_all_clientextensions",404,406
3,1,15,0,3,"can_clone_all_clientextensions@409-411@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_clone_all_clientextensions","can_clone_all_clientextensions",409,411
8,1,66,0,10,"client_has_duplicate_extensions_works@414-423@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_has_duplicate_extensions_works","client_has_duplicate_extensions_works",414,423
16,3,140,0,17,"test_truncated_psk_offer@426-442@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","test_truncated_psk_offer","test_truncated_psk_offer",426,442
12,3,90,0,13,"test_truncated_client_hello_is_detected@445-457@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","test_truncated_client_hello_is_detected","test_truncated_client_hello_is_detected",445,457
21,5,163,0,30,"test_truncated_client_extension_is_detected@460-489@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","test_truncated_client_extension_is_detected","test_truncated_client_extension_is_detected",460,489
13,1,126,2,16,"test_client_extension_getter@491-506@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","test_client_extension_getter","test_client_extension_getter typ : ExtensionType , getter : fn & ClientHelloPayload -> bool",491,506
5,1,28,0,5,"client_get_sni_extension@509-513@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_get_sni_extension","client_get_sni_extension",509,513
5,1,28,0,5,"client_get_sigalgs_extension@516-520@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_get_sigalgs_extension","client_get_sigalgs_extension",516,520
5,1,28,0,5,"client_get_namedgroups_extension@523-527@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_get_namedgroups_extension","client_get_namedgroups_extension",523,527
5,1,28,0,5,"client_get_ecpoints_extension@531-535@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_get_ecpoints_extension","client_get_ecpoints_extension",531,535
5,1,28,0,5,"client_get_alpn_extension@538-542@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_get_alpn_extension","client_get_alpn_extension",538,542
5,1,28,0,5,"client_get_quic_params_extension@545-549@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_get_quic_params_extension","client_get_quic_params_extension",545,549
5,1,28,0,5,"client_get_versions_extension@552-556@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_get_versions_extension","client_get_versions_extension",552,556
5,1,28,0,5,"client_get_keyshare_extension@559-563@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_get_keyshare_extension","client_get_keyshare_extension",559,563
3,1,26,0,3,"client_get_psk@566-568@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_get_psk","client_get_psk",566,568
5,1,28,0,5,"client_get_psk_modes@571-575@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","client_get_psk_modes","client_get_psk_modes",571,575
18,5,153,0,27,"test_truncated_helloretry_extension_is_detected@578-604@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","test_truncated_helloretry_extension_is_detected","test_truncated_helloretry_extension_is_detected",578,604
13,1,128,2,16,"test_helloretry_extension_getter@606-621@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","test_helloretry_extension_getter","test_helloretry_extension_getter typ : ExtensionType , getter : fn & HelloRetryRequest -> bool",606,621
6,1,28,0,6,"helloretry_get_requested_key_share_group@624-629@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","helloretry_get_requested_key_share_group","helloretry_get_requested_key_share_group",624,629
3,1,26,0,3,"helloretry_get_cookie@632-634@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","helloretry_get_cookie","helloretry_get_cookie",632,634
5,1,28,0,5,"helloretry_get_supported_versions@637-641@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","helloretry_get_supported_versions","helloretry_get_supported_versions",637,641
21,5,163,0,30,"test_truncated_server_extension_is_detected@644-673@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","test_truncated_server_extension_is_detected","test_truncated_server_extension_is_detected",644,673
13,1,126,2,16,"test_server_extension_getter@675-690@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","test_server_extension_getter","test_server_extension_getter typ : ExtensionType , getter : fn & ServerHelloPayload -> bool",675,690
3,1,26,0,3,"server_get_key_share@693-695@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","server_get_key_share","server_get_key_share",693,695
3,1,26,0,3,"server_get_psk_index@698-700@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","server_get_psk_index","server_get_psk_index",698,700
5,1,28,0,5,"server_get_ecpoints_extension@703-707@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","server_get_ecpoints_extension","server_get_ecpoints_extension",703,707
5,1,28,0,5,"server_get_supported_versions@710-714@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","server_get_supported_versions","server_get_supported_versions",710,714
15,1,135,2,18,"test_cert_extension_getter@716-733@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","test_cert_extension_getter","test_cert_extension_getter typ : ExtensionType , getter : fn & CertificateEntry -> bool",716,733
5,1,28,0,5,"certentry_get_ocsp_response@736-740@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","certentry_get_ocsp_response","certentry_get_ocsp_response",736,740
26,1,212,0,26,"get_sample_serverhellopayload@742-767@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_serverhellopayload","get_sample_serverhellopayload",742,767
3,1,16,0,3,"can_print_all_serverextensions@770-772@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_print_all_serverextensions","can_print_all_serverextensions",770,772
3,1,15,0,3,"can_clone_all_serverextensions@775-777@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_clone_all_serverextensions","can_clone_all_serverextensions",775,777
16,1,104,0,16,"get_sample_helloretryrequest@779-794@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_helloretryrequest","get_sample_helloretryrequest",779,794
17,1,118,0,17,"get_sample_certificatepayloadtls13@796-812@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_certificatepayloadtls13","get_sample_certificatepayloadtls13",796,812
12,1,81,0,12,"get_sample_serverkeyexchangepayload_ecdhe@814-825@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_serverkeyexchangepayload_ecdhe","get_sample_serverkeyexchangepayload_ecdhe",814,825
10,1,87,0,10,"get_sample_serverkeyexchangepayload_dhe@827-836@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_serverkeyexchangepayload_dhe","get_sample_serverkeyexchangepayload_dhe",827,836
3,1,26,0,3,"get_sample_serverkeyexchangepayload_unknown@838-840@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_serverkeyexchangepayload_unknown","get_sample_serverkeyexchangepayload_unknown",838,840
7,1,52,0,7,"get_sample_certificaterequestpayload@842-848@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_certificaterequestpayload","get_sample_certificaterequestpayload",842,848
13,1,104,0,13,"get_sample_certificaterequestpayloadtls13@850-862@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_certificaterequestpayloadtls13","get_sample_certificaterequestpayloadtls13",850,862
6,1,30,0,6,"get_sample_newsessionticketpayload@864-869@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_newsessionticketpayload","get_sample_newsessionticketpayload",864,869
12,1,89,0,12,"get_sample_newsessionticketpayloadtls13@871-882@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_newsessionticketpayloadtls13","get_sample_newsessionticketpayloadtls13",871,882
3,1,16,0,3,"get_sample_encryptedextensions@884-886@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_encryptedextensions","get_sample_encryptedextensions",884,886
5,1,26,0,5,"get_sample_certificatestatus@888-892@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_sample_certificatestatus","get_sample_certificatestatus",888,892
225,1,461,0,225,"get_all_tls12_handshake_payloads@894-1118@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","get_all_tls12_handshake_payloads","get_all_tls12_handshake_payloads",894,1118
13,2,113,0,15,"can_roundtrip_all_tls13_handshake_payloads@1121-1135@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_roundtrip_all_tls13_handshake_payloads","can_roundtrip_all_tls13_handshake_payloads",1121,1135
5,1,54,1,5,"put_u24@1137-1141@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","put_u24","put_u24 u : u32 , b : & mut [ u8 ]",1137,1141
27,5,207,0,33,"can_detect_truncation_of_all_tls13_handshake_payloads@1144-1176@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_detect_truncation_of_all_tls13_handshake_payloads","can_detect_truncation_of_all_tls13_handshake_payloads",1144,1176
9,1,74,0,9,"cannot_read_messagehash_from_network@1179-1187@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","cannot_read_messagehash_from_network","cannot_read_messagehash_from_network",1179,1187
21,1,158,0,24,"cannot_decode_huge_certificate@1190-1213@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","cannot_decode_huge_certificate","cannot_decode_huge_certificate",1190,1213
6,1,50,0,6,"can_decode_server_hello_from_api_devicecheck_apple_com@1216-1221@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","can_decode_server_hello_from_api_devicecheck_apple_com","can_decode_server_hello_from_api_devicecheck_apple_com",1216,1221
7,1,75,0,7,"wrapped_dn_encoding@1224-1230@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake_test.rs","wrapped_dn_encoding","wrapped_dn_encoding",1224,1230
3,1,24,0,3,"from@45-47@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","from","from v : Vec < u8 >",45,47
3,1,22,1,3,"as_ref@51-53@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","as_ref","as_ref & self",51,53
10,3,64,2,12,"eq@129-140@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","eq","eq & self , other : & Self",129,140
3,1,26,1,3,"encode@194-196@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",194,196
4,1,37,2,4,"read@198-201@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","read","read typ : ExtensionType , r : & mut Reader",198,201
25,2,319,1,26,"encode@584-609@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","encode","encode & self , bytes : & mut Vec < u8 >",584,609
40,19,431,1,42,"read@611-652@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","read","read r : & mut Reader",611,652
345,14,508,18,430,"new_hostname@224-653@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/handshake.rs","new_hostname","new_hostname hostname : DnsName < 'static>) -> Self {
        Self::HostName(hostname)
    }

    fn read_hostname(r: &mut Reader) -> Result<Self, InvalidMessage> {
        use pki_types::ServerName;
        let raw = PayloadU16::read(r)?;

        match ServerName::try_from(raw.0.as_slice()) {
            Ok(ServerName::DnsName(d)) => Ok(Self::HostName(d.to_owned())),
            Ok(ServerName::IpAddress(_)) => Ok(Self::IpAddress(raw)),
            Ok(_) | Err(_) => {
                warn!(
                    'Illegal SNI hostname received {:?}',
                    String::from_utf8_lossy(&raw.0)
                );
                Err(InvalidMessage::InvalidServerName)
            }
        }
    }

    fn encode(&self, bytes: &mut Vec<u8>) {
        match *self {
            Self::HostName(ref name) => {
                (name.as_ref().len() as u16).encode(bytes);
                bytes.extend_from_slice(name.as_ref().as_bytes());
            }
            Self::IpAddress(ref r) => r.encode(bytes),
            Self::Unknown(ref r) => r.encode(bytes),
        }
    }
}

#[derive(Clone, Debug)]
pub struct ServerName {
    pub(crate) typ: ServerNameType,
    pub(crate) payload: ServerNamePayload,
}

impl Codec<' _ > for ServerName { fn encode & self , bytes : & mut Vec < u8 > { self . typ . encode bytes ; self . payload . encode bytes ; } fn read r : & mut Reader -> Result < Self , InvalidMessage > { let typ = ServerNameType :: read r ? ; let payload = match typ { ServerNameType :: HostName => ServerNamePayload :: read_hostname r ? , _ => ServerNamePayload :: Unknown Payload :: read r . into_owned , } ; Ok Self { typ , payload } } } impl TlsListElement for ServerName { const SIZE_LEN : ListLength = ListLength :: U16 ; } pub crate trait ConvertServerNameList { fn has_duplicate_names_for_type & self -> bool ; fn single_hostname & self -> Option < DnsName < '_>>;
}

impl ConvertServerNameList for [ServerName] {
    /// RFC6066: 'The ServerNameList MUST NOT contain more than one name of the same name_type.'
    fn has_duplicate_names_for_type(&self) -> bool {
        has_duplicates::<_, _, u8>(self.iter().map(|name| name.typ))
    }

    fn single_hostname(&self) -> Option<DnsName<' _ > > { fn only_dns_hostnames name : & ServerName -> Option < DnsName < '_>> {
            if let ServerNamePayload::HostName(ref dns) = name.payload {
                Some(dns.borrow())
            } else {
                None
            }
        }

        self.iter()
            .filter_map(only_dns_hostnames)
            .next()
    }
}

wrapped_payload!(pub struct ProtocolName, PayloadU8,);

impl TlsListElement for ProtocolName {
    const SIZE_LEN: ListLength = ListLength::U16;
}

pub(crate) trait ConvertProtocolNameList {
    fn from_slices(names: &[&[u8]]) -> Self;
    fn to_slices(&self) -> Vec<&[u8]>;
    fn as_single_slice(&self) -> Option<&[u8]>;
}

impl ConvertProtocolNameList for Vec<ProtocolName> {
    fn from_slices(names: &[&[u8]]) -> Self {
        let mut ret = Self::new();

        for name in names {
            ret.push(ProtocolName::from(name.to_vec()));
        }

        ret
    }

    fn to_slices(&self) -> Vec<&[u8]> {
        self.iter()
            .map(|proto| proto.as_ref())
            .collect::<Vec<&[u8]>>()
    }

    fn as_single_slice(&self) -> Option<&[u8]> {
        if self.len() == 1 {
            Some(self[0].as_ref())
        } else {
            None
        }
    }
}

// --- TLS 1.3 Key shares ---
#[derive(Clone, Debug)]
pub struct KeyShareEntry {
    pub(crate) group: NamedGroup,
    pub(crate) payload: PayloadU16,
}

impl KeyShareEntry {
    pub fn new(group: NamedGroup, payload: impl Into<Vec<u8>>) -> Self {
        Self {
            group,
            payload: PayloadU16::new(payload.into()),
        }
    }

    pub fn group(&self) -> NamedGroup {
        self.group
    }
}

impl Codec<' _ > for KeyShareEntry { fn encode & self , bytes : & mut Vec < u8 > { self . group . encode bytes ; self . payload . encode bytes ; } fn read r : & mut Reader -> Result < Self , InvalidMessage > { let group = NamedGroup :: read r ? ; let payload = PayloadU16 :: read r ? ; Ok Self { group , payload } } } #[derive(Clone, Debug)] pub crate struct PresharedKeyIdentity { pub crate identity : PayloadU16 , pub crate obfuscated_ticket_age : u32 , } impl PresharedKeyIdentity { pub crate fn new id : Vec < u8 > , age : u32 -> Self { Self { identity : PayloadU16 :: new id , obfuscated_ticket_age : age , } } } impl Codec < '_> for PresharedKeyIdentity {
    fn encode(&self, bytes: &mut Vec<u8>) {
        self.identity.encode(bytes);
        self.obfuscated_ticket_age.encode(bytes);
    }

    fn read(r: &mut Reader) -> Result<Self, InvalidMessage> {
        Ok(Self {
            identity: PayloadU16::read(r)?,
            obfuscated_ticket_age: u32::read(r)?,
        })
    }
}

impl TlsListElement for PresharedKeyIdentity {
    const SIZE_LEN: ListLength = ListLength::U16;
}

wrapped_payload!(pub(crate) struct PresharedKeyBinder, PayloadU8,);

impl TlsListElement for PresharedKeyBinder {
    const SIZE_LEN: ListLength = ListLength::U16;
}

#[derive(Clone, Debug)]
pub struct PresharedKeyOffer {
    pub(crate) identities: Vec<PresharedKeyIdentity>,
    pub(crate) binders: Vec<PresharedKeyBinder>,
}

impl PresharedKeyOffer {
    /// Make a new one with one entry.
    pub(crate) fn new(id: PresharedKeyIdentity, binder: Vec<u8>) -> Self {
        Self {
            identities: vec![id],
            binders: vec![PresharedKeyBinder::from(binder)],
        }
    }
}

impl Codec<' _ > for PresharedKeyOffer { fn encode & self , bytes : & mut Vec < u8 > { self . identities . encode bytes ; self . binders . encode bytes ; } fn read r : & mut Reader -> Result < Self , InvalidMessage > { Ok Self { identities : Vec :: read r ? , binders : Vec :: read r ? , } } } wrapped_payload ! pub crate struct ResponderId , PayloadU16 , ; impl TlsListElement for ResponderId { const SIZE_LEN : ListLength = ListLength :: U16 ; } #[derive(Clone, Debug)] pub struct OcspCertificateStatusRequest { pub crate responder_ids : Vec < ResponderId > , pub crate extensions : PayloadU16 , } impl Codec < '_> for OcspCertificateStatusRequest {
    fn encode(&self, bytes: &mut Vec<u8>) {
        CertificateStatusType::OCSP.encode(bytes);
        self.responder_ids.encode(bytes);
        self.extensions.encode(bytes);
    }

    fn read(r: &mut Reader) -> Result<Self, InvalidMessage> {
        Ok(Self {
            responder_ids: Vec::read(r)?,
            extensions: PayloadU16::read(r)?,
        })
    }
}

#[derive(Clone, Debug)]
pub enum CertificateStatusRequest {
    Ocsp(OcspCertificateStatusRequest),
    Unknown((CertificateStatusType, Payload<' static >",224,653
5,1,15,0,5,"default@13-17@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/fragmenter.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/fragmenter.rs","default","default",13,17
6,3,43,1,6,"key_exchange_algorithm@199-204@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","key_exchange_algorithm","key_exchange_algorithm self",199,204
3,1,11,0,3,"default@308-310@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","default","default",308,310
3,1,11,0,3,"default@329-331@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","default","default",329,331
41,1,239,0,41,"test_enums@357-397@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","test_enums","test_enums",357,397
11,3,109,2,13,"test_enum8@399-411@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","test_enum8","test_enum8 first : T , last : T",399,411
11,3,109,2,13,"test_enum16@413-425@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","test_enum16","test_enum16 first : T , last : T",413,425
5,2,46,1,5,"get8@427-431@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","get8","get8 enum_value : & T",427,431
5,2,62,1,5,"get16@433-437@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/enums.rs","get16","get16 enum_value : & T",433,437
5,1,42,1,5,"set_err@239-243@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","set_err","set_err & mut self , err : impl Into < Error >",239,243
17,5,142,3,18,"push@307-324@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","push","push & mut self , version : ProtocolVersion , payload : & [ u8 ] , buffer : & mut DeframerVecBuffer ,",307,324
12,3,98,3,17,"read@328-344@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","read","read & mut self , rd : & mut dyn io :: Read , buffer : & mut DeframerVecBuffer ,",328,344
3,1,21,1,3,"len@377-379@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","len","len & self",377,379
3,1,17,1,3,"is_empty@474-476@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","is_empty","is_empty & self",474,476
3,1,19,2,3,"advance@478-480@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","advance","advance & mut self , num_bytes : usize",478,480
3,1,27,1,3,"unfilled@482-484@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","unfilled","unfilled & mut self",482,484
3,1,27,1,3,"filled_mut@489-491@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","filled_mut","filled_mut & mut self",489,491
3,1,24,1,3,"filled@493-495@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","filled","filled & self",493,495
24,1,48,1,25,"copy@507-531@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","copy","copy & mut self , payload : & ExternalPayload < 'a>, _at: usize) {
        let len = payload.len();
        self.unfilled()[..len].copy_from_slice(payload.0);
        self.advance(len);
    }
}

/// A borrowed version of [`DeframerVecBuffer`] that tracks discard operations
#[derive(Debug)]
pub struct DeframerSliceBuffer<' a > { buf : & 'a mut [u8],
    // number of bytes to discard from the front of `buf` at a later time
    discard: usize,
    taken: usize,
}

impl<' a > DeframerSliceBuffer < 'a> {
    pub fn new(buf: &' a mut [ u8 ]",507,531
3,1,19,2,3,"queue_discard@534-536@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","queue_discard","queue_discard & mut self , num_bytes : usize",534,536
3,1,13,1,3,"pending_discard@539-541@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","pending_discard","pending_discard & self",539,541
3,1,17,1,3,"is_empty@543-545@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","is_empty","is_empty & self",543,545
23,1,90,2,23,"take@552-574@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/deframer.rs","take","take & mut self , raw : RawSlice",552,574
6,2,35,1,6,"bytes@29-34@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/base.rs","bytes","bytes & self",29,34
14,1,26,1,14,"into_owned@36-49@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/base.rs","into_owned","into_owned self",36,49
4,1,50,1,4,"encode@63-66@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/base.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/base.rs","encode","encode & self , bytes : & mut Vec < u8 >",63,66
10,2,67,1,10,"from_named_group@16-25@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ffdhe_groups.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ffdhe_groups.rs","from_named_group","from_named_group named_group : NamedGroup",16,25
10,2,67,1,10,"named_group@30-39@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ffdhe_groups.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ffdhe_groups.rs","named_group","named_group & self",30,39
8,3,51,0,8,"trim_leading_zeros@43-50@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ffdhe_groups.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ffdhe_groups.rs","trim_leading_zeros","trim_leading_zeros buf : & [ u8 ]",43,50
7,1,34,0,15,"from_params_trimming_leading_zeros@42-56@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ffdhe_groups.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ffdhe_groups.rs","from_params_trimming_leading_zeros","from_params_trimming_leading_zeros p : & 'a [u8], g: &' a [ u8 ]",42,56
12,2,56,0,12,"named_group_ffdhe_group_roudtrip@100-111@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ffdhe_groups.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ffdhe_groups.rs","named_group_ffdhe_group_roudtrip","named_group_ffdhe_group_roudtrip",100,111
10,2,89,0,13,"smoketest@31-43@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/mod.rs","smoketest","smoketest",31,43
4,1,35,1,4,"encode@15-18@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/alert.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/alert.rs","encode","encode & self , bytes : & mut Vec < u8 >",15,18
6,3,59,1,6,"read@20-25@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/alert.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/alert.rs","read","read r : & mut Reader",20,25
47,2,99,2,52,"init@23-74@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/codec.rs","init","init bytes : & 'a [u8]) -> Self {
        Reader {
            buffer: bytes,
            cursor: 0,
        }
    }

    /// Attempts to create a new Reader on a sub section of this
    /// readers bytes by taking a slice of the provided `length`
    /// will return None if there is not enough bytes
    pub fn sub(&mut self, length: usize) -> Result<Self, InvalidMessage> {
        match self.take(length) {
            Some(bytes) => Ok(Reader::init(bytes)),
            None => Err(InvalidMessage::MessageTooShort),
        }
    }

    /// Borrows a slice of all the remaining bytes
    /// that appear after the cursor position.
    ///
    /// Moves the cursor to the end of the buffer length.
    pub fn rest(&mut self) -> &' a [ u8 ] { let rest = & self . buffer [ self . cursor . . ] ; self . cursor = self . buffer . len ; rest } pub fn take & mut self , length : usize -> Option < & 'a [u8]> {
        if self.left() < length {
            return None;
        }
        let current = self.cursor;
        self.cursor += length;
        Some(&self.buffer[current..current + length])
    }

    /// Used to check whether the reader has any content left
    /// after the cursor (cursor has not reached end of buffer)
    pub fn any_left(&self) -> bool {
        self.cursor < self.buffer.len()
    }

    pub fn expect_empty(&self, name: &' static str",23,74
3,1,13,1,3,"used@78-80@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/codec.rs","used","used & self",78,80
3,1,21,1,3,"left@84-86@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/codec.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/codec.rs","left","left & self",84,86
3,1,24,1,3,"encode@10-12@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ccs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ccs.rs","encode","encode & self , bytes : & mut Vec < u8 >",10,12
8,3,59,1,9,"read@14-22@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ccs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/ccs.rs","read","read r : & mut Reader",14,22
3,1,37,1,3,"to_array@26-28@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","to_array","to_array self",26,28
3,1,37,1,3,"encode@43-45@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","encode","encode & self , bytes : & mut alloc :: vec :: Vec < u8 >",43,45
6,2,74,1,6,"read@47-52@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","read","read r : & mut Reader",47,52
13,2,21,1,22,"as_str@32-53@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","as_str","as_str & self",32,53
6,2,40,1,6,"from@56-61@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","from","from x : $ uint",56,61
6,2,39,1,6,"from@65-70@crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/msgs/macros.rs","from","from value : $ enum_name",65,70
29,2,58,1,29,"to_bytes@29-57@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","to_bytes","to_bytes self",29,57
25,3,119,4,29,"client_early_traffic_secret@86-114@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","client_early_traffic_secret","client_early_traffic_secret & self , hs_hash : & hash :: Output , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] , common : & mut CommonState ,",86,114
10,1,45,2,10,"resumption_psk_binder_key_and_sign_verify_data@116-125@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","resumption_psk_binder_key_and_sign_verify_data","resumption_psk_binder_key_and_sign_verify_data & self , hs_hash : & hash :: Output ,",116,125
48,2,106,3,54,"new@137-190@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","new","new suite : & 'static Tls13CipherSuite) -> Self {
        Self {
            ks: KeySchedule::new_with_empty_secret(suite),
        }
    }

    pub(crate) fn into_handshake(
        mut self,
        shared_secret: SharedSecret,
    ) -> KeyScheduleHandshakeStart {
        self.ks
            .input_secret(shared_secret.secret_bytes());
        KeyScheduleHandshakeStart { ks: self.ks }
    }
}

impl From<KeyScheduleEarly> for KeySchedulePreHandshake {
    fn from(KeyScheduleEarly { ks }: KeyScheduleEarly) -> Self {
        Self { ks }
    }
}

/// KeySchedule during handshake.
pub(crate) struct KeyScheduleHandshakeStart {
    ks: KeySchedule,
}

impl KeyScheduleHandshakeStart {
    pub(crate) fn derive_client_handshake_secrets(
        mut self,
        early_data_enabled: bool,
        hs_hash: hash::Output,
        suite: &' static Tls13CipherSuite , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] , common : & mut CommonState ,",137,190
13,1,80,4,17,"derive_server_handshake_secrets@192-208@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","derive_server_handshake_secrets","derive_server_handshake_secrets self , hs_hash : hash :: Output , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] , common : & mut CommonState ,",192,208
35,2,169,4,39,"into_handshake@210-248@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","into_handshake","into_handshake self , hs_hash : hash :: Output , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] , common : & mut CommonState ,",210,248
4,1,32,2,4,"sign_server_finish@258-261@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","sign_server_finish","sign_server_finish & self , hs_hash : & hash :: Output",258,261
5,1,40,2,5,"set_handshake_encrypter@263-267@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","set_handshake_encrypter","set_handshake_encrypter & self , common : & mut CommonState",263,267
18,2,86,2,18,"set_handshake_decrypter@269-286@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","set_handshake_decrypter","set_handshake_decrypter & self , skip_requested : Option < usize > , common : & mut CommonState ,",269,286
31,2,174,4,35,"into_traffic_with_client_finished_pending@288-322@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","into_traffic_with_client_finished_pending","into_traffic_with_client_finished_pending self , hs_hash : hash :: Output , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] , common : & mut CommonState ,",288,322
13,1,87,4,13,"into_pre_finished_client_traffic@324-336@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","into_pre_finished_client_traffic","into_pre_finished_client_traffic self , pre_finished_hash : hash :: Output , handshake_hash : hash :: Output , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] ,",324,336
28,2,149,2,31,"into_traffic@344-374@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","into_traffic","into_traffic self , common : & mut CommonState",344,374
6,1,42,2,6,"update_decrypter@386-391@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","update_decrypter","update_decrypter & self , common : & mut CommonState",386,391
18,1,86,3,21,"sign_client_finish@393-413@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","sign_client_finish","sign_client_finish self , hs_hash : & hash :: Output , common : & mut CommonState ,",393,413
32,1,120,3,36,"new@426-461@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","new","new mut ks : KeySchedule , hs_hash : hash :: Output , key_log : & dyn KeyLog , client_random : & [ u8 ; 32 ] ,",426,461
5,1,45,2,5,"update_encrypter_and_notify@463-467@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","update_encrypter_and_notify","update_encrypter_and_notify & mut self , common : & mut CommonState",463,467
4,1,43,2,4,"update_decrypter@469-472@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","update_decrypter","update_decrypter & mut self , common : & mut CommonState",469,472
9,2,65,2,10,"next_application_traffic_secret@474-483@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","next_application_traffic_secret","next_application_traffic_secret & mut self , side : Side",474,483
11,1,56,2,11,"resumption_master_secret_and_derive_ticket_psk@485-495@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","resumption_master_secret_and_derive_ticket_psk","resumption_master_secret_and_derive_ticket_psk & self , hs_hash : & hash :: Output , nonce : & [ u8 ] ,",485,495
9,1,59,1,9,"export_keying_material@497-505@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","export_keying_material","export_keying_material & self , out : & mut [ u8 ] , label : & [ u8 ] , context : Option < & [ u8 ] > ,",497,505
51,1,44,2,51,"expand@508-558@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","expand","expand secret : & OkmBlock , hkdf : & 'static dyn Hkdf,
            aead_key_len: usize,
        ) -> (AeadKey, Iv) {
            let expander = hkdf.expander_for_okm(secret);

            (
                hkdf_expand_label_aead_key(expander.as_ref(), aead_key_len, b'key', &[]),
                hkdf_expand_label(expander.as_ref(), b'iv', &[]),
            )
        }

        let (client_key, client_iv) = expand(
            &self.current_client_traffic_secret,
            self.ks.suite.hkdf_provider,
            self.ks.suite.aead_alg.key_len(),
        );
        let (server_key, server_iv) = expand(
            &self.current_server_traffic_secret,
            self.ks.suite.hkdf_provider,
            self.ks.suite.aead_alg.key_len(),
        );
        let client_secrets = self
            .ks
            .suite
            .aead_alg
            .extract_keys(client_key, client_iv)?;
        let server_secrets = self
            .ks
            .suite
            .aead_alg
            .extract_keys(server_key, server_iv)?;

        let (tx, rx) = match side {
            Side::Client => (client_secrets, server_secrets),
            Side::Server => (server_secrets, client_secrets),
        };
        Ok(PartiallyExtractedSecrets { tx, rx })
    }
}

impl KeySchedule {
    fn new(suite: &' static Tls13CipherSuite , secret : & [ u8 ]",508,558
11,1,87,3,12,"set_encrypter@560-571@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","set_encrypter","set_encrypter & self , secret : & OkmBlock , common : & mut CommonState",560,571
5,1,33,3,5,"set_decrypter@573-577@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","set_decrypter","set_decrypter & self , secret : & OkmBlock , common : & mut CommonState",573,577
9,1,79,2,9,"derive_decrypter@579-587@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/key_schedule.rs","derive_decrypter","derive_decrypter & self , secret : & OkmBlock",579,587
3,1,26,2,3,"eq@76-78@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/mod.rs","eq","eq & self , other : & Self",76,78
5,1,46,1,5,"fmt@82-86@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/mod.rs","fmt","fmt & self , f : & mut fmt :: Formatter < ' _ >",82,86
3,1,24,1,3,"construct_client_verify_message@90-92@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/mod.rs","construct_client_verify_message","construct_client_verify_message handshake_hash : & hash :: Output",90,92
3,1,24,1,3,"construct_server_verify_message@95-97@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/mod.rs","construct_server_verify_message","construct_server_verify_message handshake_hash : & hash :: Output",95,97
10,1,63,1,10,"construct_verify_message@99-108@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls13/mod.rs","construct_verify_message","construct_verify_message handshake_hash : & hash :: Output , context_string_with_0 : & [ u8 ] ,",99,108
5,1,22,1,5,"set_kx_hint@16-20@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/handy.rs","set_kx_hint","set_kx_hint & self , _ : ServerName < 'static>, _: NamedGroup) {}

    fn kx_hint(&self, _: &ServerName<' _ >",16,20
5,1,24,1,5,"set_tls12_session@22-26@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/handy.rs","set_tls12_session","set_tls12_session & self , _ : ServerName < 'static>, _: persist::Tls12ClientSessionValue) {}

    fn tls12_session(&self, _: &ServerName<' _ >",22,26
3,1,23,2,3,"remove_tls12_session@28-30@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/handy.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/handy.rs","remove_tls12_session","remove_tls12_session & self , _ : & ServerName < '_>) {}

    fn insert_tls13_ticket(&self, _: ServerName<' static > , _ : persist :: Tls13ClientSessionValue",28,30
47,7,208,0,51,"find_session@43-93@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/hs.rs","find_session","find_session server_name : & ServerName < 'static>,
    config: &ClientConfig,
    cx: &mut ClientContext<' _ > ,",43,93
32,3,57,0,33,"start_handshake@95-127@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/hs.rs","start_handshake","start_handshake server_name : ServerName < 'static>,
    extra_exts: Vec<ClientExtension>,
    config: Arc<ClientConfig>,
    cx: &mut ClientContext<' _ > ,",95,127
32,6,166,2,41,"process_alpn_protocol@471-511@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/hs.rs","process_alpn_protocol","process_alpn_protocol common : & mut CommonState , config : & ClientConfig , proto : Option < & [ u8 ] > ,",471,511
9,1,26,0,9,"into_owned@712-720@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/hs.rs","into_owned","into_owned self : Box < Self >",712,720
68,1,237,1,174,"set_kx_hint@45-218@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/client_conn.rs","set_kx_hint","set_kx_hint & self , server_name : ServerName < 'static>, group: NamedGroup);

    /// This should return the value most recently passed to `set_kx_hint`
    /// for the given `server_name`.
    ///
    /// If `None` is returned, the caller chooses the first configured group,
    /// and an extra round trip might happen if that choice is unsatisfactory
    /// to the server.
    fn kx_hint(&self, server_name: &ServerName<' _ >",45,218
3,1,21,0,3,"builder@227-229@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/client_conn.rs","builder","builder",227,229
392,15,1289,51,502,"builder_with_protocol_versions@244-745@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/client_conn.rs","builder_with_protocol_versions","builder_with_protocol_versions versions : & [ & 'static versions::SupportedProtocolVersion],
    ) -> ConfigBuilder<Self, WantsVerifier> {
        // Safety assumptions:
        // 1. that the provider has been installed (explicitly or implicitly)
        // 2. that the process-level default provider is usable with the supplied protocol versions.
        Self::builder_with_provider(Arc::clone(
            CryptoProvider::get_default_or_install_from_crate_features(),
        ))
        .with_protocol_versions(versions)
        .unwrap()
    }

    /// Create a builder for a client configuration with a specific [`CryptoProvider`].
    ///
    /// This will use the provider' s configured ciphersuites . You must additionally choose #[cfg(feature = 'std')] pub fn builder_with_provider provider : Arc < CryptoProvider > , -> ConfigBuilder < Self , WantsVersions > { ConfigBuilder { state : WantsVersions { provider , time_provider : Arc :: new DefaultTimeProvider , } , side : PhantomData , } } pub fn builder_with_details provider : Arc < CryptoProvider > , time_provider : Arc < dyn TimeProvider > , -> ConfigBuilder < Self , WantsVersions > { ConfigBuilder { state : WantsVersions { provider , time_provider , } , side : PhantomData , } } pub fn fips & self -> bool { #[cfg(feature = 'tls12')] { self . provider . fips && self . require_ems } #[cfg(not(feature = 'tls12'))] { self . provider . fips } } pub fn crypto_provider & self -> & Arc < CryptoProvider > { & self . provider } pub fn dangerous & mut self -> danger :: DangerousClientConfig < '_> {
        danger::DangerousClientConfig { cfg: self }
    }

    /// We support a given TLS version if it' s quoted in the configured pub crate fn supports_version & self , v : ProtocolVersion -> bool { self . versions . contains v && self . provider . cipher_suites . iter . any | cs | cs . version . version == v } #[cfg(feature = 'std')] pub crate fn supports_protocol & self , proto : Protocol -> bool { self . provider . cipher_suites . iter . any | cs | cs . usable_for_protocol proto } pub super fn find_cipher_suite & self , suite : CipherSuite -> Option < SupportedCipherSuite > { self . provider . cipher_suites . iter . copied . find | & scs | scs . suite == suite } pub super fn find_kx_group & self , group : NamedGroup -> Option < & 'static dyn SupportedKxGroup> {
        self.provider
            .kx_groups
            .iter()
            .copied()
            .find(|skxg| skxg.name() == group)
    }

    pub(super) fn current_time(&self) -> Result<UnixTime, Error> {
        self.time_provider
            .current_time()
            .ok_or(Error::FailedToGetCurrentTime)
    }
}

impl Clone for ClientConfig {
    fn clone(&self) -> Self {
        Self {
            provider: Arc::<CryptoProvider>::clone(&self.provider),
            resumption: self.resumption.clone(),
            alpn_protocols: self.alpn_protocols.clone(),
            max_fragment_size: self.max_fragment_size,
            client_auth_cert_resolver: Arc::clone(&self.client_auth_cert_resolver),
            versions: self.versions,
            enable_sni: self.enable_sni,
            verifier: Arc::clone(&self.verifier),
            key_log: Arc::clone(&self.key_log),
            enable_secret_extraction: self.enable_secret_extraction,
            enable_early_data: self.enable_early_data,
            #[cfg(feature = 'tls12')]
            require_ems: self.require_ems,
            time_provider: Arc::clone(&self.time_provider),
        }
    }
}

/// Configuration for how/when a client is allowed to resume a previous session.
#[derive(Clone, Debug)]
pub struct Resumption {
    /// How we store session data or tickets. The default is to use an in-memory
    /// [super::handy::ClientSessionMemoryCache].
    pub(super) store: Arc<dyn ClientSessionStore>,

    /// What mechanism is used for resuming a TLS 1.2 session.
    pub(super) tls12_resumption: Tls12Resumption,
}

impl Resumption {
    /// Create a new `Resumption` that stores data for the given number of sessions in memory.
    ///
    /// This is the default `Resumption` choice, and enables resuming a TLS 1.2 session with
    /// a session id or RFC 5077 ticket.
    #[cfg(feature = 'std')]
    pub fn in_memory_sessions(num: usize) -> Self {
        Self {
            store: Arc::new(super::handy::ClientSessionMemoryCache::new(num)),
            tls12_resumption: Tls12Resumption::SessionIdOrTickets,
        }
    }

    /// Use a custom [`ClientSessionStore`] implementation to store sessions.
    ///
    /// By default, enables resuming a TLS 1.2 session with a session id or RFC 5077 ticket.
    pub fn store(store: Arc<dyn ClientSessionStore>) -> Self {
        Self {
            store,
            tls12_resumption: Tls12Resumption::SessionIdOrTickets,
        }
    }

    /// Disable all use of session resumption.
    pub fn disabled() -> Self {
        Self {
            store: Arc::new(NoClientSessionStorage),
            tls12_resumption: Tls12Resumption::Disabled,
        }
    }

    /// Configure whether TLS 1.2 sessions may be resumed, and by what mechanism.
    ///
    /// This is meaningless if you' ve disabled resumption entirely , which is the case in ` no - std ` pub fn tls12_resumption mut self , tls12 : Tls12Resumption -> Self { self . tls12_resumption = tls12 ; self } } impl Default for Resumption { fn default -> Self { #[cfg(feature = 'std')] let ret = Self :: in_memory_sessions 256 ; #[cfg(not(feature = 'std'))] let ret = Self :: disabled ; ret } } #[derive(Clone, Copy, Debug, PartialEq)] pub enum Tls12Resumption { Disabled , SessionIdOnly , SessionIdOrTickets , } pub super mod danger { use alloc :: sync :: Arc ; use super :: verify :: ServerCertVerifier ; use super :: ClientConfig ; #[derive(Debug)] pub struct DangerousClientConfig < 'a> {
        /// The underlying ClientConfig
        pub cfg: &' a mut ClientConfig , } impl < 'a> DangerousClientConfig<' a > { pub fn set_certificate_verifier & mut self , verifier : Arc < dyn ServerCertVerifier > { self . cfg . verifier = verifier ; } } } #[derive(Debug, PartialEq)] enum EarlyDataState { Disabled , Ready , Accepted , AcceptedFinished , Rejected , } #[derive(Debug)] pub super struct EarlyData { state : EarlyDataState , left : usize , } impl EarlyData { fn new -> Self { Self { left : 0 , state : EarlyDataState :: Disabled , } } pub super fn is_enabled & self -> bool { matches ! self . state , EarlyDataState :: Ready | EarlyDataState :: Accepted } #[cfg(feature = 'std')] fn is_accepted & self -> bool { matches ! self . state , EarlyDataState :: Accepted | EarlyDataState :: AcceptedFinished } pub super fn enable & mut self , max_data : usize { assert_eq ! self . state , EarlyDataState :: Disabled ; self . state = EarlyDataState :: Ready ; self . left = max_data ; } pub super fn rejected & mut self { trace ! 'EarlyData rejected' ; self . state = EarlyDataState :: Rejected ; } pub super fn accepted & mut self { trace ! 'EarlyData accepted' ; assert_eq ! self . state , EarlyDataState :: Ready ; self . state = EarlyDataState :: Accepted ; } pub super fn finished & mut self { trace ! 'EarlyData finished' ; self . state = match self . state { EarlyDataState :: Accepted => EarlyDataState :: AcceptedFinished , _ => panic ! 'bad EarlyData state' , } } fn check_write_opt & mut self , sz : usize -> Option < usize > { match self . state { EarlyDataState :: Disabled => unreachable ! , EarlyDataState :: Ready | EarlyDataState :: Accepted => { let take = if self . left < sz { mem :: replace & mut self . left , 0 } else { self . left -= sz ; sz } ; Some take } EarlyDataState :: Rejected | EarlyDataState :: AcceptedFinished => None , } } } #[cfg(feature = 'std')] mod connection { use alloc :: sync :: Arc ; use alloc :: vec :: Vec ; use core :: fmt ; use core :: ops :: { Deref , DerefMut } ; use std :: io ; use pki_types :: ServerName ; use super :: ClientConnectionData ; use crate :: common_state :: Protocol ; use crate :: conn :: { ConnectionCommon , ConnectionCore } ; use crate :: error :: Error ; use crate :: suites :: ExtractedSecrets ; use crate :: ClientConfig ; pub struct WriteEarlyData < 'a> {
        sess: &' a mut ClientConnection , } impl < 'a> WriteEarlyData<' a > { fn new sess : & 'a mut ClientConnection) -> Self {
            WriteEarlyData { sess }
        }

        /// How many bytes you may send.  Writes will become short
        /// once this reaches zero.
        pub fn bytes_left(&self) -> usize {
            self.sess
                .inner
                .core
                .data
                .early_data
                .bytes_left()
        }
    }

    impl<' a > io :: Write for WriteEarlyData < 'a> {
        fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
            self.sess.write_early_data(buf)
        }

        fn flush(&mut self) -> io::Result<()> {
            Ok(())
        }
    }

    impl super::EarlyData {
        fn check_write(&mut self, sz: usize) -> io::Result<usize> {
            self.check_write_opt(sz)
                .ok_or_else(|| io::Error::from(io::ErrorKind::InvalidInput))
        }

        fn bytes_left(&self) -> usize {
            self.left
        }
    }

    /// This represents a single TLS client connection.
    pub struct ClientConnection {
        inner: ConnectionCommon<ClientConnectionData>,
    }

    impl fmt::Debug for ClientConnection {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            f.debug_struct('ClientConnection')
                .finish()
        }
    }

    impl ClientConnection {
        /// Make a new ClientConnection.  `config` controls how
        /// we behave in the TLS protocol, `name` is the
        /// name of the server we want to talk to.
        pub fn new(config: Arc<ClientConfig>, name: ServerName<' static > -> Result < Self , Error > { Ok Self { inner : ConnectionCore :: for_client config , name , Vec :: new , Protocol :: Tcp ? . into , } } pub fn early_data & mut self -> Option < WriteEarlyData > { if self . inner . core . data . early_data . is_enabled { Some WriteEarlyData :: new self } else { None } } pub fn is_early_data_accepted & self -> bool { self . inner . core . is_early_data_accepted } pub fn dangerous_extract_secrets self -> Result < ExtractedSecrets , Error > { self . inner . dangerous_extract_secrets } fn write_early_data & mut self , data : & [ u8 ] -> io :: Result < usize > { self . inner . core . data . early_data . check_write data . len . map | sz | { self . inner . send_early_plaintext & data [ . . sz ] } } } impl Deref for ClientConnection { type Target = ConnectionCommon < ClientConnectionData > ; fn deref & self -> & Self :: Target { & self . inner } } impl DerefMut for ClientConnection { fn deref_mut & mut self -> & mut Self :: Target { & mut self . inner } } #[doc(hidden)] impl < 'a> TryFrom<&' a mut crate :: Connection > for & 'a mut ClientConnection {
        type Error = ();

        fn try_from(value: &' a mut crate :: Connection",244,745
3,1,17,1,3,"from@749-751@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/client_conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/client_conn.rs","from","from conn : ClientConnection",749,751
64,2,126,0,65,"handle@362-426@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","handle","handle",362,426
31,1,84,0,32,"into_owned@485-516@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","into_owned","into_owned self : Box < Self >",485,516
27,2,169,3,29,"emit_client_kx@518-546@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","emit_client_kx","emit_client_kx transcript : & mut HandshakeHash , kxa : KeyExchangeAlgorithm , common : & mut CommonState , pub_key : & [ u8 ] ,",518,546
22,4,151,3,25,"emit_certverify@548-572@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","emit_certverify","emit_certverify transcript : & mut HandshakeHash , signer : & dyn Signer , common : & mut CommonState ,",548,572
7,1,44,1,8,"emit_ccs@574-581@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","emit_ccs","emit_ccs common : & mut CommonState",574,581
18,1,109,3,20,"emit_finished@583-602@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","emit_finished","emit_finished secrets : & ConnectionSecrets , transcript : & mut HandshakeHash , common : & mut CommonState ,",583,602
6,1,29,1,6,"new@610-615@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","new","new params : Vec < u8 > , sig : DigitallySignedStruct",610,615
35,2,24,0,35,"handle@1032-1066@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","handle","handle",1032,1066
47,4,185,0,52,"handle@1195-1246@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","handle","handle",1195,1246
8,2,30,1,8,"handle_decrypt_error@1251-1258@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","handle_decrypt_error","handle_decrypt_error & self",1251,1258
35,2,95,0,35,"into_owned@1260-1294@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","into_owned","into_owned self : Box < Self >",1260,1294
10,1,60,1,10,"export_keying_material@1296-1305@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","export_keying_material","export_keying_material & self , output : & mut [ u8 ] , label : & [ u8 ] , context : Option < & [ u8 ] > ,",1296,1305
4,1,25,1,4,"extract_secrets@1307-1310@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","extract_secrets","extract_secrets & self",1307,1310
3,1,21,0,3,"into_owned@1312-1314@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","into_owned","into_owned self : Box < Self >",1312,1314
53,2,125,1,170,"save_session@1146-1315@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls12.rs","save_session","save_session & mut self , cx : & ClientContext < '_>) {
        // Save a ticket.  If we got a new ticket, save that.  Otherwise, save the
        // original ticket again.
        let (mut ticket, lifetime) = match self.ticket.take() {
            Some(nst) => (nst.ticket.0, nst.lifetime_hint),
            None => (Vec::new(), 0),
        };

        if ticket.is_empty() {
            if let Some(resuming_session) = &mut self.resuming_session {
                ticket = resuming_session.take_ticket();
            }
        }

        if self.session_id.is_empty() && ticket.is_empty() {
            debug!('Session not saved: server didn' t allocate id or ticket ');
            return;
        }

        let now = match self.config.current_time() {
            Ok(now) => now,
            Err(_) => {
                debug!(' Could not get current time '",1146,1315
159,2,152,6,160,"handle_server_hello@61-220@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls13.rs","handle_server_hello","handle_server_hello config : Arc < ClientConfig > , cx : & mut ClientContext , server_hello : & ServerHelloPayload , mut resuming_session : Option < persist :: Tls13ClientSessionValue > , server_name : ServerName < 'static>,
    randoms: ConnectionRandoms,
    suite: &' static Tls13CipherSuite , transcript : HandshakeHash , early_key_schedule : Option < KeyScheduleEarly > , hello : ClientHelloDetails , our_key_share : Box < dyn ActiveKeyExchange > , mut sent_tls13_fake_ccs : bool ,",61,220
16,2,122,3,25,"fill_in_psk_binder@224-248@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls13.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/tls13.rs","fill_in_psk_binder","fill_in_psk_binder resuming : & persist :: Tls13ClientSessionValue , transcript : & HandshakeHashBuffer , hmp : & mut HandshakeMessagePayload ,",224,248
12,1,57,1,12,"with_root_certificates@32-43@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","with_root_certificates","with_root_certificates self , root_store : impl Into < Arc < webpki :: RootCertStore > > ,",32,43
14,1,61,1,14,"with_webpki_verifier@49-62@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","with_webpki_verifier","with_webpki_verifier self , verifier : Arc < WebPkiServerVerifier > ,",49,62
3,1,19,1,3,"dangerous@66-68@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","dangerous","dangerous self",66,68
14,1,70,1,14,"with_custom_certificate_verifier@88-101@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","with_custom_certificate_verifier","with_custom_certificate_verifier self , verifier : Arc < dyn verify :: ServerCertVerifier > ,",88,101
14,3,74,1,14,"with_client_auth_cert@127-140@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","with_client_auth_cert","with_client_auth_cert self , cert_chain : Vec < CertificateDer < 'static>>,
        key_der: PrivateKeyDer<' static > ,",127,140
3,1,24,1,3,"with_no_client_auth@143-145@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","with_no_client_auth","with_no_client_auth self",143,145
21,1,109,1,21,"with_client_cert_resolver@148-168@crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/client/builder.rs","with_client_cert_resolver","with_client_cert_resolver self , client_auth_cert_resolver : Arc < dyn ResolvesClientCert > ,",148,168
17,1,38,0,17,"from@75-91@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls12/mod.rs","from","from s : & 'static Tls12CipherSuite) -> Self {
        Self::Tls12(s)
    }
}

impl PartialEq for Tls12CipherSuite {
    fn eq(&self, other: &Self) -> bool {
        self.common.suite == other.common.suite
    }
}

impl fmt::Debug for Tls12CipherSuite {
    fn fmt(&self, f: &mut fmt::Formatter<' _ >",75,91
185,4,404,27,198,"new_resume@140-337@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls12/mod.rs","new_resume","new_resume randoms : ConnectionRandoms , suite : & 'static Tls12CipherSuite,
        master_secret: &[u8],
    ) -> Self {
        let mut ret = Self {
            randoms,
            suite,
            master_secret: [0u8; 48],
        };
        ret.master_secret
            .copy_from_slice(master_secret);
        ret
    }

    /// Make a `MessageCipherPair` based on the given supported ciphersuite `self.suite`,
    /// and the session' s ` secrets ` . pub crate fn make_cipher_pair & self , side : Side -> MessageCipherPair { let key_block = self . make_key_block ; let shape = self . suite . aead_alg . key_block_shape ; let client_write_key , key_block = key_block . split_at shape . enc_key_len ; let server_write_key , key_block = key_block . split_at shape . enc_key_len ; let client_write_iv , key_block = key_block . split_at shape . fixed_iv_len ; let server_write_iv , extra = key_block . split_at shape . fixed_iv_len ; let write_key , write_iv , read_key , read_iv = match side { Side :: Client => client_write_key , client_write_iv , server_write_key , server_write_iv , , Side :: Server => server_write_key , server_write_iv , client_write_key , client_write_iv , , } ; self . suite . aead_alg . decrypter AeadKey :: new read_key , read_iv , self . suite . aead_alg . encrypter AeadKey :: new write_key , write_iv , extra , } fn make_key_block & self -> Vec < u8 > { let shape = self . suite . aead_alg . key_block_shape ; let len = shape . enc_key_len + shape . fixed_iv_len * 2 + shape . explicit_nonce_len ; let mut out = vec ! [ 0u8 ; len ] ; let randoms = join_randoms & self . randoms . server , & self . randoms . client ; self . suite . prf_provider . for_secret & mut out , & self . master_secret , b 'key expansion' , & randoms , ; out } pub crate fn suite & self -> & 'static Tls12CipherSuite {
        self.suite
    }

    pub(crate) fn master_secret(&self) -> &[u8] {
        &self.master_secret[..]
    }

    fn make_verify_data(&self, handshake_hash: &hash::Output, label: &[u8]) -> Vec<u8> {
        let mut out = vec![0u8; 12];

        self.suite.prf_provider.for_secret(
            &mut out,
            &self.master_secret,
            label,
            handshake_hash.as_ref(),
        );

        out
    }

    pub(crate) fn client_verify_data(&self, handshake_hash: &hash::Output) -> Vec<u8> {
        self.make_verify_data(handshake_hash, b'client finished')
    }

    pub(crate) fn server_verify_data(&self, handshake_hash: &hash::Output) -> Vec<u8> {
        self.make_verify_data(handshake_hash, b'server finished')
    }

    pub(crate) fn export_keying_material(
        &self,
        output: &mut [u8],
        label: &[u8],
        context: Option<&[u8]>,
    ) {
        let mut randoms = Vec::new();
        randoms.extend_from_slice(&self.randoms.client);
        randoms.extend_from_slice(&self.randoms.server);
        if let Some(context) = context {
            assert!(context.len() <= 0xffff);
            (context.len() as u16).encode(&mut randoms);
            randoms.extend_from_slice(context);
        }

        self.suite
            .prf_provider
            .for_secret(output, &self.master_secret, label, &randoms);
    }

    pub(crate) fn extract_secrets(&self, side: Side) -> Result<PartiallyExtractedSecrets, Error> {
        // Make a key block, and chop it up
        let key_block = self.make_key_block();
        let shape = self.suite.aead_alg.key_block_shape();

        let (client_key, key_block) = key_block.split_at(shape.enc_key_len);
        let (server_key, key_block) = key_block.split_at(shape.enc_key_len);
        let (client_iv, key_block) = key_block.split_at(shape.fixed_iv_len);
        let (server_iv, explicit_nonce) = key_block.split_at(shape.fixed_iv_len);

        let client_secrets = self.suite.aead_alg.extract_keys(
            AeadKey::new(client_key),
            client_iv,
            explicit_nonce,
        )?;
        let server_secrets = self.suite.aead_alg.extract_keys(
            AeadKey::new(server_key),
            server_iv,
            explicit_nonce,
        )?;

        let (tx, rx) = match side {
            Side::Client => (client_secrets, server_secrets),
            Side::Server => (server_secrets, client_secrets),
        };
        Ok(PartiallyExtractedSecrets { tx, rx })
    }
}

impl Drop for ConnectionSecrets {
    fn drop(&mut self) {
        self.master_secret.zeroize();
    }
}

enum Seed {
    Ems(hash::Output),
    Randoms([u8; 64]),
}

impl AsRef<[u8]> for Seed {
    /// This is guaranteed to return a non-empty slice.
    fn as_ref(&self) -> &[u8] {
        match self {
            // seed is a hash::Output, which is a fixed, non-zero length array.
            Self::Ems(seed) => seed.as_ref(),
            // randoms is a fixed, non-zero length array.
            Self::Randoms(randoms) => randoms.as_ref(),
        }
    }
}

fn join_randoms(first: &[u8; 32], second: &[u8; 32]) -> [u8; 64] {
    let mut randoms = [0u8; 64];
    randoms[..32].copy_from_slice(first);
    randoms[32..].copy_from_slice(second);
    randoms
}

type MessageCipherPair = (Box<dyn MessageDecrypter>, Box<dyn MessageEncrypter>);

pub(crate) fn decode_kx_params<' a , T : KxDecode < 'a>>(
    kx_algorithm: KeyExchangeAlgorithm,
    common: &mut CommonState,
    kx_params: &' a [ u8 ] ,",140,337
14,1,96,0,15,"server_ecdhe_remaining_bytes@348-362@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls12/mod.rs","server_ecdhe_remaining_bytes","server_ecdhe_remaining_bytes",348,362
9,1,48,0,9,"client_ecdhe_invalid@365-373@crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls12/mod.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/tls12/mod.rs","client_ecdhe_invalid","client_ecdhe_invalid",365,373
6,1,50,0,6,"process_tls_records@18-23@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn/unbuffered.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn/unbuffered.rs","process_tls_records","process_tls_records & 'c mut self,
        incoming_tls: &' i mut [ u8 ] ,",18,23
10,1,64,0,10,"process_tls_records@29-38@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn/unbuffered.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn/unbuffered.rs","process_tls_records","process_tls_records & 'c mut self,
        incoming_tls: &' i mut [ u8 ] ,",29,38
94,11,538,1,103,"process_tls_records_common@42-144@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn/unbuffered.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn/unbuffered.rs","process_tls_records_common","process_tls_records_common & 'c mut self,
        incoming_tls: &' i mut [ u8 ] , mut check : impl FnMut & mut Self -> Option < T > , execute : impl FnOnce & 'c mut Self, &' i mut [ u8 ] , T -> ConnectionState < 'c, ' i , Data > ,",42,144
3,1,23,1,3,"from@227-229@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn/unbuffered.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn/unbuffered.rs","from","from v : ReadTraffic < 'c, ' i , Data >",227,229
3,1,23,1,3,"from@233-235@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn/unbuffered.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn/unbuffered.rs","from","from v : ReadEarlyData < 'c, ' i , Data >",233,235
9,5,64,1,11,"complete_prior_io@33-43@crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","complete_prior_io","complete_prior_io & mut self",33,43
9,5,71,1,15,"read@52-66@crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","read","read & mut self , buf : & mut [ u8 ]",52,66
105,7,347,19,136,"read_buf@69-204@crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","read_buf","read_buf & mut self , cursor : core :: io :: BorrowedCursor < '_>) -> Result<()> {
        self.complete_prior_io()?;

        // We call complete_io() in a loop since a single call may read only
        // a partial packet from the underlying transport. A full packet is
        // needed to get more plaintext, which we must do if EOF has not been
        // hit.
        while self.conn.wants_read() {
            if self.conn.complete_io(self.sock)?.0 == 0 {
                break;
            }
        }

        self.conn.reader().read_buf(cursor)
    }
}

impl<' a , C , T , S > Write for Stream < 'a, C, T>
where
    C: ' a + DerefMut + Deref < Target = ConnectionCommon < S > > , T : 'a + Read + Write,
    S: SideData,
{
    fn write(&mut self, buf: &[u8]) -> Result<usize> {
        self.complete_prior_io()?;

        let len = self.conn.writer().write(buf)?;

        // Try to write the underlying transport here, but don' t let let _ = self . conn . complete_io self . sock ; Ok len } fn write_vectored & mut self , bufs : & [ IoSlice < '_>]) -> Result<usize> {
        self.complete_prior_io()?;

        let len = self
            .conn
            .writer()
            .write_vectored(bufs)?;

        // Try to write the underlying transport here, but don' t let let _ = self . conn . complete_io self . sock ; Ok len } fn flush & mut self -> Result < > { self . complete_prior_io ? ; self . conn . writer . flush ? ; if self . conn . wants_write { self . conn . complete_io self . sock ? ; } Ok } } #[derive(Debug)] pub struct StreamOwned < C : Sized , T : Read + Write + Sized > { pub conn : C , pub sock : T , } impl < C , T , S > StreamOwned < C , T > where C : DerefMut + Deref < Target = ConnectionCommon < S > > , T : Read + Write , S : SideData , { pub fn new conn : C , sock : T -> Self { Self { conn , sock } } pub fn get_ref & self -> & T { & self . sock } pub fn get_mut & mut self -> & mut T { & mut self . sock } pub fn into_parts self -> C , T { self . conn , self . sock } } impl < 'a, C, T, S> StreamOwned<C, T>
where
    C: DerefMut + Deref<Target = ConnectionCommon<S>>,
    T: Read + Write,
    S: SideData,
{
    fn as_stream(&' a mut self -> Stream < 'a, C, T> {
        Stream {
            conn: &mut self.conn,
            sock: &mut self.sock,
        }
    }
}

impl<C, T, S> Read for StreamOwned<C, T>
where
    C: DerefMut + Deref<Target = ConnectionCommon<S>>,
    T: Read + Write,
    S: SideData,
{
    fn read(&mut self, buf: &mut [u8]) -> Result<usize> {
        self.as_stream().read(buf)
    }

    #[cfg(read_buf)]
    fn read_buf(&mut self, cursor: core::io::BorrowedCursor<' _ >",69,204
3,1,31,1,3,"write@213-215@crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","write","write & mut self , buf : & [ u8 ]",213,215
3,1,24,1,3,"flush@217-219@crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","flush","flush & mut self",217,219
3,1,17,0,3,"stream_can_be_created_for_connection_and_tcpstream@231-233@crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","stream_can_be_created_for_connection_and_tcpstream","stream_can_be_created_for_connection_and_tcpstream",231,233
3,1,16,0,3,"streamowned_can_be_created_for_client_and_tcpstream@236-238@crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","streamowned_can_be_created_for_client_and_tcpstream","streamowned_can_be_created_for_client_and_tcpstream",236,238
3,1,16,0,3,"streamowned_can_be_created_for_server_and_tcpstream@241-243@crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/stream.rs","streamowned_can_be_created_for_server_and_tcpstream","streamowned_can_be_created_for_server_and_tcpstream",241,243
6,1,23,0,6,"new@23-28@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","new","new",23,28
3,1,15,1,3,"set_client_auth_enabled@32-34@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","set_client_auth_enabled","set_client_auth_enabled & mut self",32,34
6,2,45,2,6,"add_message@37-42@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","add_message","add_message & mut self , m : & Message",37,42
3,1,25,1,3,"update_raw@46-48@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","update_raw","update_raw & mut self , buf : & [ u8 ]",46,48
24,2,69,2,24,"hash_given@51-74@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","hash_given","hash_given & self , provider : & 'static dyn hash::Hash,
        extra: &[u8],
    ) -> hash::Output {
        let mut ctx = provider.start();
        ctx.update(&self.buffer);
        ctx.update(extra);
        ctx.finish()
    }

    /// We now know what hash function the verify_data will use.
    pub(crate) fn start_hash(self, provider: &' static dyn hash :: Hash",51,74
3,1,24,1,3,"take_handshake_buf@160-162@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","take_handshake_buf","take_handshake_buf & mut self",160,162
3,1,17,1,3,"algorithm@165-167@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","algorithm","algorithm & self",165,167
7,1,39,1,7,"clone@171-177@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","clone","clone & self",171,177
14,1,132,0,14,"hashes_correctly@185-198@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","hashes_correctly","hashes_correctly",185,198
28,1,209,0,28,"buffers_correctly@202-229@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","buffers_correctly","buffers_correctly",202,229
23,1,181,0,23,"abandon@232-254@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","abandon","abandon",232,254
22,1,213,0,31,"clones_correctly@257-287@crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/hash_hs.rs","clones_correctly","clones_correctly",257,287
14,1,55,1,14,"inappropriate_message@43-56@crypto_codebases/rustls/rustls_2017/ccn_lib/src/check.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/check.rs","inappropriate_message","inappropriate_message payload : & MessagePayload , content_types : & [ ContentType ] ,",43,56
19,2,83,1,19,"inappropriate_handshake_message@58-76@crypto_codebases/rustls/rustls_2017/ccn_lib/src/check.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/check.rs","inappropriate_handshake_message","inappropriate_handshake_message payload : & MessagePayload , content_types : & [ ContentType ] , handshake_types : & [ HandshakeType ] ,",58,76
3,1,17,1,3,"from@244-246@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","from","from e : PeerMisbehaved",244,246
3,1,17,1,3,"from@281-283@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","from","from e : PeerIncompatible",281,283
17,2,113,2,17,"eq@347-363@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","eq","eq & self , other : & Self",347,363
13,2,80,1,22,"from@370-391@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","from","from e : CertificateError",370,391
3,1,17,1,3,"from@396-398@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","from","from e : CertificateError",396,398
17,2,113,2,17,"eq@446-462@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","eq","eq & self , other : & Self",446,462
3,1,17,1,3,"from@467-469@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","from","from e : CertRevocationListError",467,469
7,1,56,0,7,"join@472-478@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","join","join items : & [ T ]",472,478
48,2,355,2,48,"fmt@481-528@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","fmt","fmt & self , f : & mut fmt :: Formatter",481,528
3,1,14,1,3,"from@534-536@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","from","from _ : SystemTimeError",534,536
3,1,16,1,3,"from@543-545@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","from","from _ : rand :: GetRandomFailed",543,545
3,1,16,2,3,"eq@567-569@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","eq","eq & self , _other : & Self",567,569
3,1,17,1,3,"from@573-575@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","from","from value : OtherError",573,575
10,1,43,2,10,"fmt@579-588@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","fmt","fmt & self , f : & mut fmt :: Formatter",579,588
110,1,17,1,110,"source@593-702@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","source","source & self",593,702
8,1,54,0,9,"time_error_mapping@715-723@crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/error.rs","time_error_mapping","time_error_mapping",715,723
19,5,144,3,21,"get_or_insert_default_and_edit@27-47@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","get_or_insert_default_and_edit","get_or_insert_default_and_edit & mut self , k : K , edit : impl FnOnce & mut V",27,47
6,3,47,2,6,"get_mut@49-54@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","get_mut","get_mut & mut self , k : & Q",49,54
6,1,32,1,6,"new@63-68@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","new","new capacity_order_of_magnitude : usize",63,68
19,5,132,3,23,"insert@70-92@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","insert","insert & mut self , k : K , v : V",70,92
6,3,45,2,6,"get@94-99@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","get","get & self , k : & Q",94,99
17,5,101,2,18,"remove@101-118@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","remove","remove & mut self , k : & Q",101,118
6,1,60,0,6,"test_updates_existing_item@128-133@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","test_updates_existing_item","test_updates_existing_item",128,133
9,1,103,0,10,"test_evicts_oldest_item@136-145@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","test_evicts_oldest_item","test_evicts_oldest_item",136,145
12,1,145,0,15,"test_evicts_second_oldest_item_if_first_removed@148-162@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","test_evicts_second_oldest_item_if_first_removed","test_evicts_second_oldest_item_if_first_removed",148,162
13,1,162,0,16,"test_evicts_after_second_oldest_item_removed@165-180@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","test_evicts_after_second_oldest_item_removed","test_evicts_after_second_oldest_item_removed",165,180
15,1,187,0,18,"test_removes_all_items@183-200@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","test_removes_all_items","test_removes_all_items",183,200
8,2,65,0,9,"test_inserts_many_items@203-211@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","test_inserts_many_items","test_inserts_many_items",203,211
16,1,230,0,26,"test_get_or_insert_default_and_edit_evicts_old_items_to_meet_capacity@214-239@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","test_get_or_insert_default_and_edit_evicts_old_items_to_meet_capacity","test_get_or_insert_default_and_edit_evicts_old_items_to_meet_capacity",214,239
7,1,91,0,9,"test_get_or_insert_default_and_edit_edits_existing_item@242-250@crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/limited_cache.rs","test_get_or_insert_default_and_edit_edits_existing_item","test_get_or_insert_default_and_edit_edits_existing_item",242,250
3,1,20,0,3,"test_each_provider@47-49@crypto_codebases/rustls/rustls_2017/ccn_lib/src/test_macros.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/test_macros.rs","test_each_provider","test_each_provider",47,49
3,2,25,1,3,"bench_each_provider@54-56@crypto_codebases/rustls/rustls_2017/ccn_lib/src/test_macros.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/test_macros.rs","bench_each_provider","bench_each_provider b : & mut test :: Bencher",54,56
6,2,46,1,6,"quic_transport_parameters@52-57@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","quic_transport_parameters","quic_transport_parameters & self",52,57
6,2,43,1,6,"zero_rtt_keys@60-65@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","zero_rtt_keys","zero_rtt_keys & self",60,65
6,2,56,1,6,"read_hs@70-75@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","read_hs","read_hs & mut self , plaintext : & [ u8 ]",70,75
6,2,55,1,6,"write_hs@80-85@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","write_hs","write_hs & mut self , buf : & mut Vec < u8 >",80,85
6,2,43,1,6,"alert@90-95@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","alert","alert & self",90,95
15,2,91,2,15,"export_keying_material@113-127@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","export_keying_material","export_keying_material & self , output : T , label : & [ u8 ] , context : Option < & [ u8 ] > ,",113,127
6,2,45,1,6,"deref@133-138@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","deref","deref & self",133,138
6,2,49,1,6,"deref_mut@142-147@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","deref_mut","deref_mut & mut self",142,147
14,2,37,1,14,"packet_key_label@930-943@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","packet_key_label","packet_key_label & self",930,943
13,2,37,1,13,"header_key_label@946-958@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","header_key_label","header_key_label & self",946,958
614,23,1774,70,800,"new@160-959@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","new","new config : Arc < ClientConfig > , quic_version : Version , name : ServerName < 'static>,
            params: Vec<u8>,
        ) -> Result<Self, Error> {
            if !config.supports_version(ProtocolVersion::TLSv1_3) {
                return Err(Error::General(
                    'TLS 1.3 support is required for QUIC'.into(),
                ));
            }

            if !config.supports_protocol(Protocol::Quic) {
                return Err(Error::General(
                    'at least one ciphersuite must support QUIC'.into(),
                ));
            }

            let ext = match quic_version {
                Version::V1Draft => ClientExtension::TransportParametersDraft(params),
                Version::V1 | Version::V2 => ClientExtension::TransportParameters(params),
            };

            let mut inner = ConnectionCore::for_client(config, name, vec![ext], Protocol::Quic)?;
            inner.common_state.quic.version = quic_version;
            Ok(Self {
                inner: inner.into(),
            })
        }

        /// Returns True if the server signalled it will process early data.
        ///
        /// If you sent early data and this returns false at the end of the
        /// handshake then the server will not process the data.  This
        /// is not an error, but you may wish to resend the data.
        pub fn is_early_data_accepted(&self) -> bool {
            self.inner.core.is_early_data_accepted()
        }
    }

    impl Deref for ClientConnection {
        type Target = ConnectionCommon<ClientConnectionData>;

        fn deref(&self) -> &Self::Target {
            &self.inner
        }
    }

    impl DerefMut for ClientConnection {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.inner
        }
    }

    impl Debug for ClientConnection {
        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
            f.debug_struct('quic::ClientConnection')
                .finish()
        }
    }

    impl From<ClientConnection> for Connection {
        fn from(c: ClientConnection) -> Self {
            Self::Client(c)
        }
    }

    /// A QUIC server connection.
    pub struct ServerConnection {
        inner: ConnectionCommon<ServerConnectionData>,
    }

    impl ServerConnection {
        /// Make a new QUIC ServerConnection.
        ///
        /// This differs from `ServerConnection::new()` in that it takes an extra `params` argument,
        /// which contains the TLS-encoded transport parameters to send.
        pub fn new(
            config: Arc<ServerConfig>,
            quic_version: Version,
            params: Vec<u8>,
        ) -> Result<Self, Error> {
            if !config.supports_version(ProtocolVersion::TLSv1_3) {
                return Err(Error::General(
                    'TLS 1.3 support is required for QUIC'.into(),
                ));
            }

            if !config.supports_protocol(Protocol::Quic) {
                return Err(Error::General(
                    'at least one ciphersuite must support QUIC'.into(),
                ));
            }

            if config.max_early_data_size != 0 && config.max_early_data_size != 0xffff_ffff {
                return Err(Error::General(
                    'QUIC sessions must set a max early data of 0 or 2^32-1'.into(),
                ));
            }

            let ext = match quic_version {
                Version::V1Draft => ServerExtension::TransportParametersDraft(params),
                Version::V1 | Version::V2 => ServerExtension::TransportParameters(params),
            };

            let mut core = ConnectionCore::for_server(config, vec![ext])?;
            core.common_state.protocol = Protocol::Quic;
            core.common_state.quic.version = quic_version;
            Ok(Self { inner: core.into() })
        }

        /// Explicitly discard early data, notifying the client
        ///
        /// Useful if invariants encoded in `received_resumption_data()` cannot be respected.
        ///
        /// Must be called while `is_handshaking` is true.
        pub fn reject_early_data(&mut self) {
            self.inner.core.reject_early_data()
        }

        /// Retrieves the server name, if any, used to select the certificate and
        /// private key.
        ///
        /// This returns `None` until some time after the client' s server name indication pub fn server_name & self -> Option < & str > { self . inner . core . get_sni_str } } impl Deref for ServerConnection { type Target = ConnectionCommon < ServerConnectionData > ; fn deref & self -> & Self :: Target { & self . inner } } impl DerefMut for ServerConnection { fn deref_mut & mut self -> & mut Self :: Target { & mut self . inner } } impl Debug for ServerConnection { fn fmt & self , f : & mut fmt :: Formatter -> fmt :: Result { f . debug_struct 'quic::ServerConnection' . finish } } impl From < ServerConnection > for Connection { fn from c : ServerConnection -> Self { Self :: Server c } } pub struct ConnectionCommon < Data > { core : ConnectionCore < Data > , deframer_buffer : DeframerVecBuffer , sendable_plaintext : ChunkVecBuffer , } impl < Data : SideData > ConnectionCommon < Data > { pub fn quic_transport_parameters & self -> Option < & [ u8 ] > { self . core . common_state . quic . params . as_ref . map | v | v . as_ref } pub fn zero_rtt_keys & self -> Option < DirectionalKeys > { let suite = self . core . common_state . suite . and_then | suite | suite . tls13 ? ; Some DirectionalKeys :: new suite , suite . quic ? , self . core . common_state . quic . early_secret . as_ref ? , self . core . common_state . quic . version , } pub fn read_hs & mut self , plaintext : & [ u8 ] -> Result < , Error > { self . core . message_deframer . push ProtocolVersion :: TLSv1_3 , plaintext , & mut self . deframer_buffer , ? ; self . core . process_new_packets & mut self . deframer_buffer , & mut self . sendable_plaintext ? ; Ok } pub fn write_hs & mut self , buf : & mut Vec < u8 > -> Option < KeyChange > { self . core . common_state . quic . write_hs buf } pub fn alert & self -> Option < AlertDescription > { self . core . common_state . quic . alert } } impl < Data > Deref for ConnectionCommon < Data > { type Target = CommonState ; fn deref & self -> & Self :: Target { & self . core . common_state } } impl < Data > DerefMut for ConnectionCommon < Data > { fn deref_mut & mut self -> & mut Self :: Target { & mut self . core . common_state } } impl < Data > From < ConnectionCore < Data > > for ConnectionCommon < Data > { fn from core : ConnectionCore < Data > -> Self { Self { core , deframer_buffer : DeframerVecBuffer :: default , sendable_plaintext : ChunkVecBuffer :: new Some DEFAULT_BUFFER_LIMIT , } } } } #[cfg(feature = 'std')] pub use connection :: { ClientConnection , Connection , ConnectionCommon , ServerConnection } ; #[derive(Default)] pub crate struct Quic { pub crate params : Option < Vec < u8 > > , pub crate alert : Option < AlertDescription > , pub crate hs_queue : VecDeque < bool , Vec < u8 > > , pub crate early_secret : Option < OkmBlock > , pub crate hs_secrets : Option < Secrets > , pub crate traffic_secrets : Option < Secrets > , #[cfg(feature = 'std')] pub crate returned_traffic_keys : bool , pub crate version : Version , } #[cfg(feature = 'std')] impl Quic { pub crate fn write_hs & mut self , buf : & mut Vec < u8 > -> Option < KeyChange > { while let Some _ , msg = self . hs_queue . pop_front { buf . extend_from_slice & msg ; if let Some & true , _ = self . hs_queue . front { if self . hs_secrets . is_some { break ; } } } if let Some secrets = self . hs_secrets . take { return Some KeyChange :: Handshake { keys : Keys :: new & secrets , } ; } if let Some mut secrets = self . traffic_secrets . take { if ! self . returned_traffic_keys { self . returned_traffic_keys = true ; let keys = Keys :: new & secrets ; secrets . update ; return Some KeyChange :: OneRtt { keys , next : secrets , } ; } } None } } #[derive(Clone)] pub struct Secrets { pub crate client : OkmBlock , pub crate server : OkmBlock , suite : & 'static Tls13CipherSuite,
    quic: &' static dyn Algorithm , side : Side , version : Version , } impl Secrets { pub crate fn new client : OkmBlock , server : OkmBlock , suite : & 'static Tls13CipherSuite,
        quic: &' static dyn Algorithm , side : Side , version : Version , -> Self { Self { client , server , suite , quic , side , version , } } pub fn next_packet_keys & mut self -> PacketKeySet { let keys = PacketKeySet :: new self ; self . update ; keys } pub crate fn update & mut self { self . client = hkdf_expand_label_block self . suite . hkdf_provider . expander_for_okm & self . client . as_ref , self . version . key_update_label , & [ ] , ; self . server = hkdf_expand_label_block self . suite . hkdf_provider . expander_for_okm & self . server . as_ref , self . version . key_update_label , & [ ] , ; } fn local_remote & self -> & OkmBlock , & OkmBlock { match self . side { Side :: Client => & self . client , & self . server , Side :: Server => & self . server , & self . client , } } } pub struct DirectionalKeys { pub header : Box < dyn HeaderProtectionKey > , pub packet : Box < dyn PacketKey > , } impl DirectionalKeys { pub crate fn new suite : & 'static Tls13CipherSuite,
        quic: &' static dyn Algorithm , secret : & OkmBlock , version : Version , -> Self { let builder = KeyBuilder :: new secret , version , quic , suite . hkdf_provider ; Self { header : builder . header_protection_key , packet : builder . packet_key , } } } const TAG_LEN : usize = 16 ; pub struct Tag [ u8 ; TAG_LEN ] ; impl From < & [ u8 ] > for Tag { fn from value : & [ u8 ] -> Self { let mut array = [ 0u8 ; TAG_LEN ] ; array . copy_from_slice value ; Self array } } impl AsRef < [ u8 ] > for Tag { fn as_ref & self -> & [ u8 ] { & self . 0 } } pub trait Algorithm : Send + Sync { fn packet_key & self , key : AeadKey , iv : Iv -> Box < dyn PacketKey > ; fn header_protection_key & self , key : AeadKey -> Box < dyn HeaderProtectionKey > ; fn aead_key_len & self -> usize ; fn fips & self -> bool { false } } pub trait HeaderProtectionKey : Send + Sync { fn encrypt_in_place & self , sample : & [ u8 ] , first : & mut u8 , packet_number : & mut [ u8 ] , -> Result < , Error > ; fn decrypt_in_place & self , sample : & [ u8 ] , first : & mut u8 , packet_number : & mut [ u8 ] , -> Result < , Error > ; fn sample_len & self -> usize ; } pub trait PacketKey : Send + Sync { fn encrypt_in_place & self , packet_number : u64 , header : & [ u8 ] , payload : & mut [ u8 ] , -> Result < Tag , Error > ; fn decrypt_in_place < 'a>(
        &self,
        packet_number: u64,
        header: &[u8],
        payload: &' a mut [ u8 ] ,",160,959
3,1,11,0,3,"default@962-964@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","default","default",962,964
1,1,13,0,1,"assert_auto@976-976@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","assert_auto","assert_auto",976,976
5,1,31,0,5,"auto_traits@975-979@crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/quic.rs","auto_traits","auto_traits",975,979
24,2,191,1,30,"asn1_wrap@5-34@crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","asn1_wrap","asn1_wrap tag : u8 , bytes : & [ u8 ]",5,34
3,1,23,0,3,"wrap_in_sequence@37-39@crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","wrap_in_sequence","wrap_in_sequence bytes : & [ u8 ]",37,39
3,1,25,0,3,"test_empty@50-52@crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","test_empty","test_empty",50,52
6,1,40,0,6,"test_small@55-60@crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","test_small","test_small",55,60
8,1,56,0,8,"test_medium@63-70@crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","test_medium","test_medium",63,70
9,1,62,0,9,"test_large@73-81@crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","test_large","test_large",73,81
7,1,75,0,7,"test_huge@84-90@crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","test_huge","test_huge",84,90
7,1,77,0,7,"test_gigantic@93-99@crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","test_gigantic","test_gigantic",93,99
10,1,79,0,10,"test_ludicrous@102-111@crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/x509.rs","test_ludicrous","test_ludicrous",102,111
26,4,124,2,48,"maybe_roll@99-146@crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","maybe_roll","maybe_roll & self , now : UnixTime",99,146
3,1,15,1,3,"lifetime@172-174@crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","lifetime","lifetime & self",172,174
3,1,11,1,3,"enabled@176-178@crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","enabled","enabled & self",176,178
12,2,63,1,13,"encrypt@180-192@crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","encrypt","encrypt & self , message : & [ u8 ]",180,192
19,3,95,1,22,"decrypt@194-215@crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","decrypt","decrypt & self , ciphertext : & [ u8 ]",194,215
7,1,77,1,7,"fmt@220-226@crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/ticketer.rs","fmt","fmt & self , f : & mut core :: fmt :: Formatter < ' _ >",220,226
22,18,194,2,24,"fmt@16-39@crypto_codebases/rustls/rustls_2017/ccn_lib/src/bs_debug.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/bs_debug.rs","fmt","fmt & self , fmt : & mut fmt :: Formatter",16,39
28,1,58,0,30,"debug@50-79@crypto_codebases/rustls/rustls_2017/ccn_lib/src/bs_debug.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/bs_debug.rs","debug","debug",50,79
27,3,120,0,29,"new@21-49@crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","new","new var : Option < OsString >",21,49
19,9,163,2,20,"try_write@51-70@crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","try_write","try_write & mut self , label : & str , client_random : & [ u8 ] , secret : & [ u8 ]",51,70
51,2,62,1,51,"fmt@74-124@crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","fmt","fmt & self , f : & mut Formatter < '_>) -> core::fmt::Result {
        f.debug_struct('KeyLogFileInner')
            // Note: we omit self.buf deliberately as it may contain key data.
            .field('file', &self.file)
            .finish()
    }
}

/// [`KeyLog`] implementation that opens a file whose name is
/// given by the `SSLKEYLOGFILE` environment variable, and writes
/// keys into it.
///
/// If `SSLKEYLOGFILE` is not set, this does nothing.
///
/// If such a file cannot be opened, or cannot be written then
/// this does nothing but logs errors at warning-level.
pub struct KeyLogFile(Mutex<KeyLogFileInner>);

impl KeyLogFile {
    /// Makes a new `KeyLogFile`.  The environment variable is
    /// inspected and the named file is opened during this call.
    pub fn new() -> Self {
        let var = var_os('SSLKEYLOGFILE');
        Self(Mutex::new(KeyLogFileInner::new(var)))
    }
}

impl KeyLog for KeyLogFile {
    fn log(&self, label: &str, client_random: &[u8], secret: &[u8]) {
        #[cfg_attr(not(feature = 'logging'), allow(unused_variables))]
        match self
            .0
            .lock()
            .unwrap()
            .try_write(label, client_random, secret)
        {
            Ok(()) => {}
            Err(e) => {
                warn!('error writing to key log file: {}', e);
            }
        }
    }
}

impl Debug for KeyLogFile {
    fn fmt(&self, f: &mut Formatter<' _ >",74,124
5,1,24,0,5,"init@131-135@crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","init","init",131,135
7,1,42,0,7,"test_env_var_is_not_set@138-144@crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","test_env_var_is_not_set","test_env_var_is_not_set",138,144
7,1,49,0,7,"test_env_var_cannot_be_opened@147-153@crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","test_env_var_cannot_be_opened","test_env_var_cannot_be_opened",147,153
7,1,49,0,7,"test_env_var_cannot_be_written@156-162@crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log_file.rs","test_env_var_cannot_be_written","test_env_var_cannot_be_written",156,162
3,1,21,1,3,"current_time@27-29@crypto_codebases/rustls/rustls_2017/ccn_lib/src/time_provider.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/time_provider.rs","current_time","current_time & self",27,29
9,2,27,1,14,"current_time@17-30@crypto_codebases/rustls/rustls_2017/ccn_lib/src/time_provider.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/time_provider.rs","current_time","current_time & self",17,30
18,2,92,1,18,"sign@516-533@crypto_codebases/rustls/rustls_2017/ccn_lib/src/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/enums.rs","sign","sign & self",516,533
12,1,44,1,12,"supported_in_tls13@542-553@crypto_codebases/rustls/rustls_2017/ccn_lib/src/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/enums.rs","supported_in_tls13","supported_in_tls13 & self",542,553
9,1,67,0,9,"test_enums@577-585@crypto_codebases/rustls/rustls_2017/ccn_lib/src/enums.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/enums.rs","test_enums","test_enums",577,585
3,1,13,0,3,"assertion@28-30@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","assertion","assertion",28,30
3,1,13,0,3,"assertion@37-39@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","assertion","assertion",37,39
3,1,13,0,3,"assertion@50-52@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","assertion","assertion",50,52
3,1,13,0,3,"assertion@61-63@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","assertion","assertion",61,63
3,1,11,1,3,"offer_client_auth@262-264@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","offer_client_auth","offer_client_auth & self",262,264
3,1,18,1,3,"root_hint_subjects@266-268@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","root_hint_subjects","root_hint_subjects & self",266,268
8,1,35,2,8,"verify_client_cert@270-277@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","verify_client_cert","verify_client_cert & self , _end_entity : & CertificateDer < '_>,
        _intermediates: &[CertificateDer<' _ > ] , _now : UnixTime ,",270,277
17,1,42,2,17,"verify_tls12_signature@279-295@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","verify_tls12_signature","verify_tls12_signature & self , _message : & [ u8 ] , _cert : & CertificateDer < '_>,
        _dss: &DigitallySignedStruct,
    ) -> Result<HandshakeSignatureValid, Error> {
        unimplemented!();
    }

    fn verify_tls13_signature(
        &self,
        _message: &[u8],
        _cert: &CertificateDer<' _ > , _dss : & DigitallySignedStruct ,",279,295
3,1,18,1,3,"supported_verify_schemes@297-299@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","supported_verify_schemes","supported_verify_schemes & self",297,299
115,2,172,2,219,"verify_server_cert@82-300@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","verify_server_cert","verify_server_cert & self , end_entity : & CertificateDer < '_>,
        intermediates: &[CertificateDer<' _ > ] , server_name : & ServerName < '_>,
        ocsp_response: &[u8],
        now: UnixTime,
    ) -> Result<ServerCertVerified, Error>;

    /// Verify a signature allegedly by the given server certificate.
    ///
    /// `message` is not hashed, and needs hashing during the verification.
    /// The signature and algorithm are within `dss`.  `cert` contains the
    /// public key to use.
    ///
    /// `cert` has already been validated by [`ServerCertVerifier::verify_server_cert`].
    ///
    /// If and only if the signature is valid, return `Ok(HandshakeSignatureValid)`.
    /// Otherwise, return an error -- rustls will send an alert and abort the
    /// connection.
    ///
    /// This method is only called for TLS1.2 handshakes.  Note that, in TLS1.2,
    /// SignatureSchemes such as `SignatureScheme::ECDSA_NISTP256_SHA256` are not
    /// in fact bound to the specific curve implied in their name.
    fn verify_tls12_signature(
        &self,
        message: &[u8],
        cert: &CertificateDer<' _ > , dss : & DigitallySignedStruct ,",82,300
6,1,32,1,6,"new@311-316@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","new","new scheme : SignatureScheme , sig : Vec < u8 >",311,316
3,1,19,1,3,"signature@319-321@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","signature","signature & self",319,321
4,1,35,1,4,"encode@325-328@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","encode","encode & self , bytes : & mut Vec < u8 >",325,328
5,3,49,1,6,"read@330-335@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","read","read r : & mut Reader",330,335
19,1,83,0,20,"assertions_are_debug@339-358@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verify.rs","assertions_are_debug","assertions_are_debug",339,358
6,2,59,2,6,"read_tls@48-53@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","read_tls","read_tls & mut self , rd : & mut dyn io :: Read",48,53
3,1,35,2,3,"write_tls@58-60@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","write_tls","write_tls & mut self , wr : & mut dyn io :: Write",58,60
6,2,41,1,6,"reader@63-68@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","reader","reader & mut self",63,68
6,2,49,1,6,"writer@71-76@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","writer","writer & mut self",71,76
6,2,46,1,6,"process_new_packets@81-86@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","process_new_packets","process_new_packets & mut self",81,86
11,2,87,2,11,"export_keying_material@91-101@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","export_keying_material","export_keying_material & self , output : T , label : & [ u8 ] , context : Option < & [ u8 ] > ,",91,101
10,3,78,2,10,"complete_io@106-115@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","complete_io","complete_io & mut self , io : & mut T",106,115
6,2,44,1,6,"dangerous_extract_secrets@119-124@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","dangerous_extract_secrets","dangerous_extract_secrets self",119,124
6,2,48,1,6,"set_buffer_limit@129-134@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","set_buffer_limit","set_buffer_limit & mut self , limit : Option < usize >",129,134
6,2,45,1,6,"deref@140-145@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","deref","deref & self",140,145
6,2,49,1,6,"deref_mut@149-154@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","deref_mut","deref_mut & mut self",149,154
16,5,121,1,23,"read@185-207@crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/conn.rs","read","read & mut self , buf : & mut [ u8 ]",185,207
49,3,94,1,49,"fmt@18-66@crypto_codebases/rustls/rustls_2017/ccn_lib/src/versions.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/versions.rs","fmt","fmt & self , f : & mut fmt :: Formatter < '_>) -> fmt::Result {
        self.version.fmt(f)
    }
}

/// TLS1.2
#[cfg(feature = 'tls12')]
pub static TLS12: SupportedProtocolVersion = SupportedProtocolVersion {
    version: ProtocolVersion::TLSv1_2,
};

/// TLS1.3
pub static TLS13: SupportedProtocolVersion = SupportedProtocolVersion {
    version: ProtocolVersion::TLSv1_3,
};

/// A list of all the protocol versions supported by rustls.
pub static ALL_VERSIONS: &[&SupportedProtocolVersion] = &[
    &TLS13,
    #[cfg(feature = 'tls12')]
    &TLS12,
];

/// The version configuration that an application should use by default.
///
/// This will be [`ALL_VERSIONS`] for now, but gives space in the future
/// to remove a version from here and require users to opt-in to older
/// versions.
pub static DEFAULT_VERSIONS: &[&SupportedProtocolVersion] = ALL_VERSIONS;

#[derive(Clone, Copy)]
pub(crate) struct EnabledVersions {
    #[cfg(feature = 'tls12')]
    tls12: Option<&' static SupportedProtocolVersion > , tls13 : Option < & 'static SupportedProtocolVersion>,
}

impl fmt::Debug for EnabledVersions {
    fn fmt(&self, f: &mut fmt::Formatter<' _ >",18,66
16,3,78,0,18,"new@70-87@crypto_codebases/rustls/rustls_2017/ccn_lib/src/versions.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/versions.rs","new","new versions : & [ & ' static SupportedProtocolVersion ]",70,87
8,2,47,2,8,"contains@89-96@crypto_codebases/rustls/rustls_2017/ccn_lib/src/versions.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/versions.rs","contains","contains & self , version : ProtocolVersion",89,96
12,1,61,0,12,"new@43-54@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","new","new",43,54
12,1,66,2,12,"encrypt_outgoing@109-120@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","encrypt_outgoing","encrypt_outgoing & mut self , plain : OutboundPlainMessage ,",109,120
5,1,37,1,5,"prepare_message_encrypter@124-128@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","prepare_message_encrypter","prepare_message_encrypter & mut self , cipher : Box < dyn MessageEncrypter >",124,128
5,1,37,1,5,"prepare_message_decrypter@132-136@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","prepare_message_decrypter","prepare_message_decrypter & mut self , cipher : Box < dyn MessageDecrypter >",132,136
4,1,29,1,4,"start_encrypting@140-143@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","start_encrypting","start_encrypting & mut self",140,143
4,1,29,1,4,"start_decrypting@147-150@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","start_decrypting","start_decrypting & mut self",147,150
4,1,30,1,4,"set_message_encrypter@154-157@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","set_message_encrypter","set_message_encrypter & mut self , cipher : Box < dyn MessageEncrypter >",154,157
5,1,36,1,5,"set_message_decrypter@161-165@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","set_message_decrypter","set_message_decrypter & mut self , cipher : Box < dyn MessageDecrypter >",161,165
9,1,44,2,9,"set_message_decrypter_with_trial_decryption@170-178@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","set_message_decrypter_with_trial_decryption","set_message_decrypter_with_trial_decryption & mut self , cipher : Box < dyn MessageDecrypter > , max_length : usize ,",170,178
3,1,15,1,3,"finish_trial_decryption@180-182@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","finish_trial_decryption","finish_trial_decryption & mut self",180,182
3,1,15,1,3,"wants_close_before_encrypt@186-188@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","wants_close_before_encrypt","wants_close_before_encrypt & self",186,188
3,1,15,1,3,"encrypt_exhausted@192-194@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","encrypt_exhausted","encrypt_exhausted & self",192,194
3,1,17,1,3,"is_encrypting@196-198@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","is_encrypting","is_encrypting & self",196,198
3,1,13,1,3,"has_decrypted@202-204@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","has_decrypted","has_decrypted & self",202,204
3,1,13,1,3,"write_seq@206-208@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","write_seq","write_seq & self",206,208
5,1,28,1,5,"remaining_write_seq@211-215@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","remaining_write_seq","remaining_write_seq & self",211,215
3,1,13,1,3,"read_seq@217-219@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","read_seq","read_seq & self",217,219
4,1,22,2,4,"encrypted_len@221-224@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","encrypted_len","encrypted_len & self , payload_len : usize",221,224
12,2,55,2,12,"doing_trial_decryption@226-237@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","doing_trial_decryption","doing_trial_decryption & mut self , requested : usize",226,237
46,1,233,0,55,"decrypt@259-313@crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/record_layer.rs","decrypt","decrypt",259,313
5,1,23,1,5,"new@19-23@crypto_codebases/rustls/rustls_2017/ccn_lib/src/lock.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/lock.rs","new","new data : T",19,23
6,1,27,0,6,"new@22-27@crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","new","new limit : Option < usize >",22,27
3,1,22,1,3,"set_limit@36-38@crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","set_limit","set_limit & mut self , new_limit : Option < usize >",36,38
3,1,17,1,3,"is_empty@41-43@crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","is_empty","is_empty & self",41,43
7,2,34,1,7,"len@46-52@crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","len","len & self",46,52
8,2,52,2,8,"apply_limit@57-64@crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","apply_limit","apply_limit & self , len : usize",57,64
7,2,46,1,9,"append@67-75@crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","append","append & mut self , bytes : Vec < u8 >",67,75
3,1,24,1,3,"pop@79-81@crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/vecbuf.rs","pop","pop & mut self",79,81
3,2,20,1,3,"is_handshaking@99-101@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","is_handshaking","is_handshaking & self",99,101
119,5,186,1,126,"peer_certificates@118-243@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","peer_certificates","peer_certificates & self",118,243
10,2,48,1,10,"check_aligned_handshake@249-258@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","check_aligned_handshake","check_aligned_handshake & mut self",249,258
8,2,39,2,8,"send_msg_encrypt@262-269@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","send_msg_encrypt","send_msg_encrypt & mut self , m : PlainMessage",262,269
231,25,1388,52,298,"send_appdata_encrypt@272-569@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","send_appdata_encrypt","send_appdata_encrypt & mut self , payload : OutboundChunks < '_>, limit: Limit) -> usize {
        // Here, the limit on sendable_tls applies to encrypted data,
        // but we' re respecting it for plaintext data -- so we 'll
        // be out by whatever the cipher+record overhead is.  That' s a let len = match limit { #[cfg(feature = 'std')] Limit :: Yes => self . sendable_tls . apply_limit payload . len , Limit :: No => payload . len , } ; let iter = self . message_fragmenter . fragment_payload ContentType :: ApplicationData , ProtocolVersion :: TLSv1_2 , payload . split_at len . 0 , ; for m in iter { self . send_single_fragment m ; } len } fn send_single_fragment & mut self , m : OutboundPlainMessage { if self . record_layer . wants_close_before_encrypt { self . send_close_notify ; } if self . record_layer . encrypt_exhausted { return ; } let em = self . record_layer . encrypt_outgoing m ; self . queue_tls_message em ; } fn send_plain_non_buffering & mut self , payload : OutboundChunks < '_>, limit: Limit) -> usize {
        debug_assert!(self.may_send_application_data);
        debug_assert!(self.record_layer.is_encrypting());

        if payload.is_empty() {
            // Don' t send empty fragments . return 0 ; } self . send_appdata_encrypt payload , limit } pub crate fn start_outgoing_traffic & mut self , sendable_plaintext : & mut Option < & mut ChunkVecBuffer > , { self . may_send_application_data = true ; if let Some sendable_plaintext = sendable_plaintext { self . flush_plaintext sendable_plaintext ; } } pub crate fn start_traffic & mut self , sendable_plaintext : & mut Option < & mut ChunkVecBuffer > { self . may_receive_application_data = true ; self . start_outgoing_traffic sendable_plaintext ; } fn flush_plaintext & mut self , sendable_plaintext : & mut ChunkVecBuffer { if ! self . may_send_application_data { return ; } while let Some buf = sendable_plaintext . pop { self . send_plain_non_buffering buf . as_slice . into , Limit :: No ; } } fn queue_tls_message & mut self , m : OutboundOpaqueMessage { self . sendable_tls . append m . encode ; } pub crate fn send_msg & mut self , m : Message , must_encrypt : bool { { if let Protocol :: Quic = self . protocol { if let MessagePayload :: Alert alert = m . payload { self . quic . alert = Some alert . description ; } else { debug_assert ! matches ! m . payload , MessagePayload :: Handshake { . . } , 'QUIC uses TLS for the cryptographic handshake only' ; let mut bytes = Vec :: new ; m . payload . encode & mut bytes ; self . quic . hs_queue . push_back must_encrypt , bytes ; } return ; } } if ! must_encrypt { let msg = & m . into ; let iter = self . message_fragmenter . fragment_message msg ; for m in iter { self . queue_tls_message m . to_unencrypted_opaque ; } } else { self . send_msg_encrypt m . into ; } } pub crate fn take_received_plaintext & mut self , bytes : Payload { self . received_plaintext . append bytes . into_vec ; } #[cfg(feature = 'tls12')] pub crate fn start_encryption_tls12 & mut self , secrets : & ConnectionSecrets , side : Side { let dec , enc = secrets . make_cipher_pair side ; self . record_layer . prepare_message_encrypter enc ; self . record_layer . prepare_message_decrypter dec ; } pub crate fn missing_extension & mut self , why : PeerMisbehaved -> Error { self . send_fatal_alert AlertDescription :: MissingExtension , why } fn send_warning_alert & mut self , desc : AlertDescription { warn ! 'Sending warning alert {:?}' , desc ; self . send_warning_alert_no_log desc ; } pub crate fn process_alert & mut self , alert : & AlertMessagePayload -> Result < , Error > { if let AlertLevel :: Unknown _ = alert . level { return Err self . send_fatal_alert AlertDescription :: IllegalParameter , Error :: AlertReceived alert . description , ; } if alert . description == AlertDescription :: CloseNotify { self . has_received_close_notify = true ; return Ok ; } let err = Error :: AlertReceived alert . description ; if alert . level == AlertLevel :: Warning { if self . is_tls13 && alert . description != AlertDescription :: UserCanceled { return Err self . send_fatal_alert AlertDescription :: DecodeError , err ; } else { warn ! 'TLS alert warning received: {:?}' , alert ; return Ok ; } } Err err } pub crate fn send_cert_verify_error_alert & mut self , err : Error -> Error { self . send_fatal_alert match & err { Error :: InvalidCertificate e => e . clone . into , Error :: PeerMisbehaved _ => AlertDescription :: IllegalParameter , _ => AlertDescription :: HandshakeFailure , } , err , } pub crate fn send_fatal_alert & mut self , desc : AlertDescription , err : impl Into < Error > , -> Error { debug_assert ! ! self . sent_fatal_alert ; let m = Message :: build_alert AlertLevel :: Fatal , desc ; self . send_msg m , self . record_layer . is_encrypting ; self . sent_fatal_alert = true ; err . into } pub fn send_close_notify & mut self { debug ! 'Sending warning alert {:?}' , AlertDescription :: CloseNotify ; self . send_warning_alert_no_log AlertDescription :: CloseNotify ; } pub crate fn eager_send_close_notify & mut self , outgoing_tls : & mut [ u8 ] , -> Result < usize , EncryptError > { debug_assert ! self . record_layer . is_encrypting ; let m = Message :: build_alert AlertLevel :: Warning , AlertDescription :: CloseNotify . into ; let iter = self . message_fragmenter . fragment_message & m ; self . check_required_size outgoing_tls , None , iter ? ; debug ! 'Sending warning alert {:?}' , AlertDescription :: CloseNotify ; let iter = self . message_fragmenter . fragment_message & m ; let written = self . write_fragments outgoing_tls , None , iter ; Ok written } fn send_warning_alert_no_log & mut self , desc : AlertDescription { let m = Message :: build_alert AlertLevel :: Warning , desc ; self . send_msg m , self . record_layer . is_encrypting ; } fn check_required_size < 'a>(
        &self,
        outgoing_tls: &mut [u8],
        opt_msg: Option<&[u8]>,
        fragments: impl Iterator<Item = OutboundPlainMessage<' a > > , -> Result < , EncryptError > { let mut required_size = 0 ; if let Some message = opt_msg { required_size += message . len ; } for m in fragments { required_size += m . encoded_len & self . record_layer ; } if required_size > outgoing_tls . len { return Err EncryptError :: InsufficientSize InsufficientSizeError { required_size , } ; } Ok } fn write_fragments < 'a>(
        &mut self,
        outgoing_tls: &mut [u8],
        opt_msg: Option<Vec<u8>>,
        fragments: impl Iterator<Item = OutboundPlainMessage<' a > > ,",272,569
4,1,32,1,4,"set_max_fragment_size@571-574@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","set_max_fragment_size","set_max_fragment_size & mut self , new : Option < usize >",571,574
5,1,30,1,5,"get_alpn_protocol@576-580@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","get_alpn_protocol","get_alpn_protocol & self",576,580
5,4,36,1,11,"wants_read@591-601@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","wants_read","wants_read & self",591,601
7,1,39,1,7,"current_io_state@603-609@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","current_io_state","current_io_state & self",603,609
3,1,17,1,3,"is_quic@611-613@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","is_quic","is_quic & self",611,613
13,2,69,2,13,"should_update_key@615-627@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","should_update_key","should_update_key & mut self , key_update_request : & KeyUpdateRequest ,",615,627
8,1,48,1,8,"enqueue_key_update_notification@629-636@crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/common_state.rs","enqueue_key_update_notification","enqueue_key_update_notification & mut self",629,636
3,1,17,1,3,"suite@60-62@crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","suite","suite & self",60,62
20,2,40,1,20,"hash_provider@65-84@crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","hash_provider","hash_provider & self",65,84
73,1,28,1,73,"version@87-159@crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","version","version & self",87,159
9,1,47,1,9,"compatible_sigscheme_for_suites@163-171@crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","compatible_sigscheme_for_suites","compatible_sigscheme_for_suites sigscheme : SignatureScheme , common_suites : & [ SupportedCipherSuite ] ,",163,171
3,1,16,0,3,"test_scs_is_debug@232-234@crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","test_scs_is_debug","test_scs_is_debug",232,234
12,1,52,0,12,"test_can_resume_to@237-248@crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/suites.rs","test_can_resume_to","test_can_resume_to",237,248
8,2,52,2,8,"random_vec@9-16@crypto_codebases/rustls/rustls_2017/ccn_lib/src/rand.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/rand.rs","random_vec","random_vec secure_random : & dyn SecureRandom , len : usize ,",9,16
5,2,47,1,5,"random_u32@19-23@crypto_codebases/rustls/rustls_2017/ccn_lib/src/rand.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/rand.rs","random_u32","random_u32 secure_random : & dyn SecureRandom",19,23
5,2,47,1,5,"random_u16@26-30@crypto_codebases/rustls/rustls_2017/ccn_lib/src/rand.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/rand.rs","random_u16","random_u16 secure_random : & dyn SecureRandom",26,30
81,10,326,1,89,"fmt@169-257@crypto_codebases/rustls/rustls_2017/ccn_lib/src/builder.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/builder.rs","fmt","fmt & self , f : & mut fmt :: Formatter < '_>) -> fmt::Result {
        let side_name = core::any::type_name::<Side>();
        let (ty, _) = side_name
            .split_once(' < ')
            .unwrap_or((side_name, ''));
        let (_, name) = ty.rsplit_once('::').unwrap_or(('', ty));

        f.debug_struct(&format!('ConfigBuilder<{}, _>', name,))
            .field('state', &self.state)
            .finish()
    }
}

/// Config builder state where the caller must supply TLS protocol versions.
///
/// For more information, see the [`ConfigBuilder`] documentation.
#[derive(Clone, Debug)]
pub struct WantsVersions {
    pub(crate) provider: Arc<CryptoProvider>,
    pub(crate) time_provider: Arc<dyn TimeProvider>,
}

impl<S: ConfigSide> ConfigBuilder<S, WantsVersions> {
    /// Accept the default protocol versions: both TLS1.2 and TLS1.3 are enabled.
    pub fn with_safe_default_protocol_versions(
        self,
    ) -> Result<ConfigBuilder<S, WantsVerifier>, Error> {
        self.with_protocol_versions(versions::DEFAULT_VERSIONS)
    }

    /// Use a specific set of protocol versions.
    pub fn with_protocol_versions(
        self,
        versions: &[&' static versions :: SupportedProtocolVersion ] ,",169,257
4,1,42,2,10,"log@39-48@crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log.rs","log","log & self , label : & str , client_random : & [ u8 ] , secret : & [ u8 ]",39,48
1,1,27,2,1,"log@56-56@crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log.rs","log","log & self , _ : & str , _ : & [ u8 ] , _ : & [ u8 ]",56,56
3,1,16,2,3,"will_log@58-60@crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/key_log.rs","will_log","will_log & self , _label : & str",58,60
11,2,58,1,11,"reddit_cert@20-30@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","reddit_cert","reddit_cert b : & mut test :: Bencher",20,30
11,2,58,1,11,"github_cert@33-43@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","github_cert","github_cert b : & mut test :: Bencher",33,43
13,2,70,1,13,"arstechnica_cert@46-58@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","arstechnica_cert","arstechnica_cert b : & mut test :: Bencher",46,58
11,2,58,1,11,"servo_cert@61-71@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","servo_cert","servo_cert b : & mut test :: Bencher",61,71
11,2,58,1,11,"twitter_cert@74-84@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","twitter_cert","twitter_cert b : & mut test :: Bencher",74,84
11,2,58,1,11,"wikipedia_cert@87-97@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","wikipedia_cert","wikipedia_cert b : & mut test :: Bencher",87,97
11,2,58,1,11,"google_cert@100-110@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","google_cert","google_cert b : & mut test :: Bencher",100,110
11,2,58,1,11,"hn_cert@113-123@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","hn_cert","hn_cert b : & mut test :: Bencher",113,123
11,2,58,1,11,"stackoverflow_cert@126-136@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","stackoverflow_cert","stackoverflow_cert b : & mut test :: Bencher",126,136
11,2,58,1,11,"duckduckgo_cert@139-149@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","duckduckgo_cert","duckduckgo_cert b : & mut test :: Bencher",139,149
12,2,64,1,12,"rustlang_cert@152-163@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","rustlang_cert","rustlang_cert b : & mut test :: Bencher",152,163
11,2,58,1,11,"wapo_cert@166-176@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","wapo_cert","wapo_cert b : & mut test :: Bencher",166,176
21,1,125,1,21,"new@187-207@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","new","new provider : CryptoProvider , domain : & 'static str, certs: &[&' static [ u8 ] ]",187,207
13,1,66,1,14,"verify_once@209-222@crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","crypto_codebases/rustls/rustls_2017/ccn_lib/src/verifybench.rs","verify_once","verify_once & self",209,222
